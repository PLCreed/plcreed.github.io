<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="《C-Primer中文版（第5版）》笔记"><a href="#《C-Primer中文版（第5版）》笔记" class="headerlink" title="《C++ Primer中文版（第5版）》笔记"></a>《C++ Primer中文版（第5版）》笔记</h1><p><img src="Cover.png" alt="Cover"></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-1%20Getting%20Started">第1章 开始</a></p><h3 id="第I部分-C-基础"><a href="#第I部分-C-基础" class="headerlink" title="第I部分 C++基础"></a>第I部分 C++基础</h3><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-2%20Variables%20and%20Basic%20Types">第2章 变量和基本类型</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-3%20Strings%2C%20Vectors%2C%20and%20Arrays">第3章 字符串、向量和数组</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-4%20Expressions">第4章 表达式</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-5%20Statements">第5章 语句</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-6%20Functions">第6章 函数</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-7%20Classes">第7章 类</a></p><h3 id="第II部分-C-标准库"><a href="#第II部分-C-标准库" class="headerlink" title="第II部分 C++标准库"></a>第II部分 C++标准库</h3><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-8%20The%20IO%20Library">第8章 IO库</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-9%20Sequential%20Containers">第9章 顺序容器</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-10%20Generic%20Algorithms">第10章 泛型算法</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-11%20Associative%20Containers">第11章 关联容器</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-12%20Dynamic%20Memory">第12章 动态内存</a></p><h3 id="第III部分-类设计者的工具"><a href="#第III部分-类设计者的工具" class="headerlink" title="第III部分 类设计者的工具"></a>第III部分 类设计者的工具</h3><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-13%20Copy%20Control">第13章 拷贝控制</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-14%20Overloaded%20Operations%20and%20Conversions">第14章 操作重载与类型转换</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-15%20Object-Oriented%20Programming">第15章 面向对象程序设计</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-16%20Templates%20and%20Generic%20Programming">第16章 模板与泛型编程</a></p><h3 id="第IV部分-高级主题"><a href="#第IV部分-高级主题" class="headerlink" title="第IV部分 高级主题"></a>第IV部分 高级主题</h3><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-17%20Specialized%20Library%20Facilities">第17章 标准库特殊设施</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-18%20Tools%20for%20Large%20Programs">第18章 用于大型程序的工具</a></p><p><a href="https://github.com/czs108/Cpp-Primer-5th-Note-CN/tree/master/Chapter-19%20Specialized%20Tools%20and%20Techniques">第19章 特殊工具与技术</a></p><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p><em><strong>GitHub</strong></em>：<a href="https://github.com/czs108/">https://github.com/czs108/</a></p><p><em><strong>E-Mail</strong></em>：chenzs108@outlook.com</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-9-sequential-containers/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-9-sequential-containers/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第9章-顺序容器"><a href="#第9章-顺序容器" class="headerlink" title="第9章 顺序容器"></a>第9章 顺序容器</h1><h2 id="顺序容器概述（Overview-of-the-Sequential-Containers）"><a href="#顺序容器概述（Overview-of-the-Sequential-Containers）" class="headerlink" title="顺序容器概述（Overview of the Sequential Containers）"></a>顺序容器概述（Overview of the Sequential Containers）</h2><p>顺序容器类型：</p><p><img src="Images/9-1.png" alt="9-1"></p><table><thead><tr><th align="center">类型</th><th align="center">特性</th></tr></thead><tbody><tr><td align="center"><code>vector</code></td><td align="center">可变大小数组。支持快速随机访问。在尾部之外的位置插入/删除元素可能很慢</td></tr><tr><td align="center"><code>deque</code></td><td align="center">双端队列。支持快速随机访问。在头尾位置插入/删除速度很快</td></tr><tr><td align="center"><code>list</code></td><td align="center">双向链表。只支持双向顺序访问。在任何位置插入/删除速度都很快</td></tr><tr><td align="center"><code>forward_list</code></td><td align="center">单向链表。只支持单向顺序访问。在任何位置插入/删除速度都很快</td></tr><tr><td align="center"><code>array</code></td><td align="center">固定大小数组。支持快速随机访问。不能添加/删除元素</td></tr><tr><td align="center"><code>string</code></td><td align="center">类似<code>vector</code>，但用于保存字符。支持快速随机访问。在尾部插入/删除速度很快</td></tr></tbody></table><p><code>forward_list</code>和<code>array</code>是C++11新增类型。与内置数组相比，<code>array</code>更安全易用。<code>forward_list</code>没有<code>size</code>操作。</p><p>容器选择原则：</p><ul><li>除非有合适的理由选择其他容器，否则应该使用<code>vector</code>。</li><li>如果程序有很多小的元素，且空间的额外开销很重要，则不要使用<code>list</code>或<code>forward_list</code>。</li><li>如果程序要求随机访问容器元素，则应该使用<code>vector</code>或<code>deque</code>。</li><li>如果程序需要在容器头尾位置插入/删除元素，但不会在中间位置操作，则应该使用<code>deque</code>。</li><li>如果程序只有在读取输入时才需要在容器中间位置插入元素，之后需要随机访问元素。则：<ul><li>先确定是否真的需要在容器中间位置插入元素。当处理输入数据时，可以先向<code>vector</code>追加数据，再调用标准库的<code>sort</code>函数重排元素，从而避免在中间位置添加元素。</li><li>如果必须在中间位置插入元素，可以在输入阶段使用<code>list</code>。输入完成后将<code>list</code>中的内容拷贝到<code>vector</code>中。</li></ul></li><li>不确定应该使用哪种容器时，可以先只使用<code>vector</code>和<code>list</code>的公共操作：使用迭代器，不使用下标操作，避免随机访问。这样在必要时选择<code>vector</code>或<code>list</code>都很方便。</li></ul><h2 id="容器库概览（Container-Library-Overview）"><a href="#容器库概览（Container-Library-Overview）" class="headerlink" title="容器库概览（Container Library Overview）"></a>容器库概览（Container Library Overview）</h2><p>每个容器都定义在一个头文件中，文件名与类型名相同。容器均为模板类型。</p><p><img src="Images/9-2.png" alt="9-2"></p><h3 id="迭代器（Iterators）"><a href="#迭代器（Iterators）" class="headerlink" title="迭代器（Iterators）"></a>迭代器（Iterators）</h3><p><code>forward_list</code>类型不支持递减运算符<code>--</code>。</p><p>一个迭代器范围（iterator range）由一对迭代器表示。这两个迭代器通常被称为<code>begin</code>和<code>end</code>，分别指向同一个容器中的元素或尾后地址。<code>end</code>迭代器不会指向范围中的最后一个元素，而是指向尾元素之后的位置。这种元素范围被称为左闭合区间（left-inclusive interval），其标准数学描述为<code>[begin，end）</code>。迭代器<code>begin</code>和<code>end</code>必须指向相同的容器，<code>end</code>可以与<code>begin</code>指向相同的位置，但不能指向<code>begin</code>之前的位置（由程序员确保）。</p><p>假定<code>begin</code>和<code>end</code>构成一个合法的迭代器范围，则：</p><ul><li>如果<code>begin</code>等于<code>end</code>，则范围为空。</li><li>如果<code>begin</code>不等于<code>end</code>，则范围内至少包含一个元素，且<code>begin</code>指向该范围内的第一个元素。</li><li>可以递增<code>begin</code>若干次，令<code>begin</code>等于<code>end</code>。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (begin !&#x3D; end)&#123;    *begin &#x3D; val;   &#x2F;&#x2F; ok: range isn&#39;t empty so begin denotes an element    ++begin;    &#x2F;&#x2F; advance the iterator to get the next element&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器类型成员（Container-Type-Members）"><a href="#容器类型成员（Container-Type-Members）" class="headerlink" title="容器类型成员（Container Type Members）"></a>容器类型成员（Container Type Members）</h3><p>通过类型别名，可以在不了解容器元素类型的情况下使用元素。如果需要元素类型，可以使用容器的<code>value_type</code>。如果需要元素类型的引用，可以使用<code>reference</code>或<code>const_reference</code>。</p><h3 id="begin和end成员（begin-and-end-Members）"><a href="#begin和end成员（begin-and-end-Members）" class="headerlink" title="begin和end成员（begin and end Members）"></a>begin和end成员（begin and end Members）</h3><p><code>begin</code>和<code>end</code>操作生成指向容器中第一个元素和尾后地址的迭代器。其常见用途是形成一个包含容器中所有元素的迭代器范围。</p><p><code>begin</code>和<code>end</code>操作有多个版本：带<code>r</code>的版本返回反向迭代器。以<code>c</code>开头的版本（C++11新增）返回<code>const</code>迭代器。不以<code>c</code>开头的版本都是重载的，当对非常量对象调用这些成员时，返回普通迭代器，对<code>const</code>对象调用时，返回<code>const</code>迭代器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">list&lt;string&gt; a &#x3D; &#123;&quot;Milton&quot;, &quot;Shakespeare&quot;, &quot;Austen&quot;&#125;;auto it1 &#x3D; a.begin();    &#x2F;&#x2F; list&lt;string&gt;::iteratorauto it2 &#x3D; a.rbegin();   &#x2F;&#x2F; list&lt;string&gt;::reverse_iteratorauto it3 &#x3D; a.cbegin();   &#x2F;&#x2F; list&lt;string&gt;::const_iteratorauto it4 &#x3D; a.crbegin();  &#x2F;&#x2F; list&lt;string&gt;::const_reverse_iterator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>auto</code>与<code>begin</code>或<code>end</code>结合使用时，返回的迭代器类型依赖于容器类型。但调用以<code>c</code>开头的版本仍然可以获得<code>const</code>迭代器，与容器是否是常量无关。</p><p>当程序不需要写操作时，应该使用<code>cbegin</code>和<code>cend</code>。</p><h3 id="容器定义和初始化（Defining-and-Initializing-a-Container）"><a href="#容器定义和初始化（Defining-and-Initializing-a-Container）" class="headerlink" title="容器定义和初始化（Defining and Initializing a Container）"></a>容器定义和初始化（Defining and Initializing a Container）</h3><p>容器定义和初始化方式：</p><p><img src="Images/9-3.png" alt="9-3"></p><p>将一个容器初始化为另一个容器的拷贝时，两个容器的容器类型和元素类型都必须相同。</p><p>传递迭代器参数来拷贝一个范围时，不要求容器类型相同，而且新容器和原容器中的元素类型也可以不同，但是要能进行类型转换。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; each container has three elements, initialized from the given initializerslist&lt;string&gt; authors &#x3D; &#123;&quot;Milton&quot;, &quot;Shakespeare&quot;, &quot;Austen&quot;&#125;;vector&lt;const char*&gt; articles &#x3D; &#123;&quot;a&quot;, &quot;an&quot;, &quot;the&quot;&#125;;list&lt;string&gt; list2(authors);        &#x2F;&#x2F; ok: types matchdeque&lt;string&gt; authList(authors);    &#x2F;&#x2F; error: container types don&#39;t matchvector&lt;string&gt; words(articles);     &#x2F;&#x2F; error: element types must match&#x2F;&#x2F; ok: converts const char* elements to stringforward_list&lt;string&gt; words(articles.begin(), articles.end());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++11允许对容器进行列表初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; each container has three elements, initialized from the given initializerslist&lt;string&gt; authors &#x3D; &#123;&quot;Milton&quot;, &quot;Shakespeare&quot;, &quot;Austen&quot;&#125;;vector&lt;const char*&gt; articles &#x3D; &#123;&quot;a&quot;, &quot;an&quot;, &quot;the&quot;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义和使用<code>array</code>类型时，需要同时指定元素类型和容器大小。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">array&lt;int, 42&gt;      &#x2F;&#x2F; type is: array that holds 42 intsarray&lt;string, 10&gt;   &#x2F;&#x2F; type is: array that holds 10 stringsarray&lt;int, 10&gt;::size_type i;   &#x2F;&#x2F; array type includes element type and sizearray&lt;int&gt;::size_type j;       &#x2F;&#x2F; error: array&lt;int&gt; is not a type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对<code>array</code>进行列表初始化时，初始值的数量不能大于<code>array</code>的大小。如果初始值的数量小于<code>array</code>的大小，则只初始化靠前的元素，剩余元素会被值初始化。如果元素类型是类类型，则该类需要一个默认构造函数。</p><p>可以对<code>array</code>进行拷贝或赋值操作，但要求二者的元素类型和大小都相同。</p><h3 id="赋值和swap（Assignment-and-swap）"><a href="#赋值和swap（Assignment-and-swap）" class="headerlink" title="赋值和swap（Assignment and swap）"></a>赋值和swap（Assignment and swap）</h3><p>容器赋值操作：</p><p><img src="Images/9-4.png" alt="9-4"></p><p>赋值运算符两侧的运算对象必须类型相同。<code>assign</code>允许用不同但相容的类型赋值，或者用容器的子序列赋值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">list&lt;string&gt; names;vector&lt;const char*&gt; oldstyle;names &#x3D; oldstyle;   &#x2F;&#x2F; error: container types don&#39;t match&#x2F;&#x2F; ok: can convert from const char*to stringnames.assign(oldstyle.cbegin(), oldstyle.cend());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于其旧元素被替换，因此传递给<code>assign</code>的迭代器不能指向调用<code>assign</code>的容器本身。</p><p><code>swap</code>交换两个相同类型容器的内容。除<code>array</code>外，<code>swap</code>不对任何元素进行拷贝、删除或插入操作，只交换两个容器的内部数据结构，因此可以保证快速完成。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;string&gt; svec1(10);   &#x2F;&#x2F; vector with ten elementsvector&lt;string&gt; svec2(24);   &#x2F;&#x2F; vector with 24 elementsswap(svec1, svec2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>赋值相关运算会导致指向左边容器内部的迭代器、引用和指针失效。而<code>swap</code>操作交换容器内容，不会导致迭代器、引用和指针失效（<code>array</code>和<code>string</code>除外）。</p><p>对于<code>array</code>，<code>swap</code>会真正交换它们的元素。因此在<code>swap</code>操作后，指针、引用和迭代器所绑定的元素不变，但元素值已经被交换。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">array&lt;int, 3&gt; a &#x3D; &#123; 1, 2, 3 &#125;;array&lt;int, 3&gt; b &#x3D; &#123; 4, 5, 6 &#125;;auto p &#x3D; a.cbegin(), q &#x3D; a.cend();a.swap(b);&#x2F;&#x2F; 输出交换后的值，即4、5、6while (p !&#x3D; q)&#123;    cout &lt;&lt; *p &lt;&lt; endl;    ++p;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于其他容器类型（除<code>string</code>），指针、引用和迭代器在<code>swap</code>操作后仍指向操作前的元素，但这些元素已经属于不同的容器了。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a &#x3D; &#123; 1, 2, 3 &#125;;vector&lt;int&gt; b &#x3D; &#123; 4, 5, 6 &#125;;auto p &#x3D; a.cbegin(), q &#x3D; a.cend();a.swap(b);&#x2F;&#x2F; 输出交换前的值，即1、2、3while (p !&#x3D; q)&#123;    cout &lt;&lt; *p &lt;&lt; endl;    ++p;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>array</code>不支持<code>assign</code>，也不允许用花括号列表进行赋值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">array&lt;int, 10&gt; a1 &#x3D; &#123;0,1,2,3,4,5,6,7,8,9&#125;;array&lt;int, 10&gt; a2 &#x3D; &#123;0&#125;;    &#x2F;&#x2F; elements all have value 0a1 &#x3D; a2;    &#x2F;&#x2F; replaces elements in a1a2 &#x3D; &#123;0&#125;;   &#x2F;&#x2F; error: cannot assign to an array from a braced list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>新标准库同时提供了成员和非成员函数版本的<code>swap</code>。非成员版本的<code>swap</code>在泛型编程中非常重要，建议统一使用非成员版本的<code>swap</code>。</p><h3 id="容器大小操作（Container-Size-Operations）"><a href="#容器大小操作（Container-Size-Operations）" class="headerlink" title="容器大小操作（Container Size Operations）"></a>容器大小操作（Container Size Operations）</h3><p><code>size</code>成员返回容器中元素的数量；<code>empty</code>当<code>size</code>为0时返回<code>true</code>，否则返回<code>false</code>；<code>max_size</code>返回一个大于或等于该类型容器所能容纳的最大元素数量的值。<code>forward_list</code>支持<code>max_size</code>和<code>empty</code>，但不支持<code>size</code>。</p><h3 id="关系运算符（Relational-Operators）"><a href="#关系运算符（Relational-Operators）" class="headerlink" title="关系运算符（Relational Operators）"></a>关系运算符（Relational Operators）</h3><p>每个容器类型都支持相等运算符（<code>==</code>、<code>!=</code>）。除无序关联容器外，其他容器都支持关系运算符（<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>）。关系运算符两侧的容器类型和保存元素类型都必须相同。</p><p>两个容器的比较实际上是元素的逐对比较，其工作方式与<code>string</code>的关系运算符类似：</p><ul><li>如果两个容器大小相同且所有元素对应相等，则这两个容器相等。</li><li>如果两个容器大小不同，但较小容器中的每个元素都等于较大容器中的对应元素，则较小容器小于较大容器。</li><li>如果两个容器都不是对方的前缀子序列，则两个容器的比较结果取决于第一个不等元素的比较结果。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v1 &#x3D; &#123; 1, 3, 5, 7, 9, 12 &#125;;vector&lt;int&gt; v2 &#x3D; &#123; 1, 3, 9 &#125;;vector&lt;int&gt; v3 &#x3D; &#123; 1, 3, 5, 7 &#125;;vector&lt;int&gt; v4 &#x3D; &#123; 1, 3, 5, 7, 9, 12 &#125;;v1 &lt; v2     &#x2F;&#x2F; true; v1 and v2 differ at element [2]: v1[2] is less than v2[2]v1 &lt; v3     &#x2F;&#x2F; false; all elements are equal, but v3 has fewer of them;v1 &#x3D;&#x3D; v4    &#x2F;&#x2F; true; each element is equal and v1 and v4 have the same size()v1 &#x3D;&#x3D; v2    &#x2F;&#x2F; false; v2 has fewer elements than v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器的相等运算符实际上是使用元素的<code>==</code>运算符实现的，而其他关系运算符则是使用元素的<code>&lt;</code>运算符。如果元素类型不支持所需运算符，则保存该元素的容器就不能使用相应的关系运算。</p><h2 id="顺序容器操作（Sequential-Container-Operations）"><a href="#顺序容器操作（Sequential-Container-Operations）" class="headerlink" title="顺序容器操作（Sequential Container Operations）"></a>顺序容器操作（Sequential Container Operations）</h2><h3 id="向顺序容器添加元素（Adding-Elements-to-a-Sequential-Container）"><a href="#向顺序容器添加元素（Adding-Elements-to-a-Sequential-Container）" class="headerlink" title="向顺序容器添加元素（Adding Elements to a Sequential Container）"></a>向顺序容器添加元素（Adding Elements to a Sequential Container）</h3><p>除<code>array</code>外，所有标准库容器都提供灵活的内存管理，在运行时可以动态添加或删除元素。</p><p><img src="Images/9-5.png" alt="9-5"></p><p><code>push_back</code>将一个元素追加到容器尾部，<code>push_front</code>将元素插入容器头部。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; read from standard input, putting each word onto the end of containerstring word;while (cin &gt;&gt; word)    container.push_back(word);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>insert</code>将元素插入到迭代器指定的位置之前。一些不支持<code>push_front</code>的容器可以使用<code>insert</code>将元素插入开始位置。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;string&gt; svec;list&lt;string&gt; slist;&#x2F;&#x2F; equivalent to calling slist.push_front(&quot;Hello!&quot;);slist.insert(slist.begin(), &quot;Hello!&quot;);&#x2F;&#x2F; no push_front on vector but we can insert before begin()&#x2F;&#x2F; warning: inserting anywhere but at the end of a vector might be slowsvec.insert(svec.begin(), &quot;Hello!&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将元素插入到<code>vector</code>、<code>deque</code>或<code>string</code>的任何位置都是合法的，但可能会很耗时。</p><p>在新标准库中，接受元素个数或范围的<code>insert</code>版本返回指向第一个新增元素的迭代器，而旧版本中这些操作返回<code>void</code>。如果范围为空，不插入任何元素，<code>insert</code>会返回第一个参数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">list&lt;string&gt; 1st;auto iter &#x3D; 1st.begin();while (cin &gt;&gt; word)    iter &#x3D; 1st.insert(iter, word);  &#x2F;&#x2F; same as calling push_front<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>新标准库增加了三个直接构造而不是拷贝元素的操作：<code>emplace_front</code>、<code>emplace_back</code>和<code>emplace</code>，其分别对应<code>push_front</code>、<code>push_back</code>和<code>insert</code>。当调用<code>push</code>或<code>insert</code>时，元素对象被拷贝到容器中。而调用<code>emplace</code>时，则是将参数传递给元素类型的构造函数，直接在容器的内存空间中构造元素。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; construct a Sales_data object at the end of c&#x2F;&#x2F; uses the three-argument Sales_data constructorc.emplace_back(&quot;978-0590353403&quot;, 25, 15.99);&#x2F;&#x2F; error: there is no version of push_back that takes three argumentsc.push_back(&quot;978-0590353403&quot;, 25, 15.99);&#x2F;&#x2F; ok: we create a temporary Sales_data object to pass to push_backc.push_back(Sales_data(&quot;978-0590353403&quot;, 25, 15.99));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传递给<code>emplace</code>的参数必须与元素类型的构造函数相匹配。</p><p><code>forward_list</code>有特殊版本的<code>insert</code>和<code>emplace</code>操作，且不支持<code>push_back</code>和<code>emplace_back</code>。<code>vector</code>和<code>string</code>不支持<code>push_front</code>和<code>emplace_front</code>。</p><h3 id="访问元素（Accessing-Elements）"><a href="#访问元素（Accessing-Elements）" class="headerlink" title="访问元素（Accessing Elements）"></a>访问元素（Accessing Elements）</h3><p>每个顺序容器都有一个<code>front</code>成员函数，而除了<code>forward_list</code>之外的顺序容器还有一个<code>back</code>成员函数。这两个操作分别返回首元素和尾元素的引用。</p><p>在调用<code>front</code>和<code>back</code>之前，要确保容器非空。</p><p>顺序容器的元素访问操作：</p><p><img src="Images/9-6.png" alt="9-6"></p><p>在容器中访问元素的成员函数都返回引用类型。如果容器是<code>const</code>对象，则返回<code>const</code>引用，否则返回普通引用。</p><p>可以快速随机访问的容器（<code>string</code>、<code>vector</code>、<code>deque</code>和<code>array</code>）都提供下标运算符。保证下标有效是程序员的责任。如果希望确保下标合法，可以使用<code>at</code>成员函数。<code>at</code>类似下标运算，但如果下标越界，<code>at</code>会抛出<code>out_of_range</code>异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;string&gt; svec;  &#x2F;&#x2F; empty vectorcout &lt;&lt; svec[0];      &#x2F;&#x2F; run-time error: there are no elements in svec!cout &lt;&lt; svec.at(0);   &#x2F;&#x2F; throws an out_of_range exception<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除元素（Erasing-Elements）"><a href="#删除元素（Erasing-Elements）" class="headerlink" title="删除元素（Erasing Elements）"></a>删除元素（Erasing Elements）</h3><p>顺序容器的元素删除操作：</p><p><img src="Images/9-7.png" alt="9-7"></p><p>删除<code>deque</code>中除首尾位置之外的任何元素都会使所有迭代器、引用和指针失效。删除<code>vector</code>或<code>string</code>的元素后，指向删除点之后位置的迭代器、引用和指针也都会失效。</p><p>删除元素前，程序员必须确保目标元素存在。</p><p><code>pop_front</code>和<code>pop_back</code>函数分别删除首元素和尾元素。<code>vector</code>和<code>string</code>类型不支持<code>pop_front</code>，<code>forward_list</code>类型不支持<code>pop_back</code>。</p><p><code>erase</code>函数删除指定位置的元素。可以删除由一个迭代器指定的单个元素，也可以删除由一对迭代器指定的范围内的所有元素。两种形式的<code>erase</code>都返回指向删除元素（最后一个）之后位置的迭代器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; delete the range of elements between two iterators&#x2F;&#x2F; returns an iterator to the element just after the last removed elementelem1 &#x3D; slist.erase(elem1, elem2);  &#x2F;&#x2F; after the call elem1 &#x3D;&#x3D; elem2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>clear</code>函数删除容器内的所有元素。</p><h3 id="特殊的forward-list操作（Specialized-forward-list-Operations）"><a href="#特殊的forward-list操作（Specialized-forward-list-Operations）" class="headerlink" title="特殊的forward_list操作（Specialized forward_list Operations）"></a>特殊的forward_list操作（Specialized forward_list Operations）</h3><p>在<code>forward_list</code>中添加或删除元素的操作是通过改变给定元素之后的元素来完成的。</p><p><img src="Images/9-8.png" alt="9-8"></p><p><code>forward_list</code>的插入和删除操作：</p><p><img src="Images/9-9.png" alt="9-9"></p><h3 id="改变容器大小（Resizing-a-Container）"><a href="#改变容器大小（Resizing-a-Container）" class="headerlink" title="改变容器大小（Resizing a Container）"></a>改变容器大小（Resizing a Container）</h3><p>顺序容器的大小操作：</p><p><img src="Images/9-10.png" alt="9-10"></p><p><code>resize</code>函数接受一个可选的元素值参数，用来初始化添加到容器中的元素，否则新元素进行值初始化。如果容器保存的是类类型元素，且<code>resize</code>向容器添加新元素，则必须提供初始值，或元素类型提供默认构造函数。</p><h3 id="容器操作可能使迭代器失效（Container-Operations-May-Invalidate-Iterators）"><a href="#容器操作可能使迭代器失效（Container-Operations-May-Invalidate-Iterators）" class="headerlink" title="容器操作可能使迭代器失效（Container Operations May Invalidate Iterators）"></a>容器操作可能使迭代器失效（Container Operations May Invalidate Iterators）</h3><p>向容器中添加或删除元素可能会使指向容器元素的指针、引用或迭代器失效。失效的指针、引用或迭代器不再表示任何元素，使用它们是一种严重的程序设计错误。</p><ul><li>向容器中添加元素后：<ul><li>如果容器是<code>vector</code>或<code>string</code>类型，且存储空间被重新分配，则指向容器的迭代器、指针和引用都会失效。如果存储空间未重新分配，指向插入位置之前元素的迭代器、指针和引用仍然有效，但指向插入位置之后元素的迭代器、指针和引用都会失效。</li><li>如果容器是<code>deque</code>类型，添加到除首尾之外的任何位置都会使迭代器、指针和引用失效。如果添加到首尾位置，则迭代器会失效，而指针和引用不会失效。</li><li>如果容器是<code>list</code>或<code>forward_list</code>类型，指向容器的迭代器、指针和引用仍然有效。</li></ul></li><li>从容器中删除元素后，指向被删除元素的迭代器、指针和引用失效：<ul><li>如果容器是<code>list</code>或<code>forward_list</code>类型，指向容器其他位置的迭代器、指针和引用仍然有效。</li><li>如果容器是<code>deque</code>类型，删除除首尾之外的任何元素都会使迭代器、指针和引用失效。如果删除尾元素，则尾后迭代器失效，其他迭代器、指针和引用不受影响。如果删除首元素，这些也不会受影响。</li><li>如果容器是<code>vector</code>或<code>string</code>类型，指向删除位置之前元素的迭代器、指针和引用仍然有效。但尾后迭代器总会失效。</li></ul></li></ul><p>必须保证在每次改变容器后都正确地重新定位迭代器。</p><p>不要保存<code>end</code>函数返回的迭代器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; safer: recalculate end on each trip whenever the loop adds&#x2F;erases elementswhile (begin !&#x3D; v.end())&#123;    &#x2F;&#x2F; do some processing    ++begin;    &#x2F;&#x2F; advance begin because we want to insert after this element    begin &#x3D; v.insert(begin, 42);    &#x2F;&#x2F; insert the new value    ++begin;    &#x2F;&#x2F; advance begin past the element we just added&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vector对象是如何增长的（How-a-vector-Grows）"><a href="#vector对象是如何增长的（How-a-vector-Grows）" class="headerlink" title="vector对象是如何增长的（How a vector Grows）"></a>vector对象是如何增长的（How a vector Grows）</h2><p><code>vector</code>和<code>string</code>的实现通常会分配比新空间需求更大的内存空间，容器预留这些空间作为备用，可用来保存更多新元素。</p><p>容器大小管理操作：</p><p><img src="Images/9-11.png" alt="9-11"></p><p><code>capacity</code>函数返回容器在不扩充内存空间的情况下最多可以容纳的元素数量。<code>reserve</code>函数告知容器应该准备保存多少元素，它并不改变容器中元素的数量，仅影响容器预先分配的内存空间大小。</p><p><img src="Images/9-12.png" alt="9-12"></p><p>只有当需要的内存空间超过当前容量时，<code>reserve</code>才会真正改变容器容量，分配不小于需求大小的内存空间。当需求大小小于当前容量时，<code>reserve</code>并不会退回内存空间。因此在调用<code>reserve</code>之后，<code>capacity</code>会大于或等于传递给<code>reserve</code>的参数。</p><p>在C++11中可以使用<code>shrink_to_fit</code>函数来要求<code>deque</code>、<code>vector</code>和<code>string</code>退回不需要的内存空间（并不保证退回）。</p><h2 id="额外的string操作（Additional-string-Operations）"><a href="#额外的string操作（Additional-string-Operations）" class="headerlink" title="额外的string操作（Additional string Operations）"></a>额外的string操作（Additional string Operations）</h2><h3 id="构造string的其他方法（Other-Ways-to-Construct-strings）"><a href="#构造string的其他方法（Other-Ways-to-Construct-strings）" class="headerlink" title="构造string的其他方法（Other Ways to Construct strings）"></a>构造string的其他方法（Other Ways to Construct strings）</h3><p>构造<code>string</code>的其他方法：</p><p><img src="Images/9-13.png" alt="9-13"></p><p>从另一个<code>string</code>对象拷贝字符构造<code>string</code>时，如果提供的拷贝开始位置（可选）大于给定<code>string</code>的大小，则构造函数会抛出<code>out_of_range</code>异常。</p><p>子字符串操作：</p><p><img src="Images/9-14.png" alt="9-14"></p><p>如果传递给<code>substr</code>函数的开始位置超过<code>string</code>的大小，则函数会抛出<code>out_of_range</code>异常。</p><h3 id="改变string的其他方法（Other-Ways-to-Change-a-string）"><a href="#改变string的其他方法（Other-Ways-to-Change-a-string）" class="headerlink" title="改变string的其他方法（Other Ways to Change a string）"></a>改变string的其他方法（Other Ways to Change a string）</h3><p>修改<code>string</code>的操作：</p><p><img src="Images/9-15.png" alt="9-15"></p><p><code>append</code>函数是在<code>string</code>末尾进行插入操作的简写形式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s(&quot;C++ Primer&quot;), s2 &#x3D; s;     &#x2F;&#x2F; initialize s and s2 to &quot;C++ Primer&quot;s.insert(s.size(), &quot; 4th Ed.&quot;);     &#x2F;&#x2F; s &#x3D;&#x3D; &quot;C++ Primer 4th Ed.&quot;s2.append(&quot; 4th Ed.&quot;);     &#x2F;&#x2F; equivalent: appends &quot; 4th Ed.&quot; to s2; s &#x3D;&#x3D; s2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>replace</code>函数是调用<code>erase</code>和<code>insert</code>函数的简写形式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; equivalent way to replace &quot;4th&quot; by &quot;5th&quot;s.erase(11, 3);         &#x2F;&#x2F; s &#x3D;&#x3D; &quot;C++ Primer Ed.&quot;s.insert(11, &quot;5th&quot;);    &#x2F;&#x2F; s &#x3D;&#x3D; &quot;C++ Primer 5th Ed.&quot;&#x2F;&#x2F; starting at position 11, erase three characters and then insert &quot;5th&quot;s2.replace(11, 3, &quot;5th&quot;);   &#x2F;&#x2F; equivalent: s &#x3D;&#x3D; s2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string搜索操作（string-Search-Operations）"><a href="#string搜索操作（string-Search-Operations）" class="headerlink" title="string搜索操作（string Search Operations）"></a>string搜索操作（string Search Operations）</h3><p><code>string</code>的每个搜索操作都返回一个<code>string::size_type</code>值，表示匹配位置的下标。如果搜索失败，则返回一个名为<code>string::npos</code>的<code>static</code>成员。标准库将<code>npos</code>定义为<code>const string::size_type</code>类型，并初始化为-1。</p><p>不建议用<code>int</code>或其他带符号类型来保存<code>string</code>搜索函数的返回值。</p><p><code>string</code>搜索操作：</p><p><img src="Images/9-16.png" alt="9-16"></p><h3 id="compare函数（The-compare-Functions）"><a href="#compare函数（The-compare-Functions）" class="headerlink" title="compare函数（The compare Functions）"></a>compare函数（The compare Functions）</h3><p><code>string</code>类型提供了一组<code>compare</code>函数进行字符串比较操作，类似C标准库的<code>strcmp</code>函数。</p><p><code>compare</code>函数的几种参数形式：</p><p><img src="Images/9-17.png" alt="9-17"></p><h3 id="数值转换（Numeric-Conversions）"><a href="#数值转换（Numeric-Conversions）" class="headerlink" title="数值转换（Numeric Conversions）"></a>数值转换（Numeric Conversions）</h3><p>C++11增加了<code>string</code>和数值之间的转换函数：</p><p><img src="Images/9-18.png" alt="9-18"></p><p>进行数值转换时，<code>string</code>参数的第一个非空白字符必须是符号（<code>+</code>或<code>-</code>）或数字。它可以以<code>0x</code>或<code>0X</code>开头来表示十六进制数。对于转换目标是浮点值的函数，<code>string</code>参数也可以以小数点开头，并可以包含<code>e</code>或<code>E</code>来表示指数部分。</p><p>如果给定的<code>string</code>不能转换为一个数值，则转换函数会抛出<code>invalid_argument</code>异常。如果转换得到的数值无法用任何类型表示，则抛出<code>out_of_range</code>异常。</p><h2 id="容器适配器（Container-Adaptors）"><a href="#容器适配器（Container-Adaptors）" class="headerlink" title="容器适配器（Container Adaptors）"></a>容器适配器（Container Adaptors）</h2><p>标准库定义了<code>stack</code>、<code>queue</code>和<code>priority_queue</code>三种容器适配器。容器适配器可以改变已有容器的工作机制。</p><p>所有容器适配器都支持的操作和类型：</p><p><img src="Images/9-19.png" alt="9-19"></p><p>默认情况下，<code>stack</code>和<code>queue</code>是基于<code>deque</code>实现的，<code>priority_queue</code>是基于<code>vector</code>实现的。可以在创建适配器时将一个命名的顺序容器作为第二个类型参数，来重载默认容器类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; empty stack implemented on top of vectorstack&lt;string, vector&lt;string&gt;&gt; str_stk;&#x2F;&#x2F; str_stk2 is implemented on top of vector and initially holds a copy of svecstack&lt;string, vector&lt;string&gt;&gt; str_stk2(svec);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所有适配器都要求容器具有添加和删除元素的能力，因此适配器不能构造在<code>array</code>上。适配器还要求容器具有添加、删除和访问尾元素的能力，因此也不能用<code>forward_list</code>构造适配器。</p><p>栈适配器<code>stack</code>定义在头文件<em>stack</em>中，其支持的操作如下：</p><p><img src="Images/9-20.png" alt="9-20"></p><p>队列适配器<code>queue</code>和<code>priority_queue</code>定义在头文件<em>queue</em>中，其支持的操作如下：</p><p><img src="Images/9-21.png" alt="9-21"></p><p><code>queue</code>使用先进先出（first-in，first-out，FIFO）的存储和访问策略。进入队列的对象被放置到队尾，而离开队列的对象则从队首删除。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-8-the-io-library/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-8-the-io-library/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第8章-IO库"><a href="#第8章-IO库" class="headerlink" title="第8章 IO库"></a>第8章 IO库</h1><p>部分IO库设施：</p><ul><li><code>istream</code>：输入流类型，提供输入操作。</li><li><code>ostream</code>：输出流类型，提供输出操作。</li><li><code>cin</code>：<code>istream</code>对象，从标准输入读取数据。</li><li><code>cout</code>：<code>ostream</code>对象，向标准输出写入数据。</li><li><code>cerr</code>：<code>ostream</code>对象，向标准错误写入数据。</li><li><code>&gt;&gt;</code>运算符：从<code>istream</code>对象读取输入数据。</li><li><code>&lt;&lt;</code>运算符：向<code>ostream</code>对象写入输出数据。</li><li><code>getline</code>函数：从<code>istream</code>对象读取一行数据，写入<code>string</code>对象。</li></ul><h2 id="IO类（The-IO-Classes）"><a href="#IO类（The-IO-Classes）" class="headerlink" title="IO类（The IO Classes）"></a>IO类（The IO Classes）</h2><p>头文件<em>iostream</em>定义了用于读写流的基本类型，<em>fstream</em>定义了读写命名文件的类型，<em>sstream</em>定义了读写内存中<code>string</code>对象的类型。</p><p><img src="Images/8-1.png" alt="8-1"></p><p>宽字符版本的IO类型和函数的名字以<code>w</code>开始，如<code>wcin</code>、<code>wcout</code>和<code>wcerr</code>分别对应<code>cin</code>、<code>cout</code>和<code>cerr</code>。它们与其对应的普通<code>char</code>版本都定义在同一个头文件中，如头文件<em>fstream</em>定义了<code>ifstream</code>和<code>wifstream</code>类型。</p><p>可以将派生类的对象当作其基类的对象使用。</p><h3 id="IO象无拷贝或赋值（No-Copy-or-Assign-for-IO-Objects）"><a href="#IO象无拷贝或赋值（No-Copy-or-Assign-for-IO-Objects）" class="headerlink" title="IO象无拷贝或赋值（No Copy or Assign for IO Objects）"></a>IO象无拷贝或赋值（No Copy or Assign for IO Objects）</h3><p>不能拷贝或对IO对象赋值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ofstream out1, out2;out1 &#x3D; out2;    &#x2F;&#x2F; error: cannot assign stream objectsofstream print(ofstream);   &#x2F;&#x2F; error: can&#39;t initialize the ofstream parameterout2 &#x3D; print(out2);     &#x2F;&#x2F; error: cannot copy stream objects<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于IO对象不能拷贝，因此不能将函数形参或返回类型定义为流类型。进行IO操作的函数通常以引用方式传递和返回流。读写一个IO对象会改变其状态，因此传递和返回的引用不能是<code>const</code>的。</p><h3 id="条件状态（Condition-States）"><a href="#条件状态（Condition-States）" class="headerlink" title="条件状态（Condition States）"></a>条件状态（Condition States）</h3><p>IO库条件状态：</p><p><img src="Images/8-2.png" alt="8-2"></p><p><code>badbit</code>表示系统级错误，如不可恢复的读写错误。通常情况下，一旦<code>badbit</code>被置位，流就无法继续使用了。在发生可恢复错误后，<code>failbit</code>会被置位，如期望读取数值却读出一个字符。如果到达文件结束位置，<code>eofbit</code>和<code>failbit</code>都会被置位。如果流未发生错误，则<code>goodbit</code>的值为0。如果<code>badbit</code>、<code>failbit</code>和<code>eofbit</code>任何一个被置位，检测流状态的条件都会失败。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (cin &gt;&gt; word)    &#x2F;&#x2F; ok: read operation successful...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>good</code>函数在所有错误均未置位时返回<code>true</code>。而<code>bad</code>、<code>fail</code>和<code>eof</code>函数在对应错误位被置位时返回<code>true</code>。此外，在<code>badbit</code>被置位时，<code>fail</code>函数也会返回<code>true</code>。因此应该使用<code>good</code>或<code>fail</code>函数确定流的总体状态，<code>eof</code>和<code>bad</code>只能检测特定错误。</p><p>流对象的<code>rdstate</code>成员返回一个<code>iostate</code>值，表示流的当前状态。<code>setstate</code>成员用于将指定条件置位（叠加原始流状态）。<code>clear</code>成员的无参版本清除所有错误标志；含参版本接受一个<code>iostate</code>值，用于设置流的新状态（覆盖原始流状态）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; remember the current state of cinauto old_state &#x3D; cin.rdstate();     &#x2F;&#x2F; remember the current state of cincin.clear();    &#x2F;&#x2F; make cin validprocess_input(cin);     &#x2F;&#x2F; use cincin.setstate(old_state);    &#x2F;&#x2F; now reset cin to its old state<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="管理输出缓冲（Managing-the-Output-Buffer）"><a href="#管理输出缓冲（Managing-the-Output-Buffer）" class="headerlink" title="管理输出缓冲（Managing the Output Buffer）"></a>管理输出缓冲（Managing the Output Buffer）</h3><p>每个输出流都管理一个缓冲区，用于保存程序读写的数据。导致缓冲刷新（即数据真正写入输出设备或文件）的原因有很多：</p><ul><li>程序正常结束。</li><li>缓冲区已满。</li><li>使用操纵符（如<code>endl</code>）显式刷新缓冲区。</li><li>在每个输出操作之后，可以用<code>unitbuf</code>操纵符设置流的内部状态，从而清空缓冲区。默认情况下，对<code>cerr</code>是设置<code>unitbuf</code>的，因此写到<code>cerr</code>的内容都是立即刷新的。</li><li>一个输出流可以被关联到另一个流。这种情况下，当读写被关联的流时，关联到的流的缓冲区会被刷新。默认情况下，<code>cin</code>和<code>cerr</code>都关联到<code>cout</code>，因此，读<code>cin</code>或写<code>cerr</code>都会刷新<code>cout</code>的缓冲区。</li></ul><p><code>flush</code>操纵符刷新缓冲区，但不输出任何额外字符。<code>ends</code>向缓冲区插入一个空字符，然后刷新缓冲区。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; &quot;hi!&quot; &lt;&lt; endl;   &#x2F;&#x2F; writes hi and a newline, then flushes the buffercout &lt;&lt; &quot;hi!&quot; &lt;&lt; flush;  &#x2F;&#x2F; writes hi, then flushes the buffer; adds no datacout &lt;&lt; &quot;hi!&quot; &lt;&lt; ends;   &#x2F;&#x2F; writes hi and a null, then flushes the buffer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果想在每次输出操作后都刷新缓冲区，可以使用<code>unitbuf</code>操纵符。它令流在接下来的每次写操作后都进行一次<code>flush</code>操作。而<code>nounitbuf</code>操纵符则使流恢复使用正常的缓冲区刷新机制。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">cout &lt;&lt; unitbuf;    &#x2F;&#x2F; all writes will be flushed immediately&#x2F;&#x2F; any output is flushed immediately, no bufferingcout &lt;&lt; nounitbuf;  &#x2F;&#x2F; returns to normal buffering<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果程序异常终止，输出缓冲区不会被刷新。</p><p>当一个输入流被关联到一个输出流时，任何试图从输入流读取数据的操作都会先刷新关联的输出流。标准库将<code>cout</code>和<code>cin</code>关联在一起，因此下面的语句会导致<code>cout</code>的缓冲区被刷新：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cin &gt;&gt; ival;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>交互式系统通常应该关联输入流和输出流。这意味着包括用户提示信息在内的所有输出，都会在读操作之前被打印出来。</p><p>使用<code>tie</code>函数可以关联两个流。它有两个重载版本：无参版本返回指向输出流的指针。如果本对象已关联到一个输出流，则返回的就是指向这个流的指针，否则返回空指针。<code>tie</code>的第二个版本接受一个指向<code>ostream</code>的指针，将本对象关联到此<code>ostream</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cin.tie(&amp;cout);     &#x2F;&#x2F; illustration only: the library ties cin and cout for us&#x2F;&#x2F; old_tie points to the stream (if any) currently tied to cinostream *old_tie &#x3D; cin.tie(nullptr); &#x2F;&#x2F; cin is no longer tied&#x2F;&#x2F; ties cin and cerr; not a good idea because cin should be tied to coutcin.tie(&amp;cerr);     &#x2F;&#x2F; reading cin flushes cerr, not coutcin.tie(old_tie);   &#x2F;&#x2F; reestablish normal tie between cin and cout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个流同时最多关联一个流，但多个流可以同时关联同一个<code>ostream</code>。向<code>tie</code>传递空指针可以解开流的关联。</p><h2 id="文件输入输出（File-Input-and-Output）"><a href="#文件输入输出（File-Input-and-Output）" class="headerlink" title="文件输入输出（File Input and Output）"></a>文件输入输出（File Input and Output）</h2><p>头文件<em>fstream</em>定义了三个类型来支持文件IO：<code>ifstream</code>从给定文件读取数据，<code>ofstream</code>向指定文件写入数据，<code>fstream</code>可以同时读写指定文件。</p><p><img src="Images/8-3.png" alt="8-3"></p><h3 id="使用文件流对象（Using-File-Stream-Objects）"><a href="#使用文件流对象（Using-File-Stream-Objects）" class="headerlink" title="使用文件流对象（Using File Stream Objects）"></a>使用文件流对象（Using File Stream Objects）</h3><p>每个文件流类型都定义了<code>open</code>函数，它完成一些系统操作，定位指定文件，并视情况打开为读或写模式。</p><p>创建文件流对象时，如果提供了文件名（可选），<code>open</code>会被自动调用。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ifstream in(ifile);   &#x2F;&#x2F; construct an ifstream and open the given fileofstream out;   &#x2F;&#x2F; output file stream that is not associated with any file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在C++11中，文件流对象的文件名可以是<code>string</code>对象或C风格字符数组。旧版本的标准库只支持C风格字符数组。</p><p>在要求使用基类对象的地方，可以用继承类型的对象代替。因此一个接受<code>iostream</code>类型引用或指针参数的函数，可以用对应的<code>fstream</code>类型来调用。</p><p>可以先定义空文件流对象，再调用<code>open</code>函数将其与指定文件关联。如果<code>open</code>调用失败，<code>failbit</code>会被置位。</p><p>对一个已经打开的文件流调用<code>open</code>会失败，并导致<code>failbit</code>被置位。随后试图使用文件流的操作都会失败。如果想将文件流关联到另一个文件，必须先调用<code>close</code>关闭当前文件，再调用<code>clear</code>重置流的条件状态（<code>close</code>不会重置流的条件状态）。</p><p>当<code>fstream</code>对象被销毁时，<code>close</code>会自动被调用。</p><h3 id="文件模式（File-Modes）"><a href="#文件模式（File-Modes）" class="headerlink" title="文件模式（File Modes）"></a>文件模式（File Modes）</h3><p>每个流都有一个关联的文件模式，用来指出如何使用文件。</p><p><img src="Images/8-4.png" alt="8-4"></p><ul><li>只能对<code>ofstream</code>或<code>fstream</code>对象设定<code>out</code>模式。</li><li>只能对<code>ifstream</code>或<code>fstream</code>对象设定<code>in</code>模式。</li><li>只有当<code>out</code>被设定时才能设定<code>trunc</code>模式。</li><li>只要<code>trunc</code>没被设定，就能设定<code>app</code>模式。在<code>app</code>模式下，即使没有设定<code>out</code>模式，文件也是以输出方式打开。</li><li>默认情况下，即使没有设定<code>trunc</code>，以<code>out</code>模式打开的文件也会被截断。如果想保留以<code>out</code>模式打开的文件内容，就必须同时设定<code>app</code>模式，这会将数据追加写到文件末尾；或者同时设定<code>in</code>模式，即同时进行读写操作。</li><li><code>ate</code>和<code>binary</code>模式可用于任何类型的文件流对象，并可以和其他任何模式组合使用。</li><li>与<code>ifstream</code>对象关联的文件默认以<code>in</code>模式打开，与<code>ofstream</code>对象关联的文件默认以<code>out</code>模式打开，与<code>fstream</code>对象关联的文件默认以<code>in</code>和<code>out</code>模式打开。</li></ul><p>默认情况下，打开<code>ofstream</code>对象时，文件内容会被丢弃，阻止文件清空的方法是同时指定<code>app</code>或<code>in</code>模式。</p><p>流对象每次打开文件时都可以改变其文件模式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ofstream out;   &#x2F;&#x2F; no file mode is setout.open(&quot;scratchpad&quot;);    &#x2F;&#x2F; mode implicitly out and truncout.close();    &#x2F;&#x2F; close out so we can use it for a different fileout.open(&quot;precious&quot;, ofstream::app);   &#x2F;&#x2F; mode is out and appout.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string流（string-Streams）"><a href="#string流（string-Streams）" class="headerlink" title="string流（string Streams）"></a>string流（string Streams）</h2><p>头文件<em>sstream</em>定义了三个类型来支持内存IO：<code>istringstream</code>从<code>string</code>读取数据，<code>ostringstream</code>向<code>string</code>写入数据，<code>stringstream</code>可以同时读写<code>string</code>的数据。</p><p><img src="Images/8-5.png" alt="8-5"></p><h3 id="使用istringstream（Using-an-istringstream）"><a href="#使用istringstream（Using-an-istringstream）" class="headerlink" title="使用istringstream（Using an istringstream）"></a>使用istringstream（Using an istringstream）</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; members are public by defaultstruct PersonInfo&#123;    string name;    vector&lt;string&gt; phones;&#125;;string line, word;   &#x2F;&#x2F; will hold a line and word from input, respectivelyvector&lt;PersonInfo&gt; people;    &#x2F;&#x2F; will hold all the records from the input&#x2F;&#x2F; read the input a line at a time until cin hits end-of-file (or another error)while (getline(cin, line))&#123;    PersonInfo info;    &#x2F;&#x2F; create an object to hold this record&#39;s data    istringstream record(line);    &#x2F;&#x2F; bind record to the line we just read    record &gt;&gt; info.name;    &#x2F;&#x2F; read the name    while (record &gt;&gt; word)  &#x2F;&#x2F; read the phone numbers        info.phones.push_back(word);   &#x2F;&#x2F; and store them    people.push_back(info);    &#x2F;&#x2F; append this record to people&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用ostringstream（Using-ostringstreams）"><a href="#使用ostringstream（Using-ostringstreams）" class="headerlink" title="使用ostringstream（Using ostringstreams）"></a>使用ostringstream（Using ostringstreams）</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">for (const auto &amp;entry : people)&#123; &#x2F;&#x2F; for each entry in people    ostringstream formatted, badNums;   &#x2F;&#x2F; objects created on each loop    for (const auto &amp;nums : entry.phones)    &#123; &#x2F;&#x2F; for each number        if (!valid(nums))        &#123;            badNums &lt;&lt; &quot; &quot; &lt;&lt; nums;  &#x2F;&#x2F; string in badNums        &#125;        else            &#x2F;&#x2F; &#39;&#39;writes&#39;&#39; to formatted&#39;s string            formatted &lt;&lt; &quot; &quot; &lt;&lt; format(nums);    &#125;    if (badNums.str().empty())   &#x2F;&#x2F; there were no bad numbers        os &lt;&lt; entry.name &lt;&lt; &quot; &quot;  &#x2F;&#x2F; print the name            &lt;&lt; formatted.str() &lt;&lt; endl;   &#x2F;&#x2F; and reformatted numbers    else  &#x2F;&#x2F; otherwise, print the name and bad numbers        cerr &lt;&lt; &quot;input error: &quot; &lt;&lt; entry.name            &lt;&lt; &quot; invalid number(s) &quot; &lt;&lt; badNums.str() &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-7-classes/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-7-classes/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第7章-类"><a href="#第7章-类" class="headerlink" title="第7章 类"></a>第7章 类</h1><p>类的基本思想是数据抽象（data abstraction）和封装（encapsulation）。数据抽象是一种依赖于接口（interface）和实现（implementation）分离的编程及设计技术。类的接口包括用户所能执行的操作；类的实现包括类的数据成员、负责接口实现的函数体以及其他私有函数。</p><h2 id="定义抽象数据类型（Defining-Abstract-Data-Types）"><a href="#定义抽象数据类型（Defining-Abstract-Data-Types）" class="headerlink" title="定义抽象数据类型（Defining Abstract Data Types）"></a>定义抽象数据类型（Defining Abstract Data Types）</h2><h3 id="设计Sales-data类（Designing-the-Sales-data-Class）"><a href="#设计Sales-data类（Designing-the-Sales-data-Class）" class="headerlink" title="设计Sales_data类（Designing the Sales_data Class）"></a>设计Sales_data类（Designing the Sales_data Class）</h3><p>类的用户是程序员，而非应用程序的最终使用者。</p><h3 id="定义改进的Sales-data类（Defining-the-Revised-Sales-data-Class）"><a href="#定义改进的Sales-data类（Defining-the-Revised-Sales-data-Class）" class="headerlink" title="定义改进的Sales_data类（Defining the Revised Sales_data Class）"></a>定义改进的Sales_data类（Defining the Revised Sales_data Class）</h3><p>成员函数（member function）的声明必须在类的内部，定义则既可以在类的内部也可以在类的外部。定义在类内部的函数是隐式的内联函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Sales_data&#123;    &#x2F;&#x2F; new members: operations on Sales_data objects    std::string isbn() const &#123; return bookNo; &#125;    Sales_data&amp; combine(const Sales_data&amp;);    double avg_price() const;        &#x2F;&#x2F; data members    std::string bookNo;    unsigned units_sold &#x3D; 0;    double revenue &#x3D; 0.0;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成员函数通过一个名为<code>this</code>的隐式额外参数来访问调用它的对象。<code>this</code>参数是一个常量指针，被初始化为调用该函数的对象地址。在函数体内可以显式使用<code>this</code>指针。 </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">total.isbn()&#x2F;&#x2F; pseudo-code illustration of how a call to a member function is translatedSales_data::isbn(&amp;total)std::string isbn() const &#123; return this-&gt;bookNo; &#125;std::string isbn() const &#123; return bookNo; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，<code>this</code>的类型是指向类类型非常量版本的常量指针。<code>this</code>也遵循初始化规则，所以默认不能把<code>this</code>绑定到一个常量对象上，即不能在常量对象上调用普通的成员函数。</p><p>C++允许在成员函数的参数列表后面添加关键字<code>const</code>，表示<code>this</code>是一个指向常量的指针。使用关键字<code>const</code>的成员函数被称作常量成员函数（const member function）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; pseudo-code illustration of how the implicit this pointer is used&#x2F;&#x2F; this code is illegal: we may not explicitly define the this pointer ourselves&#x2F;&#x2F; note that this is a pointer to const because isbn is a const memberstd::string Sales_data::isbn(const Sales_data *const this)&#123;     return this-&gt;isbn;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量对象和指向常量对象的引用或指针都只能调用常量成员函数。</p><p>类本身就是一个作用域，成员函数的定义嵌套在类的作用域之内。编译器处理类时，会先编译成员声明，再编译成员函数体（如果有的话），因此成员函数可以随意使用类的其他成员而无须在意这些成员的出现顺序。</p><p>在类的外部定义成员函数时，成员函数的定义必须与它的声明相匹配。如果成员函数被声明为常量成员函数，那么它的定义也必须在参数列表后面指定<code>const</code>属性。同时，类外部定义的成员名字必须包含它所属的类名。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double Sales_data::avg_price() const &#123;    if (units_sold)        return revenue &#x2F; units_sold;    else        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以定义返回<code>this</code>对象的成员函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Sales_data&amp; Sales_data::combine(const Sales_data &amp;rhs)&#123;    units_sold +&#x3D; rhs.units_sold;   &#x2F;&#x2F; add the members of rhs into    revenue +&#x3D; rhs.revenue;     &#x2F;&#x2F; the members of &#39;this&#39; object    return *this;       &#x2F;&#x2F; return the object on which the function was called&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义类相关的非成员函数（Defining-Nonmember-Class-Related-Functions）"><a href="#定义类相关的非成员函数（Defining-Nonmember-Class-Related-Functions）" class="headerlink" title="定义类相关的非成员函数（Defining Nonmember Class-Related Functions）"></a>定义类相关的非成员函数（Defining Nonmember Class-Related Functions）</h3><p>类的作者通常会定义一些辅助函数，尽管这些函数从概念上来说属于类接口的组成部分，但实际上它们并不属于类本身。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; input transactions contain ISBN, number of copies sold, and sales priceistream &amp;read(istream &amp;is, Sales_data &amp;item)&#123;    double price &#x3D; 0;    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;    item.revenue &#x3D; price * item.units_sold;    return is;&#125;ostream &amp;print(ostream &amp;os, const Sales_data &amp;item)&#123;    os &lt;&lt; item.isbn() &lt;&lt; &quot; &quot; &lt;&lt; item.units_sold &lt;&lt; &quot; &quot;        &lt;&lt; item.revenue &lt;&lt; &quot; &quot; &lt;&lt; item.avg_price();    return os;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果非成员函数是类接口的组成部分，则这些函数的声明应该与类放在同一个头文件中。</p><p>一般来说，执行输出任务的函数应该尽量减少对格式的控制。</p><h3 id="构造函数（Constructors）"><a href="#构造函数（Constructors）" class="headerlink" title="构造函数（Constructors）"></a>构造函数（Constructors）</h3><p>类通过一个或几个特殊的成员函数来控制其对象的初始化操作，这些函数被称作构造函数。只要类的对象被创建，就会执行构造函数。</p><p>构造函数的名字和类名相同，没有返回类型，且不能被声明为<code>const</code>函数。构造函数在<code>const</code>对象的构造过程中可以向其写值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Sales_data &#123;    &#x2F;&#x2F; constructors added    Sales_data() &#x3D; default;    Sales_data(const std::string &amp;s): bookNo(s) &#123; &#125;    Sales_data(const std::string &amp;s, unsigned n, double p):        bookNo(s), units_sold(n), revenue(p*n) &#123; &#125;    Sales_data(std::istream &amp;);    &#x2F;&#x2F; other members as before&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类通过默认构造函数（default constructor）来控制默认初始化过程，默认构造函数无须任何实参。</p><p>如果类没有显式地定义构造函数，则编译器会为类隐式地定义一个默认构造函数，该构造函数也被称为合成的默认构造函数（synthesized default constructor）。对于大多数类来说，合成的默认构造函数初始化数据成员的规则如下：</p><ul><li>如果存在类内初始值，则用它来初始化成员。</li><li>否则默认初始化该成员。</li></ul><p>某些类不能依赖于合成的默认构造函数。</p><ul><li>只有当类没有声明任何构造函数时，编译器才会自动生成默认构造函数。一旦类定义了其他构造函数，那么除非再显式地定义一个默认的构造函数，否则类将没有默认构造函数。</li><li>如果类包含内置类型或者复合类型的成员，则只有当这些成员全部存在类内初始值时，这个类才适合使用合成的默认构造函数。否则用户在创建类的对象时就可能得到未定义的值。</li><li>编译器不能为某些类合成默认构造函数。例如类中包含一个其他类类型的成员，且该类型没有默认构造函数，那么编译器将无法初始化该成员。</li></ul><p>在C++11中，如果类需要默认的函数行为，可以通过在参数列表后面添加<code>=default</code>来要求编译器生成构造函数。其中<code>=default</code>既可以和函数声明一起出现在类的内部，也可以作为定义出现在类的外部。和其他函数一样，如果<code>=default</code>在类的内部，则默认构造函数是内联的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Sales_data() &#x3D; default;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造函数初始值列表（constructor initializer list）负责为新创建对象的一个或几个数据成员赋初始值。形式是每个成员名字后面紧跟括号括起来的（或者在花括号内的）成员初始值，不同成员的初始值通过逗号分隔。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Sales_data(const std::string &amp;s): bookNo(s) &#123; &#125;Sales_data(const std::string &amp;s, unsigned n, double p):    bookNo(s), units_sold(n), revenue(p*n) &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当某个数据成员被构造函数初始值列表忽略时，它会以与合成默认构造函数相同的方式隐式初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; has the same behavior as the original constructor defined aboveSales_data(const std::string &amp;s):    bookNo(s), units_sold(0), revenue(0) &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>构造函数不应该轻易覆盖掉类内初始值，除非新值与原值不同。如果编译器不支持类内初始值，则所有构造函数都应该显式初始化每个内置类型的成员。 </p><h3 id="拷贝、赋值和析构（Copy、Assignment，and-Destruction）"><a href="#拷贝、赋值和析构（Copy、Assignment，and-Destruction）" class="headerlink" title="拷贝、赋值和析构（Copy、Assignment，and Destruction）"></a>拷贝、赋值和析构（Copy、Assignment，and Destruction）</h3><p>编译器能合成拷贝、赋值和析构函数，但是对于某些类来说合成的版本无法正常工作。特别是当类需要分配类对象之外的资源时，合成的版本通常会失效。</p><h2 id="访问控制与封装（Access-Control-and-Encapsulation）"><a href="#访问控制与封装（Access-Control-and-Encapsulation）" class="headerlink" title="访问控制与封装（Access Control and Encapsulation）"></a>访问控制与封装（Access Control and Encapsulation）</h2><p>使用访问说明符（access specifier）可以加强类的封装性：</p><ul><li>定义在<code>public</code>说明符之后的成员在整个程序内都可以被访问。<code>public</code>成员定义类的接口。</li><li>定义在<code>private</code>说明符之后的成员可以被类的成员函数访问，但是不能被使用该类的代码访问。<code>private</code>部分封装了类的实现细节。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Sales_data &#123;public: &#x2F;&#x2F; access specifier added    Sales_data() &#x3D; default;    Sales_data(const std::string &amp;s, unsigned n, double p):    bookNo(s), units_sold(n), revenue(p*n) &#123; &#125;    Sales_data(const std::string &amp;s): bookNo(s) &#123; &#125;    Sales_data(std::istream&amp;);    std::string isbn() const &#123; return bookNo; &#125;    Sales_data &amp;combine(const Sales_data&amp;);    private: &#x2F;&#x2F; access specifier added    double avg_price() const &#123; return units_sold ? revenue&#x2F;units_sold : 0; &#125;       std::string bookNo;    unsigned units_sold &#x3D; 0;    double revenue &#x3D; 0.0;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类可以包含零或多个访问说明符，每个访问说明符指定了接下来的成员的访问级别，其有效范围到出现下一个访问说明符或类的结尾处为止。</p><p>使用关键字<code>struct</code>定义类时，定义在第一个访问说明符之前的成员是<code>public</code>的；而使用关键字<code>class</code>时，这些成员是<code>private</code>的。二者唯一的区别就是默认访问权限不同。</p><h3 id="友元（Friends）"><a href="#友元（Friends）" class="headerlink" title="友元（Friends）"></a>友元（Friends）</h3><p>类可以允许其他类或函数访问它的非公有成员，方法是使用关键字<code>friend</code>将其他类或函数声明为它的友元。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Sales_data &#123;    &#x2F;&#x2F; friend declarations for nonmember Sales_data operations added    friend Sales_data add(const Sales_data&amp;, const Sales_data&amp;);    friend std::istream &amp;read(std::istream&amp;, Sales_data&amp;);    friend std::ostream &amp;print(std::ostream&amp;, const Sales_data&amp;);        &#x2F;&#x2F; other members and access specifiers as beforepublic:    Sales_data() &#x3D; default;    Sales_data(const std::string &amp;s, unsigned n, double p):    bookNo(s), units_sold(n), revenue(p*n) &#123; &#125;    Sales_data(const std::string &amp;s): bookNo(s) &#123; &#125;    Sales_data(std::istream&amp;);    std::string isbn() const &#123; return bookNo; &#125;    Sales_data &amp;combine(const Sales_data&amp;);    private:    std::string bookNo;    unsigned units_sold &#x3D; 0;    double revenue &#x3D; 0.0;&#125;;&#x2F;&#x2F; declarations for nonmember parts of the Sales_data interfaceSales_data add(const Sales_data&amp;, const Sales_data&amp;);std::istream &amp;read(std::istream&amp;, Sales_data&amp;);std::ostream &amp;print(std::ostream&amp;, const Sales_data&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>友元声明只能出现在类定义的内部，具体位置不限。友元不是类的成员，也不受它所在区域访问级别的约束。</p><p>通常情况下，最好在类定义开始或结束前的位置集中声明友元。</p><p>封装的好处：</p><ul><li>确保用户代码不会无意间破坏封装对象的状态。</li><li>被封装的类的具体实现细节可以随时改变，而无须调整用户级别的代码。</li></ul><p>友元声明仅仅指定了访问权限，而并非一个通常意义上的函数声明。如果希望类的用户能调用某个友元函数，就必须在友元声明之外再专门对函数进行一次声明（部分编译器没有该限制）。</p><p>为了使友元对类的用户可见，通常会把友元的声明（类的外部）与类本身放在同一个头文件中。</p><h2 id="类的其他特性（Additional-Class-Features）"><a href="#类的其他特性（Additional-Class-Features）" class="headerlink" title="类的其他特性（Additional Class Features）"></a>类的其他特性（Additional Class Features）</h2><h3 id="类成员再探（Class-Members-Revisited）"><a href="#类成员再探（Class-Members-Revisited）" class="headerlink" title="类成员再探（Class Members Revisited）"></a>类成员再探（Class Members Revisited）</h3><p>由类定义的类型名字和其他成员一样存在访问限制，可以是<code>public</code>或<code>private</code>中的一种。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen &#123;public:    &#x2F;&#x2F; alternative way to declare a type member using a type alias    using pos &#x3D; std::string::size_type;    &#x2F;&#x2F; other members as before&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与普通成员不同，用来定义类型的成员必须先定义后使用。类型成员通常位于类起始处。</p><p>定义在类内部的成员函数是自动内联的。</p><p>如果需要显式声明内联成员函数，建议只在类外部定义的位置说明<code>inline</code>。</p><p><code>inline</code>成员函数该与类定义在同一个头文件中。</p><p>使用关键字<code>mutable</code>可以声明可变数据成员（mutable data member）。可变数据成员永远不会是<code>const</code>的，即使它在<code>const</code>对象内。因此<code>const</code>成员函数可以修改可变成员的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen &#123;public:    void some_member() const;private:    mutable size_t access_ctr;  &#x2F;&#x2F; may change even in a const object    &#x2F;&#x2F; other members as before&#125;;void Screen::some_member() const&#123;    ++access_ctr;   &#x2F;&#x2F; keep a count of the calls to any member function    &#x2F;&#x2F; whatever other work this member needs to do&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供类内初始值时，必须使用<code>=</code>或花括号形式。</p><h3 id="返回-this的成员函数（Functions-That-Return-this）"><a href="#返回-this的成员函数（Functions-That-Return-this）" class="headerlink" title="返回*this的成员函数（Functions That Return *this）"></a>返回*this的成员函数（Functions That Return *this）</h3><p><code>const</code>成员函数如果以引用形式返回<code>*this</code>，则返回类型是常量引用。</p><p>通过区分成员函数是否为<code>const</code>的，可以对其进行重载。在常量对象上只能调用<code>const</code>版本的函数；在非常量对象上，尽管两个版本都能调用，但会选择非常量版本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen &#123;public:    &#x2F;&#x2F; display overloaded on whether the object is const or not    Screen &amp;display(std::ostream &amp;os)    &#123; do_display(os); return *this; &#125;    const Screen &amp;display(std::ostream &amp;os) const    &#123; do_display(os); return *this; &#125;    private:    &#x2F;&#x2F; function to do the work of displaying a Screen    void do_display(std::ostream &amp;os) const    &#123; os &lt;&lt; contents; &#125;    &#x2F;&#x2F; other members as before&#125;;Screen myScreen(5,3);const Screen blank(5, 3);myScreen.set(&#39;#&#39;).display(cout);    &#x2F;&#x2F; calls non const versionblank.display(cout);    &#x2F;&#x2F; calls const version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类类型（Class-Types）"><a href="#类类型（Class-Types）" class="headerlink" title="类类型（Class Types）"></a>类类型（Class Types）</h3><p>每个类定义了唯一的类型。即使两个类的成员列表完全一致，它们也是不同的类型。</p><p>可以仅仅声明一个类而暂时不定义它。这种声明被称作前向声明（forward declaration），用于引入类的名字。在类声明之后定义之前都是一个不完全类型（incomplete type）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen;   &#x2F;&#x2F; declaration of the Screen class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以定义指向不完全类型的指针或引用，也可以声明（不能定义）以不完全类型作为参数或返回类型的函数。</p><p>只有当类全部完成后才算被定义，所以一个类的成员类型不能是该类本身。但是一旦类的名字出现，就可以被认为是声明过了，因此类可以包含指向它自身类型的引用或指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Link_screen&#123;    Screen window;    Link_screen *next;    Link_screen *prev;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="友元再探（Friendship-Revisited）"><a href="#友元再探（Friendship-Revisited）" class="headerlink" title="友元再探（Friendship Revisited）"></a>友元再探（Friendship Revisited）</h3><p>除了普通函数，类还可以把其他类或其他类的成员函数声明为友元。友元类的成员函数可以访问此类包括非公有成员在内的所有成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen &#123;    &#x2F;&#x2F; Window_mgr members can access the private parts of class Screen    friend class Window_mgr;    &#x2F;&#x2F; ... rest of the Screen class&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>友元函数可以直接定义在类的内部，这种函数是隐式内联的。但是必须在类外部提供相应声明令函数可见。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct X&#123;    friend void f() &#123; &#x2F;* friend function can be defined in the class body *&#x2F; &#125;    X() &#123; f(); &#125;   &#x2F;&#x2F; error: no declaration for f    void g();    void h();&#125;;void X::g() &#123; return f(); &#125;     &#x2F;&#x2F; error: f hasn&#39;t been declaredvoid f();   &#x2F;&#x2F; declares the function defined inside Xvoid X::h() &#123; return f(); &#125;     &#x2F;&#x2F; ok: declaration for f is now in scope<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>友元关系不存在传递性。</p><p>把其他类的成员函数声明为友元时，必须明确指定该函数所属的类名。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen&#123;    &#x2F;&#x2F; Window_mgr::clear must have been declared before class Screen    friend void Window_mgr::clear(ScreenIndex);    &#x2F;&#x2F; ... rest of the Screen class&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果类想把一组重载函数声明为友元，需要对这组函数中的每一个分别声明。</p><h2 id="类的作用域（Class-Scope）"><a href="#类的作用域（Class-Scope）" class="headerlink" title="类的作用域（Class Scope）"></a>类的作用域（Class Scope）</h2><p>当成员函数定义在类外时，返回类型中使用的名字位于类的作用域之外，此时返回类型必须指明它是哪个类的成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Window_mgr&#123;public:    &#x2F;&#x2F; add a Screen to the window and returns its index    ScreenIndex addScreen(const Screen&amp;);    &#x2F;&#x2F; other members as before&#125;;&#x2F;&#x2F; return type is seen before we&#39;re in the scope of Window_mgrWindow_mgr::ScreenIndex Window_mgr::addScreen(const Screen &amp;s)&#123;    screens.push_back(s);    return screens.size() - 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="名字查找与作用域（Name-Lookup-and-Class-Scope）"><a href="#名字查找与作用域（Name-Lookup-and-Class-Scope）" class="headerlink" title="名字查找与作用域（Name Lookup and Class Scope）"></a>名字查找与作用域（Name Lookup and Class Scope）</h3><p>成员函数体直到整个类可见后才会被处理，因此它能使用类中定义的任何名字。</p><p>声明中使用的名字，包括返回类型或参数列表，都必须确保使用前可见。</p><p>如果类的成员使用了外层作用域的某个名字，而该名字表示一种类型，则类不能在之后重新定义该名字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef double Money;class Account&#123;public:    Money balance() &#123; return bal; &#125; &#x2F;&#x2F; uses Money from the outer scopprivate:    typedef double Money; &#x2F;&#x2F; error: cannot redefine Money    Money bal;    &#x2F;&#x2F; ...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型名定义通常出现在类起始处，这样能确保所有使用该类型的成员都位于类型名定义之后。</p><p>成员函数中名字的解析顺序：</p><ul><li>在成员函数内查找该名字的声明，只有在函数使用之前出现的声明才会被考虑。</li><li>如果在成员函数内没有找到，则会在类内继续查找，这时会考虑类的所有成员。</li><li>如果类内也没有找到，会在成员函数定义之前的作用域查找。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; it is generally a bad idea to use the same name for a parameter and a memberint height;   &#x2F;&#x2F; defines a name subsequently used inside Screenclass Screen&#123;public:    typedef std::string::size_type pos;    void dummy_fcn(pos height)    &#123;        cursor &#x3D; width * height;  &#x2F;&#x2F; which height? the parameter    &#125;private:    pos cursor &#x3D; 0;    pos height &#x3D; 0, width &#x3D; 0;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过作用域运算符<code>::</code>或显式<code>this</code>指针来强制访问被隐藏的类成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; bad practice: names local to member functions shouldn&#39;t hide member namesvoid Screen::dummy_fcn(pos height)&#123;    cursor &#x3D; width * this-&gt;height;  &#x2F;&#x2F; member height    &#x2F;&#x2F; alternative way to indicate the member    cursor &#x3D; width * Screen::height;  &#x2F;&#x2F; member height&#125;&#x2F;&#x2F; good practice: don&#39;t use a member name for a parameter or other local variablevoid Screen::dummy_fcn(pos ht)&#123;    cursor &#x3D; width * height;  &#x2F;&#x2F; member height&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造函数再探（Constructors-Revisited）"><a href="#构造函数再探（Constructors-Revisited）" class="headerlink" title="构造函数再探（Constructors Revisited）"></a>构造函数再探（Constructors Revisited）</h2><h3 id="构造函数初始值列表（Constructor-Initializer-List）"><a href="#构造函数初始值列表（Constructor-Initializer-List）" class="headerlink" title="构造函数初始值列表（Constructor Initializer List）"></a>构造函数初始值列表（Constructor Initializer List）</h3><p>如果没有在构造函数初始值列表中显式初始化成员，该成员会在构造函数体之前执行默认初始化。</p><p>如果成员是<code>const</code>、引用，或者是某种未定义默认构造函数的类类型，必须在初始值列表中将其初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class ConstRef&#123;public:    ConstRef(int ii);private:    int i;    const int ci;    int &amp;ri;&#125;;&#x2F;&#x2F; ok: explicitly initialize reference and const membersConstRef::ConstRef(int ii): i(ii), ci(ii), ri(i) &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最好令构造函数初始值的顺序与成员声明的顺序一致，并且尽量避免使用某些成员初始化其他成员。</p><p>如果一个构造函数为所有参数都提供了默认实参，则它实际上也定义了默认构造函数。</p><h3 id="委托构造函数（Delegating-Constructors）"><a href="#委托构造函数（Delegating-Constructors）" class="headerlink" title="委托构造函数（Delegating Constructors）"></a>委托构造函数（Delegating Constructors）</h3><p>C++11扩展了构造函数初始值功能，可以定义委托构造函数。委托构造函数使用它所属类的其他构造函数执行它自己的初始化过程。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Sales_data&#123;public:    &#x2F;&#x2F; defines the default constructor as well as one that takes a string argument    Sales_data(std::string s &#x3D; &quot;&quot;): bookNo(s) &#123; &#125;    &#x2F;&#x2F; remaining constructors unchanged    Sales_data(std::string s, unsigned cnt, double rev):        bookNo(s), units_sold(cnt), revenue(rev*cnt) &#123; &#125;    Sales_data(std::istream &amp;is) &#123; read(is, *this); &#125;    &#x2F;&#x2F; remaining members as before&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认构造函数的作用（The-Role-of-the-Default-Constructor）"><a href="#默认构造函数的作用（The-Role-of-the-Default-Constructor）" class="headerlink" title="默认构造函数的作用（The Role of the Default Constructor）"></a>默认构造函数的作用（The Role of the Default Constructor）</h3><p>当对象被默认初始化或值初始化时会自动执行默认构造函数。</p><p>默认初始化的发生情况：</p><ul><li>在块作用域内不使用初始值定义非静态变量或数组。</li><li>类本身含有类类型的成员且使用合成默认构造函数。</li><li>类类型的成员没有在构造函数初始值列表中显式初始化。</li></ul><p>值初始化的发生情况：</p><ul><li>数组初始化时提供的初始值数量少于数组大小。</li><li>不使用初始值定义局部静态变量。</li><li>通过<code>T()</code>形式（<em>T</em>为类型）的表达式显式地请求值初始化。</li></ul><p>类必须包含一个默认构造函数。</p><p>如果想定义一个使用默认构造函数进行初始化的对象，应该去掉对象名后的空括号对。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Sales_data obj();   &#x2F;&#x2F; oops! declares a function, not an objectSales_data obj2;    &#x2F;&#x2F; ok: obj2 is an object, not a function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="隐式的类类型转换（Implicit-Class-Type-Conversions）"><a href="#隐式的类类型转换（Implicit-Class-Type-Conversions）" class="headerlink" title="隐式的类类型转换（Implicit Class-Type Conversions）"></a>隐式的类类型转换（Implicit Class-Type Conversions）</h3><p>如果构造函数只接受一个实参，则它实际上定义了转换为此类类型的隐式转换机制。这种构造函数被称为转换构造函数（converting constructor）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string null_book &#x3D; &quot;9-999-99999-9&quot;;&#x2F;&#x2F; constructs a temporary Sales_data object&#x2F;&#x2F; with units_sold and revenue equal to 0 and bookNo equal to null_bookitem.combine(null_book);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译器只会自动执行一步类型转换。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; error: requires two user-defined conversions:&#x2F;&#x2F;   (1) convert &quot;9-999-99999-9&quot; to string&#x2F;&#x2F;   (2) convert that (temporary) string to Sales_dataitem.combine(&quot;9-999-99999-9&quot;);&#x2F;&#x2F; ok: explicit conversion to string, implicit conversion to Sales_dataitem.combine(string(&quot;9-999-99999-9&quot;));&#x2F;&#x2F; ok: implicit conversion to string, explicit conversion to Sales_dataitem.combine(Sales_data(&quot;9-999-99999-9&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在要求隐式转换的程序上下文中，可以通过将构造函数声明为<code>explicit</code>的加以阻止。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Sales_data&#123;public:    Sales_data() &#x3D; default;    Sales_data(const std::string &amp;s, unsigned n, double p):        bookNo(s), units_sold(n), revenue(p*n) &#123; &#125;    explicit Sales_data(const std::string &amp;s): bookNo(s) &#123; &#125;    explicit Sales_data(std::istream&amp;);    &#x2F;&#x2F; remaining members as before&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>explicit</code>关键字只对接受一个实参的构造函数有效。</p><p>只能在类内声明构造函数时使用<code>explicit</code>关键字，在类外定义时不能重复。</p><p>执行拷贝初始化时（使用<code>=</code>）会发生隐式转换，所以<code>explicit</code>构造函数只能用于直接初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Sales_data item1 (null_book);   &#x2F;&#x2F; ok: direct initialization&#x2F;&#x2F; error: cannot use the copy form of initialization with an explicit constructorSales_data item2 &#x3D; null_book;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以使用<code>explicit</code>构造函数显式地强制转换类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ok: the argument is an explicitly constructed Sales_data objectitem.combine(Sales_data(null_book));&#x2F;&#x2F; ok: static_cast can use an explicit constructoritem.combine(static_cast&lt;Sales_data&gt;(cin));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合类（Aggregate-Classes）"><a href="#聚合类（Aggregate-Classes）" class="headerlink" title="聚合类（Aggregate Classes）"></a>聚合类（Aggregate Classes）</h3><p>聚合类满足如下条件：</p><ul><li>所有成员都是<code>public</code>的。</li><li>没有定义任何构造函数。</li><li>没有类内初始值。</li><li>没有基类。</li><li>没有虚函数。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Data&#123;    int ival;    string s;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用一个用花括号包围的成员初始值列表初始化聚合类的数据成员。初始值顺序必须与声明顺序一致。如果初始值列表中的元素个数少于类的成员个数，则靠后的成员被值初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; val1.ival &#x3D; 0; val1.s &#x3D; string(&quot;Anna&quot;)Data val1 &#x3D; &#123; 0, &quot;Anna&quot; &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="字面值常量类（Literal-Classes）"><a href="#字面值常量类（Literal-Classes）" class="headerlink" title="字面值常量类（Literal Classes）"></a>字面值常量类（Literal Classes）</h3><p>数据成员都是字面值类型的聚合类是字面值常量类。或者一个类不是聚合类，但符合下列条件，则也是字面值常量类：</p><ul><li>数据成员都是字面值类型。</li><li>类至少含有一个<code>constexpr</code>构造函数。</li><li>如果数据成员含有类内初始值，则内置类型成员的初始值必须是常量表达式。如果成员属于类类型，则初始值必须使用成员自己的<code>constexpr</code>构造函数。</li><li>类必须使用析构函数的默认定义。</li></ul><p><code>constexpr</code>构造函数用于生成<code>constexpr</code>对象以及<code>constexpr</code>函数的参数或返回类型。</p><p><code>constexpr</code>构造函数必须初始化所有数据成员，初始值使用<code>constexpr</code>构造函数或常量表达式。</p><h2 id="类的静态成员（static-Class-Members）"><a href="#类的静态成员（static-Class-Members）" class="headerlink" title="类的静态成员（static Class Members）"></a>类的静态成员（static Class Members）</h2><p>使用关键字<code>static</code>可以声明类的静态成员。静态成员存在于任何对象之外，对象中不包含与静态成员相关的数据。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Account&#123;public:    void calculate() &#123; amount +&#x3D; amount * interestRate; &#125;    static double rate() &#123; return interestRate; &#125;    static void rate(double);private:    std::string owner;    double amount;    static double interestRate;    static double initRate();&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于静态成员不与任何对象绑定，因此静态成员函数不能声明为<code>const</code>的，也不能在静态成员函数内使用<code>this</code>指针。</p><p>用户代码可以使用作用域运算符访问静态成员，也可以通过类对象、引用或指针访问。类的成员函数可以直接访问静态成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double r;r &#x3D; Account::rate(); &#x2F;&#x2F; access a static member using the scope operatorAccount ac1;Account *ac2 &#x3D; &amp;ac1;&#x2F;&#x2F; equivalent ways to call the static member rate functionr &#x3D; ac1.rate(); &#x2F;&#x2F; through an Account object or referencer &#x3D; ac2-&gt;rate(); &#x2F;&#x2F; through a pointer to an Account objectclass Account&#123;public:    void calculate() &#123; amount +&#x3D; amount * interestRate; &#125;private:    static double interestRate;    &#x2F;&#x2F; remaining members as before&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在类外部定义静态成员时，不能重复<code>static</code>关键字，其只能用于类内部的声明语句。</p><p>由于静态数据成员不属于类的任何一个对象，因此它们并不是在创建类对象时被定义的。通常情况下，不应该在类内部初始化静态成员。而必须在类外部定义并初始化每个静态成员。一个静态成员只能被定义一次。一旦它被定义，就会一直存在于程序的整个生命周期中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; define and initialize a static class memberdouble Account::interestRate &#x3D; initRate();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>建议把静态数据成员的定义与其他非内联函数的定义放在同一个源文件中，这样可以确保对象只被定义一次。</p><p>尽管在通常情况下，不应该在类内部初始化静态成员。但是可以为静态成员提供<code>const</code>整数类型的类内初始值，不过要求静态成员必须是字面值常量类型的<code>constexpr</code>。初始值必须是常量表达式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Account&#123;public:    static double rate() &#123; return interestRate; &#125;    static void rate(double);private:    static constexpr int period &#x3D; 30;  &#x2F;&#x2F; period is a constant    double daily_tbl[period];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态数据成员的类型可以是它所属的类类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Bar&#123;    static Bar mem1;   &#x2F;&#x2F; ok: static member can have incomplete type    Bar *mem2;    &#x2F;&#x2F; ok: pointer member can have incomplete type    Bar mem3;   &#x2F;&#x2F; error: data members must have complete type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用静态成员作为函数的默认实参。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen&#123;public:    &#x2F;&#x2F; bkground refers to the static member    &#x2F;&#x2F; declared later in the class definition    Screen&amp; clear(char &#x3D; bkground);private:    static const char bkground;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-6-functions/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-6-functions/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第6章-函数"><a href="#第6章-函数" class="headerlink" title="第6章 函数"></a>第6章 函数</h1><h2 id="函数基础（Function-Basics）"><a href="#函数基础（Function-Basics）" class="headerlink" title="函数基础（Function Basics）"></a>函数基础（Function Basics）</h2><p>典型的函数定义包括返回类型（return type）、函数名字、由0个或多个形式参数（parameter，简称形参）组成的列表和函数体（function body）。函数执行的操作在函数体中指明。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; factorial of val is val * (val - 1) * (val - 2) . . . * ((val - (val - 1)) * 1)int fact(int val)&#123;    int ret &#x3D; 1;    &#x2F;&#x2F; local variable to hold the result as we calculate it    while (val &gt; 1)    ret *&#x3D; val--;   &#x2F;&#x2F; assign ret * val to ret and decrement val    return ret;     &#x2F;&#x2F; return the result&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序通过调用运算符（call operator）来执行函数。调用运算符的形式之一是一对圆括号<code>()</code>，作用于一个表达式，该表达式是函数或者指向函数的指针；圆括号内是一个用逗号隔开的实际参数（argument，简称实参）列表，用来初始化函数形参。调用表达式的类型就是函数的返回类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    int j &#x3D; fact(5);    &#x2F;&#x2F; j equals 120, i.e., the result of fact(5)    cout &lt;&lt; &quot;5! is &quot; &lt;&lt; j &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数调用完成两项工作：</p><ul><li>用实参初始化对应的形参。</li><li>将控制权从主调函数转移给被调函数。此时，主调函数（calling function）的执行被暂时中断，被调函数（called function）开始执行。</li></ul><p><code>return</code>语句结束函数的执行过程，完成两项工作：</p><ul><li>返回<code>return</code>语句中的值（可能没有值）。</li><li>将控制权从被调函数转移回主调函数，函数的返回值用于初始化调用表达式的结果。</li></ul><p>实参是形参的初始值，两者的顺序和类型必须一一对应。</p><p>函数的形参列表可以为空，但是不能省略。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void f1() &#123; &#x2F;* ... *&#x2F; &#125;      &#x2F;&#x2F; implicit void parameter listvoid f2(void) &#123; &#x2F;* ... *&#x2F; &#125;  &#x2F;&#x2F; explicit void parameter list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>形参列表中的形参通常用逗号隔开，每个形参都是含有一个声明符的声明，即使两个形参类型一样，也必须把两个类型声明都写出来。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int f3(int v1, v2) &#123; &#x2F;* ... *&#x2F; &#125;      &#x2F;&#x2F; errorint f4(int v1, int v2) &#123; &#x2F;* ... *&#x2F; &#125;  &#x2F;&#x2F; ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数的任意两个形参不能同名，函数最外层作用域中的局部变量也不能使用与函数形参一样的名字。</p><p>形参的名字是可选的，但是无法使用未命名的形参。即使某个形参不被函数使用，也必须为它提供一个实参。</p><p>函数的返回类型不能是数组类型或者函数类型，但可以是指向数组或函数的指针。</p><h3 id="局部对象（Local-Objects）"><a href="#局部对象（Local-Objects）" class="headerlink" title="局部对象（Local Objects）"></a>局部对象（Local Objects）</h3><p>形参和函数体内定义的变量统称为局部变量（local variable）。</p><p>局部静态对象（local static object）在程序的执行路径第一次经过对象定义语句时初始化，并且直到程序结束才被销毁，对象所在的函数结束执行并不会对它产生影响。在变量类型前添加关键字<code>static</code>可以定义局部静态对象。</p><p>如果局部静态对象没有显式的初始值，它将执行值初始化。</p><h3 id="函数声明（Function-Declarations）"><a href="#函数声明（Function-Declarations）" class="headerlink" title="函数声明（Function Declarations）"></a>函数声明（Function Declarations）</h3><p>和变量类似，函数只能定义一次，但可以声明多次。函数声明也叫做函数原型（function prototype）。</p><p>函数应该在头文件中声明，在源文件中定义。定义函数的源文件应该包含含有函数声明的头文件。</p><h3 id="分离式编译（Separate-Compilation）"><a href="#分离式编译（Separate-Compilation）" class="headerlink" title="分离式编译（Separate Compilation）"></a>分离式编译（Separate Compilation）</h3><p>分离式编译允许我们把程序按照逻辑关系分割到几个文件中去，每个文件独立编译。这一过程通常会产生后缀名是*.obj<em>或</em>.o*的文件，该文件包含对象代码（object code）。之后编译器把对象文件链接（link）在一起形成可执行文件。</p><h2 id="参数传递（Argument-Passing）"><a href="#参数传递（Argument-Passing）" class="headerlink" title="参数传递（Argument Passing）"></a>参数传递（Argument Passing）</h2><p>形参初始化的机理与变量初始化一样。</p><p>形参的类型决定了形参和实参交互的方式：</p><ul><li>当形参是引用类型时，它对应的实参被引用传递（passed by reference），函数被传引用调用（called by reference）。引用形参是它对应实参的别名。</li><li>当形参不是引用类型时，形参和实参是两个相互独立的对象，实参的值会被拷贝给形参（值传递，passed by value），函数被传值调用（called by value）。</li></ul><h3 id="传值参数（Passing-Arguments-by-Value）"><a href="#传值参数（Passing-Arguments-by-Value）" class="headerlink" title="传值参数（Passing Arguments by Value）"></a>传值参数（Passing Arguments by Value）</h3><p>如果形参不是引用类型，则函数对形参做的所有操作都不会影响实参。</p><p>使用指针类型的形参可以访问或修改函数外部的对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; function that takes a pointer and sets the pointed-to value to zerovoid reset(int *ip)&#123;    *ip &#x3D; 0;  &#x2F;&#x2F; changes the value of the object to which ip points    ip &#x3D; 0;   &#x2F;&#x2F; changes only the local copy of ip; the argument is unchanged&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想在函数体内访问或修改函数外部的对象，建议使用引用形参代替指针形参。</p><h3 id="传引用参数（Passing-Arguments-by-Reference）"><a href="#传引用参数（Passing-Arguments-by-Reference）" class="headerlink" title="传引用参数（Passing Arguments by Reference）"></a>传引用参数（Passing Arguments by Reference）</h3><p>通过使用引用形参，函数可以改变实参的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; function that takes a reference to an int and sets the given object to zerovoid reset(int &amp;i)  &#x2F;&#x2F; i is just another name for the object passed to reset&#123;    i &#x3D; 0;  &#x2F;&#x2F; changes the value of the object to which i refers&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用引用形参可以避免拷贝操作，拷贝大的类类型对象或容器对象比较低效。另外有的类类型（如IO类型）根本就不支持拷贝操作，这时只能通过引用形参访问该类型的对象。</p><p>除了内置类型、函数对象和标准库迭代器外，其他类型的参数建议以引用方式传递。</p><p>如果函数无须改变引用形参的值，最好将其声明为常量引用。</p><p>一个函数只能返回一个值，但利用引用形参可以使函数返回额外信息。</p><h3 id="const形参和实参（const-Parameters-and-Arguments）"><a href="#const形参和实参（const-Parameters-and-Arguments）" class="headerlink" title="const形参和实参（const Parameters and Arguments）"></a>const形参和实参（const Parameters and Arguments）</h3><p>当形参有顶层<code>const</code>时，传递给它常量对象或非常量对象都是可以的。</p><p>可以使用非常量对象初始化一个底层<code>const</code>形参，但是反过来不行。</p><p>把函数不会改变的形参定义成普通引用会极大地限制函数所能接受的实参类型，同时也会给别人一种误导，即函数可以修改实参的值。</p><h3 id="数组形参（Array-Parameters）"><a href="#数组形参（Array-Parameters）" class="headerlink" title="数组形参（Array Parameters）"></a>数组形参（Array Parameters）</h3><p>因为不能拷贝数组，所以无法以值传递的方式使用数组参数，但是可以把形参写成类似数组的形式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; each function has a single parameter of type const int*void print(const int*);void print(const int[]);    &#x2F;&#x2F; shows the intent that the function takes an arrayvoid print(const int[10]);  &#x2F;&#x2F; dimension for documentation purposes (at best)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为数组会被转换成指针，所以当我们传递给函数一个数组时，实际上传递的是指向数组首元素的指针。</p><p>因为数组是以指针的形式传递给函数的，所以一开始函数并不知道数组的确切尺寸，调用者应该为此提供一些额外信息。</p><p>以数组作为形参的函数必须确保使用数组时不会越界。</p><p>如果函数不需要对数组元素执行写操作，应该把数组形参定义成指向常量的指针。</p><p>形参可以是数组的引用，但此时维度是形参类型的一部分，函数只能作用于指定大小的数组。</p><p>将多维数组传递给函数时，数组第二维（以及后面所有维度）的大小是数组类型的一部分，不能省略。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">f(int &amp;arr[10])     &#x2F;&#x2F; error: declares arr as an array of referencesf(int (&amp;arr)[10])   &#x2F;&#x2F; ok: arr is a reference to an array of ten ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="main：处理命令行选项（main：Handling-Command-Line-Options）"><a href="#main：处理命令行选项（main：Handling-Command-Line-Options）" class="headerlink" title="main：处理命令行选项（main：Handling Command-Line Options）"></a>main：处理命令行选项（main：Handling Command-Line Options）</h3><p>可以在命令行中向<code>main</code>函数传递参数，形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(int argc, char *argv[]) &#123; &#x2F;*...*&#x2F; &#125;int main(int argc, char **argv) &#123; &#x2F;*...*&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二个形参<em>argv</em>是一个数组，数组元素是指向C风格字符串的指针；第一个形参<em>argc</em>表示数组中字符串的数量。</p><p>当实参传递给<code>main</code>函数后，<em>argv</em>的第一个元素指向程序的名字或者一个空字符串，接下来的元素依次传递命令行提供的实参。最后一个指针之后的元素值保证为0。</p><p>在<em>Visual Studio</em>中可以设置<code>main</code>函数调试参数：</p><p><img src="Images/6-1.png" alt="6-1"></p><h3 id="含有可变形参的函数（Functions-with-Varying-Parameters）"><a href="#含有可变形参的函数（Functions-with-Varying-Parameters）" class="headerlink" title="含有可变形参的函数（Functions with Varying Parameters）"></a>含有可变形参的函数（Functions with Varying Parameters）</h3><p>C++11新标准提供了两种主要方法处理实参数量不定的函数。</p><ul><li><p>如果实参类型相同，可以使用<code>initializer_list</code>标准库类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void error_msg(initializer_list&lt;string&gt; il)&#123;    for (auto beg &#x3D; il.begin(); beg !&#x3D; il.end(); ++beg)    cout &lt;&lt; *beg &lt;&lt; &quot; &quot; ;    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果实参类型不同，可以定义可变参数模板。</p></li></ul><p>C++还可以使用省略符形参传递可变数量的实参，但这种功能一般只用在与C函数交换的接口程序中。</p><p><code>initializer_list</code>是一种标准库类型，定义在头文件<em>initializer_list</em>中，表示某种特定类型的值的数组。</p><p><code>initializer_list</code>提供的操作：</p><p><img src="Images/6-2.png" alt="6-2"></p><p>拷贝或赋值一个<code>initializer_list</code>对象不会拷贝列表中的元素。拷贝后，原始列表和副本共享元素。</p><p><code>initializer_list</code>对象中的元素永远是常量值。</p><p>如果想向<code>initializer_list</code>形参传递一个值的序列，则必须把序列放在一对花括号内。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (expected !&#x3D; actual)    error_msg(ErrCode(42), &#123;&quot;functionX&quot;, expected, actual&#125;);else    error_msg(ErrCode(0), &#123;&quot;functionX&quot;, &quot;okay&quot;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>initializer_list</code>包含<code>begin</code>和<code>end</code>成员，所以可以使用范围<code>for</code>循环处理其中的元素。</p><p>省略符形参是为了便于C++程序访问某些特殊的C代码而设置的，这些代码使用了名为<code>varargs</code>的C标准库功能。通常，省略符形参不应该用于其他目的。</p><p>省略符形参应该仅仅用于C和C++通用的类型，大多数类类型的对象在传递给省略符形参时都无法正确拷贝。</p><h2 id="返回类型和return语句（Return-Types-and-the-return-Statement）"><a href="#返回类型和return语句（Return-Types-and-the-return-Statement）" class="headerlink" title="返回类型和return语句（Return Types and the return Statement）"></a>返回类型和return语句（Return Types and the return Statement）</h2><p><code>return</code>语句有两种形式，作用是终止当前正在执行的函数并返回到调用该函数的地方。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">return;return expression;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="无返回值函数（Functions-with-No-Return-Value）"><a href="#无返回值函数（Functions-with-No-Return-Value）" class="headerlink" title="无返回值函数（Functions with No Return Value）"></a>无返回值函数（Functions with No Return Value）</h3><p>没有返回值的<code>return</code>语句只能用在返回类型是<code>void</code>的函数中。返回<code>void</code>的函数可以省略<code>return</code>语句，因为在这类函数的最后一条语句后面会隐式地执行<code>return</code>。</p><p>通常情况下，如果<code>void</code>函数想在其中间位置提前退出，可以使用<code>return</code>语句。</p><p>一个返回类型是<code>void</code>的函数也能使用<code>return</code>语句的第二种形式，不过此时<code>return</code>语句的<em>expression</em>必须是另一个返回<code>void</code>的函数。</p><p>强行令<code>void</code>函数返回其他类型的表达式将产生编译错误。</p><h3 id="有返回值函数（Functions-That-Return-a-Value）"><a href="#有返回值函数（Functions-That-Return-a-Value）" class="headerlink" title="有返回值函数（Functions That Return a Value）"></a>有返回值函数（Functions That Return a Value）</h3><p><code>return</code>语句的第二种形式提供了函数的结果。只要函数的返回类型不是<code>void</code>，该函数内的每条<code>return</code>语句就必须返回一个值，并且返回值的类型必须与函数的返回类型相同，或者能隐式地转换成函数的返回类型（<code>main</code>函数例外）。</p><p>在含有<code>return</code>语句的循环后面应该也有一条<code>return</code>语句，否则程序就是错误的，但很多编译器无法发现此错误。</p><p>函数返回一个值的方式和初始化一个变量或形参的方式完全一样：返回的值用于初始化调用点的一个临时量，该临时量就是函数调用的结果。</p><p>如果函数返回引用类型，则该引用仅仅是它所引用对象的一个别名。</p><p>函数不应该返回局部对象的指针或引用，因为一旦函数完成，局部对象将被释放。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; disaster: this function returns a reference to a local objectconst string &amp;manip()&#123;    string ret;    &#x2F;&#x2F; transform ret in some way    if (!ret.empty())        return ret;   &#x2F;&#x2F; WRONG: returning a reference to a local object!    else        return &quot;Empty&quot;;   &#x2F;&#x2F; WRONG: &quot;Empty&quot; is a local temporary string&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果函数返回指针、引用或类的对象，则可以使用函数调用的结果访问结果对象的成员。</p><p>调用一个返回引用的函数会得到左值，其他返回类型得到右值。</p><p>C++11规定，函数可以返回用花括号包围的值的列表。同其他返回类型一样，列表也用于初始化表示函数调用结果的临时量。如果列表为空，临时量执行值初始化；否则返回的值由函数的返回类型决定。</p><ul><li><p>如果函数返回内置类型，则列表内最多包含一个值，且该值所占空间不应该大于目标类型的空间。</p></li><li><p>如果函数返回类类型，由类本身定义初始值如何使用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;string&gt; process()&#123;    &#x2F;&#x2F; . . .    &#x2F;&#x2F; expected and actual are strings    if (expected.empty())        return &#123;&#125;;  &#x2F;&#x2F; return an empty vector    else if (expected &#x3D;&#x3D; actual)        return &#123;&quot;functionX&quot;, &quot;okay&quot;&#125;;  &#x2F;&#x2F; return list-initialized vector    else        return &#123;&quot;functionX&quot;, expected, actual&#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>main</code>函数可以没有<code>return</code>语句直接结束。如果控制流到达了<code>main</code>函数的结尾处并且没有<code>return</code>语句，编译器会隐式地插入一条返回0的<code>return</code>语句。</p><p><code>main</code>函数的返回值可以看作是状态指示器。返回0表示执行成功，返回其他值表示执行失败，其中非0值的具体含义依机器而定。</p><p>为了使<code>main</code>函数的返回值与机器无关，头文件<em>cstdlib</em>定义了<code>EXIT_SUCCESS</code>和<code>EXIT_FAILURE</code>这两个预处理变量，分别表示执行成功和失败。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    if (some_failure)        return EXIT_FAILURE; &#x2F;&#x2F; defined in cstdlib    else        return EXIT_SUCCESS; &#x2F;&#x2F; defined in cstdlib&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用预处理变量<code>EXIT_SUCCESS</code>和<code>EXIT_FAILURE</code>表示<code>main</code>函数的执行结果。</p><p>如果一个函数调用了它自身，不管这种调用是直接的还是间接的，都称该函数为递归函数（recursive function）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; calculate val!, which is 1 * 2 * 3 . . . * valint factorial(int val)&#123;    if (val &gt; 1)        return factorial(val-1) * val;    return 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在递归函数中，一定有某条路径是不包含递归调用的，否则函数会一直递归下去，直到程序栈空间耗尽为止。</p><p>相对于循环迭代，递归的效率较低。但在某些情况下使用递归可以增加代码的可读性。循环迭代适合处理线性问题（如链表，每个节点有唯一前驱、唯一后继），而递归适合处理非线性问题（如树，每个节点的前驱、后继不唯一）。</p><p><code>main</code>函数不能调用它自身。</p><h3 id="返回数组指针（Returning-a-Pointer-to-an-Array）"><a href="#返回数组指针（Returning-a-Pointer-to-an-Array）" class="headerlink" title="返回数组指针（Returning a Pointer to an Array）"></a>返回数组指针（Returning a Pointer to an Array）</h3><p>因为数组不能被拷贝，所以函数不能返回数组，但可以返回数组的指针或引用。</p><p>返回数组指针的函数形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Type (*function(parameter_list))[dimension]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<em>Type</em>表示元素类型，<em>dimension</em>表示数组大小，*(*function (parameter_list))*两端的括号必须存在。</p><p>C++11允许使用尾置返回类型（trailing return type）简化复杂函数声明。尾置返回类型跟在形参列表后面，并以一个<code>-&gt;</code>符号开头。为了表示函数真正的返回类型在形参列表之后，需要在本应出现返回类型的地方添加<code>auto</code>关键字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; fcn takes an int argument and returns a pointer to an array of ten intsauto func(int i) -&gt; int(*)[10];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>任何函数的定义都能使用尾置返回类型，但是这种形式更适用于返回类型比较复杂的函数。</p><p>如果我们知道函数返回的指针将指向哪个数组，就可以使用<code>decltype</code>关键字声明返回类型。但<code>decltype</code>并不会把数组类型转换成指针类型，所以还要在函数声明中添加一个<code>*</code>符号。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int odd[] &#x3D; &#123;1,3,5,7,9&#125;;int even[] &#x3D; &#123;0,2,4,6,8&#125;;&#x2F;&#x2F; returns a pointer to an array of five int elementsdecltype(odd) *arrPtr(int i)&#123;    return (i % 2) ? &amp;odd : &amp;even;  &#x2F;&#x2F; returns a pointer to the array&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数重载（Overloaded-Functions）"><a href="#函数重载（Overloaded-Functions）" class="headerlink" title="函数重载（Overloaded Functions）"></a>函数重载（Overloaded Functions）</h2><p>同一作用域内的几个名字相同但形参列表不同的函数叫做重载函数。</p><p><code>main</code>函数不能重载。</p><p>不允许两个函数除了返回类型以外的其他所有要素都相同。</p><p>顶层<code>const</code>不影响传入函数的对象，一个拥有顶层<code>const</code>的形参无法和另一个没有顶层<code>const</code>的形参区分开来。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Record lookup(Phone);Record lookup(const Phone);  &#x2F;&#x2F; redeclares Record lookup(Phone)Record lookup(Phone*);Record lookup(Phone* const); &#x2F;&#x2F; redeclares Record lookup(Phone*)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果形参是某种类型的指针或引用，则通过区分其指向的对象是常量还是非常量可以实现函数重载，此时的<code>const</code>是底层的。当我们传递给重载函数一个非常量对象或者指向非常量对象的指针时，编译器会优先选用非常量版本的函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; functions taking const and nonconst references or pointers have different parameters&#x2F;&#x2F; declarations for four independent, overloaded functionsRecord lookup(Account&amp;);        &#x2F;&#x2F; function that takes a reference to AccountRecord lookup(const Account&amp;);  &#x2F;&#x2F; new function that takes a const referenceRecord lookup(Account*);        &#x2F;&#x2F; new function, takes a pointer to AccountRecord lookup(const Account*);  &#x2F;&#x2F; new function, takes a pointer to const<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>const_cast</code>可以用于函数的重载。当函数的实参不是常量时，将得到普通引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; return a reference to the shorter of two stringsconst string &amp;shorterString(const string &amp;s1, const string &amp;s2)&#123;    return s1.size() &lt;&#x3D; s2.size() ? s1 : s2;&#125;string &amp;shorterString(string &amp;s1, string &amp;s2)&#123;    auto &amp;r &#x3D; shorterString(const_cast&lt;const string&amp;&gt;(s1),                    const_cast&lt;const string&amp;&gt;(s2));    return const_cast&lt;string&amp;&gt;(r);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数匹配（function matching）也叫做重载确定（overload resolution），是指编译器将函数调用与一组重载函数中的某一个进行关联的过程。</p><p>调用重载函数时有三种可能的结果：</p><ul><li>编译器找到一个与实参最佳匹配（best match）的函数，并生成调用该函数的代码。</li><li>编译器找不到任何一个函数与实参匹配，发出无匹配（no match）的错误信息。</li><li>有一个以上的函数与实参匹配，但每一个都不是明显的最佳选择，此时编译器发出二义性调用（ambiguous call）的错误信息。</li></ul><h3 id="重载与作用域（Overloading-and-Scope）"><a href="#重载与作用域（Overloading-and-Scope）" class="headerlink" title="重载与作用域（Overloading and Scope）"></a>重载与作用域（Overloading and Scope）</h3><p>在不同的作用域中无法重载函数名。一旦在当前作用域内找到了所需的名字，编译器就会忽略掉外层作用域中的同名实体。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string read();void print(const string &amp;);void print(double);     &#x2F;&#x2F; overloads the print functionvoid fooBar(int ival)&#123;    bool read &#x3D; false;  &#x2F;&#x2F; new scope: hides the outer declaration of read    string s &#x3D; read();  &#x2F;&#x2F; error: read is a bool variable, not a function    &#x2F;&#x2F; bad practice: usually it&#39;s a bad idea to declare functions at local scope    void print(int);    &#x2F;&#x2F; new scope: hides previous instances of print    print(&quot;Value: &quot;);   &#x2F;&#x2F; error: print(const string &amp;) is hidden    print(ival);    &#x2F;&#x2F; ok: print(int) is visible    print(3.14);    &#x2F;&#x2F; ok: calls print(int); print(double) is hidden&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C++中，名字查找发生在类型检查之前。</p><h2 id="特殊用途语言特性（Features-for-Specialized-Uses）"><a href="#特殊用途语言特性（Features-for-Specialized-Uses）" class="headerlink" title="特殊用途语言特性（Features for Specialized Uses）"></a>特殊用途语言特性（Features for Specialized Uses）</h2><h3 id="默认实参（Default-Arguments）"><a href="#默认实参（Default-Arguments）" class="headerlink" title="默认实参（Default Arguments）"></a>默认实参（Default Arguments）</h3><p>默认实参作为形参的初始值出现在形参列表中。可以为一个或多个形参定义默认值，不过一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef string::size_type sz;string screen(sz ht &#x3D; 24, sz wid &#x3D; 80, char backgrnd &#x3D; &#39; &#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用含有默认实参的函数时，可以包含该实参，也可以省略该实参。</p><p>如果想使用默认实参，只要在调用函数的时候省略该实参即可。</p><p>虽然多次声明同一个函数是合法的，但是在给定的作用域中一个形参只能被赋予一次默认实参。函数的后续声明只能为之前那些没有默认值的形参添加默认实参，而且该形参右侧的所有形参必须都有默认值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; no default for the height or width parametersstring screen(sz, sz, char &#x3D; &#39; &#39;);string screen(sz, sz, char &#x3D; &#39;*&#39;);      &#x2F;&#x2F; error: redeclarationstring screen(sz &#x3D; 24, sz &#x3D; 80, char);  &#x2F;&#x2F; ok: adds default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认实参只能出现在函数声明和定义其中一处。通常应该在函数声明中指定默认实参，并将声明放在合适的头文件中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 函数声明void fun(int n);int main()&#123;    &#x2F;&#x2F; Error: 编译器向前查找函数声明    &#x2F;&#x2F;        fun调用形式与声明不符    fun();    return EXIT_SUCCESS;&#125;&#x2F;&#x2F; 函数定义void fun(int n &#x3D; 0) &#123; &#x2F;*...*&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部变量不能作为函数的默认实参。</p><p>用作默认实参的名字在函数声明所在的作用域内解析，但名字的求值过程发生在函数调用时。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; the declarations of wd, def, and ht must appear outside a functionsz wd &#x3D; 80;char def &#x3D; &#39; &#39;;sz ht();string screen(sz &#x3D; ht(), sz &#x3D; wd, char &#x3D; def);string window &#x3D; screen();   &#x2F;&#x2F; calls screen(ht(), 80, &#39; &#39;)void f2()&#123;    def &#x3D; &#39;*&#39;;      &#x2F;&#x2F; changes the value of a default argument    sz wd &#x3D; 100;    &#x2F;&#x2F; hides the outer definition of wd but does not change the    default    window &#x3D; screen();  &#x2F;&#x2F; calls screen(ht(), 80, &#39;*&#39;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内联函数和constexpr函数（Inline-and-constexpr-Functions）"><a href="#内联函数和constexpr函数（Inline-and-constexpr-Functions）" class="headerlink" title="内联函数和constexpr函数（Inline and constexpr Functions）"></a>内联函数和constexpr函数（Inline and constexpr Functions）</h3><p>内联函数会在每个调用点上“内联地”展开，省去函数调用所需的一系列工作。定义内联函数时需要在函数的返回类型前添加关键字<code>inline</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; inline version: find the shorter of two stringsinline const string &amp;horterString(const string &amp;s1, const string &amp;s2)&#123;    return s1.size() &lt;&#x3D; s2.size() ? s1 : s2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数声明和定义中都能使用关键字<code>inline</code>，但是建议只在函数定义时使用。</p><p>一般来说，内联机制适用于优化规模较小、流程直接、调用频繁的函数。内联函数中不允许有循环语句和<code>switch</code>语句，否则函数会被编译为普通函数。</p><p><code>constexpr</code>函数是指能用于常量表达式的函数。<code>constexpr</code>函数的返回类型及所有形参的类型都得是字面值类型。另外C++11标准要求<code>constexpr</code>函数体中必须有且只有一条<code>return</code>语句，但是此限制在C++14标准中被删除。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr int new_sz()&#123;    return 42;&#125;constexpr int foo &#x3D; new_sz();   &#x2F;&#x2F; ok: foo is a constant expression<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>constexpr</code>函数的返回值可以不是一个常量。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; scale(arg) is a constant expression if arg is a constant expressionconstexpr size_t scale(size_t cnt)&#123;    return new_sz() * cnt;&#125;int arr[scale(2)];  &#x2F;&#x2F; ok: scale(2) is a constant expressionint i &#x3D; 2;          &#x2F;&#x2F; i is not a constant expressionint a2[scale(i)];   &#x2F;&#x2F; error: scale(i) is not a constant expression<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>constexpr</code>函数被隐式地指定为内联函数。</p><p>和其他函数不同，内联函数和<code>constexpr</code>函数可以在程序中多次定义。因为在编译过程中，编译器需要函数的定义来随时展开函数。对于某个给定的内联函数或<code>constexpr</code>函数，它的多个定义必须完全一致。因此内联函数和<code>constexpr</code>函数通常定义在头文件中。</p><h3 id="调试帮助（Aids-for-Debugging）"><a href="#调试帮助（Aids-for-Debugging）" class="headerlink" title="调试帮助（Aids for Debugging）"></a>调试帮助（Aids for Debugging）</h3><table><thead><tr><th align="center">变量名称</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center"><code>__func__</code></td><td align="center">当前函数名称</td></tr><tr><td align="center"><code>__FILE__</code></td><td align="center">当前文件名称</td></tr><tr><td align="center"><code>__LINE__</code></td><td align="center">当前行号</td></tr><tr><td align="center"><code>__TIME__</code></td><td align="center">文件编译时间</td></tr><tr><td align="center"><code>__DATE__</code></td><td align="center">文件编译日期</td></tr></tbody></table><h2 id="函数匹配（Function-Matching）"><a href="#函数匹配（Function-Matching）" class="headerlink" title="函数匹配（Function Matching）"></a>函数匹配（Function Matching）</h2><p>函数实参类型与形参类型越接近，它们匹配得越好。</p><p>重载函数集中的函数称为候选函数（candidate function）。</p><p>可行函数（viable function）的形参数量与函数调用所提供的实参数量相等，并且每个实参的类型与对应的形参类型相同，或者能转换成形参的类型。</p><p>调用重载函数时应该尽量避免强制类型转换。</p><h3 id="实参类型转换（Argument-Type-Conversions）"><a href="#实参类型转换（Argument-Type-Conversions）" class="headerlink" title="实参类型转换（Argument Type Conversions）"></a>实参类型转换（Argument Type Conversions）</h3><p>所有算术类型转换的级别都一样。</p><p>如果载函数的区别在于它们的引用或指针类型的形参是否含有底层<code>const</code>，则调用发生时编译器通过实参是否是常量来决定函数的版本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Record lookup(Account&amp;);    &#x2F;&#x2F; function that takes a reference to AccountRecord lookup(const Account&amp;);  &#x2F;&#x2F; new function that takes a const referenceconst Account a;Account b;lookup(a);  &#x2F;&#x2F; calls lookup(const Account&amp;)lookup(b);  &#x2F;&#x2F; calls lookup(Account&amp;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数指针（Pointers-to-Functions）"><a href="#函数指针（Pointers-to-Functions）" class="headerlink" title="函数指针（Pointers to Functions）"></a>函数指针（Pointers to Functions）</h2><p>要想声明一个可以指向某种函数的指针，只需要用指针替换函数名称即可。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; compares lengths of two stringsbool lengthCompare(const string &amp;, const string &amp;);&#x2F;&#x2F; pf points to a function returning bool that takes two const string referencesbool (*pf)(const string &amp;, const string &amp;); &#x2F;&#x2F; uninitialized<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接使用指向函数的指针来调用函数，无须提前解引用指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pf &#x3D; lengthCompare; &#x2F;&#x2F; pf now points to the function named lengthComparepf &#x3D; &amp;lengthCompare; &#x2F;&#x2F; equivalent assignment: address-of operator is optionalbool b1 &#x3D; pf(&quot;hello&quot;, &quot;goodbye&quot;);       &#x2F;&#x2F; calls lengthComparebool b2 &#x3D; (*pf)(&quot;hello&quot;, &quot;goodbye&quot;);    &#x2F;&#x2F; equivalent callbool b3 &#x3D; lengthCompare(&quot;hello&quot;, &quot;goodbye&quot;);    &#x2F;&#x2F; equivalent call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于重载函数，编译器通过指针类型决定函数版本，指针类型必须与重载函数中的某一个精确匹配。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ff(int*);void ff(unsigned int);void (*pf1)(unsigned int) &#x3D; ff; &#x2F;&#x2F; pf1 points to ff(unsigned)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 可以把函数的形参定义成指向函数的指针。调用时允许直接把函数名当作实参使用，它会自动转换成指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; third parameter is a function type and is automatically treated as a pointer to functionvoid useBigger(const string &amp;s1, const string &amp;s2, bool pf(const string &amp;, const string &amp;));&#x2F;&#x2F; equivalent declaration: explicitly define the parameter as a pointer to functionvoid useBigger(const string &amp;s1, const string &amp;s2, bool (*pf)(const string &amp;, const string &amp;));&#x2F;&#x2F; automatically converts the function lengthCompare to a pointer to functionuseBigger(s1, s2, lengthCompare);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键字<code>decltype</code>作用于函数时，返回的是函数类型，而不是函数指针类型。</p><p>函数可以返回指向函数的指针。但返回类型不会像函数类型的形参一样自动地转换成指针，必须显式地将其指定为指针类型。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-5-statements/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-5-statements/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第5章-语句"><a href="#第5章-语句" class="headerlink" title="第5章 语句"></a>第5章 语句</h1><h2 id="简单语句（Simple-Statements）"><a href="#简单语句（Simple-Statements）" class="headerlink" title="简单语句（Simple Statements）"></a>简单语句（Simple Statements）</h2><p>如果在程序的某个地方，语法上需要一条语句但是逻辑上不需要，则应该使用空语句（null statement）。空语句中只含有一个单独的分号<code>;</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; read until we hit end-of-file or find an input equal to soughtwhile (cin &gt;&gt; s &amp;&amp; s !&#x3D; sought)    ;   &#x2F;&#x2F; null statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用空语句时应该加上注释，从而令读这段代码的人知道该语句是有意省略的。</p><p>多余的空语句并非总是无害的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; disaster: extra semicolon: loop body is this null statementwhile (iter !&#x3D; svec.end()) ;    &#x2F;&#x2F; the while body is the empty statement    ++iter;     &#x2F;&#x2F; increment is not part of the loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>复合语句（compound statement）是指用花括号括起来的（可能为空）语句和声明的序列。复合语句也叫做块（block），一个块就是一个作用域。在块中引入的名字只能在块内部以及嵌套在块中的子块里访问。通常，名字在有限的区域内可见，该区域从名字定义处开始，到名字所在（最内层）块的结尾处为止。</p><p>语句块不以分号作为结束。</p><p>空块的作用等价于空语句。</p><h2 id="语句作用域（Statement-Scope）"><a href="#语句作用域（Statement-Scope）" class="headerlink" title="语句作用域（Statement Scope）"></a>语句作用域（Statement Scope）</h2><p>可以在<code>if</code>、<code>switch</code>、<code>while</code>和<code>for</code>语句的控制结构内定义变量，这些变量只在相应语句的内部可见，一旦语句结束，变量也就超出了其作用范围。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (int i &#x3D; get_num())   &#x2F;&#x2F; i is created and initialized on each iteration    cout &lt;&lt; i &lt;&lt; endl;i &#x3D; 0;  &#x2F;&#x2F; error: i is not accessible outside the loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="条件语句（Conditional-Statements）"><a href="#条件语句（Conditional-Statements）" class="headerlink" title="条件语句（Conditional Statements）"></a>条件语句（Conditional Statements）</h2><h3 id="if语句（The-if-Statement）"><a href="#if语句（The-if-Statement）" class="headerlink" title="if语句（The if Statement）"></a>if语句（The if Statement）</h3><p><code>if</code>语句的形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (condition)    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>if-else</code>语句的形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (condition)    statementelse    statement2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<em>condition</em>是判断条件，可以是一个表达式或者初始化了的变量声明。<em>condition</em>必须用圆括号括起来。</p><ul><li>如果<em>condition</em>为真，则执行<em>statement</em>。执行完成后，程序继续执行<code>if</code>语句后面的其他语句。</li><li>如果<em>condition</em>为假，则跳过<em>statement</em>。对于简单<code>if</code>语句来说，程序直接执行<code>if</code>语句后面的其他语句；对于<code>if-else</code>语句来说，程序先执行<em>statement2</em>，再执行<code>if</code>语句后面的其他语句。</li></ul><p><code>if</code>语句可以嵌套，其中<code>else</code>与离它最近的尚未匹配的<code>if</code>相匹配。</p><h3 id="switch语句（The-switch-Statement）"><a href="#switch语句（The-switch-Statement）" class="headerlink" title="switch语句（The switch Statement）"></a>switch语句（The switch Statement）</h3><p><code>switch</code>语句的形式：</p><p><img src="Images/5-1.png" alt="5-1"></p><p><code>switch</code>语句先对括号里的表达式求值，值转换成整数类型后再与每个<code>case</code>标签（case label）的值进行比较。如果表达式的值和某个<code>case</code>标签匹配，程序从该标签之后的第一条语句开始执行，直到到达<code>switch</code>的结尾或者遇到<code>break</code>语句为止。<code>case</code>标签必须是整型常量表达式。</p><p>通常情况下每个<code>case</code>分支后都有<code>break</code>语句。如果确实不应该出现<code>break</code>语句，最好写一段注释说明程序的逻辑。</p><p>尽管<code>switch</code>语句没有强制要求在最后一个<code>case</code>标签后写上<code>break</code>，但为了安全起见，最好添加<code>break</code>。这样即使以后增加了新的<code>case</code>分支，也不用再在前面补充<code>break</code>语句了。</p><p><code>switch</code>语句中可以添加一个<code>default</code>标签（default label），如果没有任何一个<code>case</code>标签能匹配上<code>switch</code>表达式的值，程序将执行<code>default</code>标签后的语句。</p><p>即使不准备在<code>default</code>标签下做任何操作，程序中也应该定义一个<code>default</code>标签。其目的在于告诉他人我们已经考虑到了默认情况，只是目前不需要实际操作。</p><p>不允许跨过变量的初始化语句直接跳转到该变量作用域内的另一个位置。如果需要为<code>switch</code>的某个<code>case</code>分支定义并初始化一个变量，则应该把变量定义在块内。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">case true:&#123;    &#x2F;&#x2F; ok: declaration statement within a statement block    string file_name &#x3D; get_file_name();    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代语句（Iterative-Statements）"><a href="#迭代语句（Iterative-Statements）" class="headerlink" title="迭代语句（Iterative Statements）"></a>迭代语句（Iterative Statements）</h2><p>迭代语句通常称为循环，它重复执行操作直到满足某个条件才停止。<code>while</code>和<code>for</code>语句在执行循环体之前检查条件，<code>do-while</code>语句先执行循环体再检查条件。</p><h3 id="while语句（The-while-Statement）"><a href="#while语句（The-while-Statement）" class="headerlink" title="while语句（The while Statement）"></a>while语句（The while Statement）</h3><p><code>while</code>语句的形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (condition)    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要<em>condition</em>的求值结果为<code>true</code>，就一直执行<em>statement</em>（通常是一个块）。<em>condition</em>不能为空，如果<em>condition</em>第一次求值就是<code>false</code>，<em>statement</em>一次都不会执行。</p><p>定义在<code>while</code>条件部分或者循环体内的变量每次迭代都经历从创建到销毁的过程。</p><p>在不确定迭代次数，或者想在循环结束后访问循环控制变量时，使用<code>while</code>比较合适。</p><h3 id="传统的for语句（Traditional-for-Statement）"><a href="#传统的for语句（Traditional-for-Statement）" class="headerlink" title="传统的for语句（Traditional for Statement）"></a>传统的for语句（Traditional for Statement）</h3><p><code>for</code>语句的形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (initializer; condition; expression)    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般情况下，<em>initializer</em>负责初始化一个值，这个值会随着循环的进行而改变。<em>condition</em>作为循环控制的条件，只要<em>condition</em>的求值结果为<code>true</code>，就执行一次<em>statement</em>。执行后再由<em>expression</em>负责修改<em>initializer</em>初始化的变量，这个变量就是<em>condition</em>检查的对象。如果<em>condition</em>第一次求值就是<code>false</code>，<em>statement</em>一次都不会执行。<em>initializer</em>中也可以定义多个对象，但是只能有一条声明语句，因此所有变量的基础类型必须相同。</p><p><code>for</code>语句头中定义的对象只在<code>for</code>循环体内可见。</p><h3 id="范围for语句（Range-for-Statement）"><a href="#范围for语句（Range-for-Statement）" class="headerlink" title="范围for语句（Range for Statement）"></a>范围for语句（Range for Statement）</h3><p>范围<code>for</code>语句的形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (declaration : expression)    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中<em>expression</em>表示一个序列，拥有能返回迭代器的<code>begin</code>和<code>end</code>成员。<em>declaration</em>定义一个变量，序列中的每个元素都应该能转换成该变量的类型（可以使用<code>auto</code>）。如果需要对序列中的元素执行写操作，循环变量必须声明成引用类型。每次迭代都会重新定义循环控制变量，并将其初始化为序列中的下一个值，之后才会执行<em>statement</em>。</p><h3 id="do-while语句（The-do-while-Statement）"><a href="#do-while语句（The-do-while-Statement）" class="headerlink" title="do-while语句（The do-while Statement）"></a>do-while语句（The do-while Statement）</h3><p><code>do-while</code>语句的形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">do    statementwhile (condition);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>计算<em>condition</em>的值之前会先执行一次<em>statement</em>，<em>condition</em>不能为空。如果<em>condition</em>的值为<code>false</code>，循环终止，否则重复执行<em>statement</em>。</p><p>因为<code>do-while</code>语句先执行语句或块，再判断条件，所以不允许在条件部分定义变量。</p><h2 id="跳转语句（Jump-Statements）"><a href="#跳转语句（Jump-Statements）" class="headerlink" title="跳转语句（Jump Statements）"></a>跳转语句（Jump Statements）</h2><p>跳转语句中断当前的执行过程。</p><h3 id="break语句（The-break-Statement）"><a href="#break语句（The-break-Statement）" class="headerlink" title="break语句（The break Statement）"></a>break语句（The break Statement）</h3><p><code>break</code>语句只能出现在迭代语句或者<code>switch</code>语句的内部，负责终止离它最近的<code>while</code>、<code>do-while</code>、<code>for</code>或者<code>switch</code>语句，并从这些语句之后的第一条语句开始执行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string buf;while (cin &gt;&gt; buf &amp;&amp; !buf.empty())&#123;    switch(buf[0])    &#123;        case &#39;-&#39;:            &#x2F;&#x2F; process up to the first blank            for (auto it &#x3D; buf.begin()+1; it !&#x3D; buf.end(); ++it)            &#123;                if (*it &#x3D;&#x3D; &#39; &#39;)                break;  &#x2F;&#x2F; #1, leaves the for loop                &#x2F;&#x2F; . . .            &#125;            &#x2F;&#x2F; break #1 transfers control here            &#x2F;&#x2F; remaining &#39;-&#39; processing:            break;  &#x2F;&#x2F; #2, leaves the switch statement        case &#39;+&#39;:    &#x2F;&#x2F; . . .    &#125; &#x2F;&#x2F; end switch&#x2F;&#x2F; end of switch: break #2 transfers control here&#125; &#x2F;&#x2F; end while<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="continue语句（The-continue-Statement）"><a href="#continue语句（The-continue-Statement）" class="headerlink" title="continue语句（The continue Statement）"></a>continue语句（The continue Statement）</h3><p><code>continue</code>语句只能出现在迭代语句的内部，负责终止离它最近的循环的当前一次迭代并立即开始下一次迭代。和<code>break</code>语句不同的是，只有当<code>switch</code>语句嵌套在迭代语句内部时，才能在<code>switch</code>中使用<code>continue</code>。</p><p><code>continue</code>语句中断当前迭代后，具体操作视迭代语句类型而定：</p><ul><li>对于<code>while</code>和<code>do-while</code>语句来说，继续判断条件的值。</li><li>对于传统的<code>for</code>语句来说，继续执行<code>for</code>语句头中的第三部分，之后判断条件的值。</li><li>对于范围<code>for</code>语句来说，是用序列中的下一个元素初始化循环变量。</li></ul><h3 id="goto语句（The-goto-Statement）"><a href="#goto语句（The-goto-Statement）" class="headerlink" title="goto语句（The goto Statement）"></a>goto语句（The goto Statement）</h3><p><code>goto</code>语句（labeled statement）是一种特殊的语句，在它之前有一个标识符和一个冒号。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">end: return; &#x2F;&#x2F; labeled statement; may be the target of a goto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标签标识符独立于变量和其他标识符的名字，它们之间不会相互干扰。</p><p><code>goto</code>语句的形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">goto label;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>goto</code>语句使程序无条件跳转到标签为<em>label</em>的语句处执行，但两者必须位于同一个函数内，同时<code>goto</code>语句也不能将程序的控制权从变量的作用域之外转移到作用域之内。</p><p>建议不要在程序中使用<code>goto</code>语句，它使得程序既难理解又难修改。</p><h2 id="try语句块和异常处理（try-Blocks-and-Exception-Handling）"><a href="#try语句块和异常处理（try-Blocks-and-Exception-Handling）" class="headerlink" title="try语句块和异常处理（try Blocks and Exception Handling）"></a>try语句块和异常处理（try Blocks and Exception Handling）</h2><p>异常（exception）是指程序运行时的反常行为，这些行为超出了函数正常功能的范围。当程序的某一部分检测到一个它无法处理的问题时，需要使用异常处理（exception handling）。</p><p>异常处理机制包括<code>throw</code>表达式（throw expression）、<code>try</code>语句块（try block）和异常类（exception class）。</p><ul><li>异常检测部分使用<code>throw</code>表达式表示它遇到了无法处理的问题（<code>throw</code>引发了异常）。</li><li>异常处理部分使用<code>try</code>语句块处理异常。<code>try</code>语句块以关键字<code>try</code>开始，并以一个或多个<code>catch</code>子句（catch clause）结束。<code>try</code>语句块中代码抛出的异常通常会被某个<code>catch</code>子句处理，<code>catch</code>子句也被称作异常处理代码（exception handler）。</li><li>异常类用于在<code>throw</code>表达式和相关的<code>catch</code>子句之间传递异常的具体信息。</li></ul><h3 id="throw表达式（A-throw-Expression）"><a href="#throw表达式（A-throw-Expression）" class="headerlink" title="throw表达式（A throw Expression）"></a>throw表达式（A throw Expression）</h3><p><code>throw</code>表达式包含关键字<code>throw</code>和紧随其后的一个表达式，其中表达式的类型就是抛出的异常类型。</p><h3 id="try语句块（The-try-Block）"><a href="#try语句块（The-try-Block）" class="headerlink" title="try语句块（The try Block）"></a>try语句块（The try Block）</h3><p><code>try</code>语句块的通用形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">try&#123;    program-statements&#125;catch (exception-declaration)&#123;    handler-statements&#125;catch (exception-declaration)&#123;    handler-statements&#125; &#x2F;&#x2F; . . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>try</code>语句块中的<em>program-statements</em>组成程序的正常逻辑，其内部声明的变量在块外无法访问，即使在<code>catch</code>子句中也不行。<code>catch</code>子句包含关键字<code>catch</code>、括号内一个对象的声明（异常声明，exception declaration）和一个块。当选中了某个<code>catch</code>子句处理异常后，执行与之对应的块。<code>catch</code>一旦完成，程序会跳过剩余的所有<code>catch</code>子句，继续执行后面的语句。</p><p>如果最终没能找到与异常相匹配的<code>catch</code>子句，程序会执行名为<code>terminate</code>的标准库函数。该函数的行为与系统有关，一般情况下，执行该函数将导致程序非正常退出。类似的，如果一段程序没有<code>try</code>语句块且发生了异常，系统也会调用<code>terminate</code>函数并终止当前程序的执行。</p><h3 id="标准异常（Standard-Exceptions）"><a href="#标准异常（Standard-Exceptions）" class="headerlink" title="标准异常（Standard Exceptions）"></a>标准异常（Standard Exceptions）</h3><p>异常类分别定义在4个头文件中：</p><ul><li><p>头文件<em>exception</em>定义了最通用的异常类<code>exception</code>。它只报告异常的发生，不提供任何额外信息。</p></li><li><p>头文件<em>stdexcept</em>定义了几种常用的异常类。</p><p><img src="Images/5-2.png" alt="5-2"></p></li><li><p>头文件<em>new</em>定义了<code>bad_alloc</code>异常类。</p></li><li><p>头文件<em>type_info</em>定义了<code>bad_cast</code>异常类。</p></li></ul><p>标准库异常类的继承体系：</p><p><img src="Images/5-3.png" alt="5-3"></p><p>只能以默认初始化的方式初始化<code>exception</code>、<code>bad_alloc</code>和<code>bad_cast</code>对象，不允许为这些对象提供初始值。其他异常类的对象在初始化时必须提供一个<code>string</code>或一个C风格字符串，通常表示异常信息。<code>what</code>成员函数可以返回该字符串的<code>string</code>副本。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-4-expressions/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-4-expressions/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第4章-表达式"><a href="#第4章-表达式" class="headerlink" title="第4章 表达式"></a>第4章 表达式</h1><h2 id="基础（Fundamentals）"><a href="#基础（Fundamentals）" class="headerlink" title="基础（Fundamentals）"></a>基础（Fundamentals）</h2><p>表达式（expression）由一个或多个运算对象（operand）组成，对表达式求值将得到一个结果（result）。字面值和变量是最简单的表达式，其结果就是字面值和变量的值。</p><h3 id="基础概念（Basic-Concepts）"><a href="#基础概念（Basic-Concepts）" class="headerlink" title="基础概念（Basic Concepts）"></a>基础概念（Basic Concepts）</h3><p>C++定义了一元运算符（unary operator）和二元运算符（binary operator）。除此之外，还有一个作用于三个运算对象的三元运算符。函数调用也是一种特殊的运算符，它对运算对象的数量没有限制。</p><p>表达式求值过程中，小整数类型（如<code>bool</code>、<code>char</code>、<code>short</code>等）通常会被提升（promoted）为较大的整数类型，主要是<code>int</code>。</p><p>C++定义了运算符作用于内置类型和复合类型的运算对象时所执行的操作。当运算符作用于类类型的运算对象时，用户可以自定义其含义，这被称作运算符重载（overloaded operator）。</p><p>C++的表达式分为右值（rvalue）和左值（lvalue）。当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值时，用的是对象的地址。需要右值的地方可以用左值代替，反之则不行。</p><ul><li>赋值运算符需要一个非常量左值作为其左侧运算对象，返回结果也是一个左值。</li><li>取地址符作用于左值运算对象，返回指向该运算对象的指针，该指针是一个右值。</li><li>内置解引用运算符、下标运算符、迭代器解引用运算符、<code>string</code>和<code>vector</code>的下标运算符都返回左值。</li><li>内置类型和迭代器的递增递减运算符作用于左值运算对象。前置版本返回左值，后置版本返回右值。</li></ul><p>如果<code>decltype</code>作用于一个求值结果是左值的表达式，会得到引用类型。</p><h3 id="优先级与结合律（Precedence-and-Associativity）"><a href="#优先级与结合律（Precedence-and-Associativity）" class="headerlink" title="优先级与结合律（Precedence and Associativity）"></a>优先级与结合律（Precedence and Associativity）</h3><p>复合表达式（compound expression）指含有两个或多个运算符的表达式。优先级与结合律决定了运算对象的组合方式。</p><p>括号无视优先级与结合律，表达式中括号括起来的部分被当成一个单元来求值，然后再与其他部分一起按照优先级组合。</p><h3 id="求值顺序（Order-of-Evaluation）"><a href="#求值顺序（Order-of-Evaluation）" class="headerlink" title="求值顺序（Order of Evaluation）"></a>求值顺序（Order of Evaluation）</h3><p>对于那些没有指定执行顺序的运算符来说，如果表达式指向并修改了同一个对象，将会引发错误并产生未定义的行为。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 0;cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; ++i &lt;&lt; endl;    &#x2F;&#x2F; undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>处理复合表达式时建议遵循以下两点：</p><ul><li>不确定求值顺序时，使用括号来强制让表达式的组合关系符合程序逻辑的要求。</li><li>如果表达式改变了某个运算对象的值，则在表达式的其他位置不要再使用这个运算对象。</li></ul><p>当改变运算对象的子表达式本身就是另一个子表达式的运算对象时，第二条规则无效。如<code>*++iter</code>，递增运算符改变了<em>iter</em>的值，而改变后的<em>iter</em>又是解引用运算符的运算对象。类似情况下，求值的顺序不会成为问题。</p><h2 id="算术运算符（Arithmetic-Operators）"><a href="#算术运算符（Arithmetic-Operators）" class="headerlink" title="算术运算符（Arithmetic Operators）"></a>算术运算符（Arithmetic Operators）</h2><p>算术运算符（左结合律）：</p><p><img src="Images/4-1.png" alt="4-1"></p><p>在除法运算中，C++语言的早期版本允许结果为负数的商向上或向下取整，C++11新标准则规定商一律向0取整（即直接去除小数部分）。</p><h2 id="逻辑和关系运算符（Logical-and-Relational-Operators）"><a href="#逻辑和关系运算符（Logical-and-Relational-Operators）" class="headerlink" title="逻辑和关系运算符（Logical and Relational Operators）"></a>逻辑和关系运算符（Logical and Relational Operators）</h2><p>关系运算符作用于算术类型和指针类型，逻辑运算符作用于任意能转换成布尔值的类型。逻辑运算符和关系运算符的返回值都是布尔类型。</p><p><img src="Images/4-2.png" alt="4-2"></p><p>逻辑与（logical AND）运算符<code>&amp;&amp;</code>和逻辑或（logical OR）运算符<code>||</code>都是先计算左侧运算对象的值再计算右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会去计算右侧运算对象的值。这种策略称为短路求值（short-circuit evaluation）。</p><ul><li>对于逻辑与运算符来说，当且仅当左侧运算对象为真时才对右侧运算对象求值。</li><li>对于逻辑或运算符来说，当且仅当左侧运算对象为假时才对右侧运算对象求值。</li></ul><p>进行比较运算时，除非比较的对象是布尔类型，否则不要使用布尔字面值<code>true</code>和<code>false</code>作为运算对象。</p><h2 id="赋值运算符（Assignment-Operators）"><a href="#赋值运算符（Assignment-Operators）" class="headerlink" title="赋值运算符（Assignment Operators）"></a>赋值运算符（Assignment Operators）</h2><p>赋值运算符<code>=</code>的左侧运算对象必须是一个可修改的左值。</p><p>C++11新标准允许使用花括号括起来的初始值列表作为赋值语句的右侧运算对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; vi;     &#x2F;&#x2F; initially emptyvi &#x3D; &#123;0,1,2,3,4,5,6,7,8,9&#125;;     &#x2F;&#x2F; vi now has ten elements, values 0 through 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>赋值运算符满足右结合律。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ival, jval;ival &#x3D; jval &#x3D; 0;    &#x2F;&#x2F; ok: each assigned 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为赋值运算符的优先级低于关系运算符的优先级，所以在条件语句中，赋值部分通常应该加上括号。</p><p>不要混淆相等运算符<code>==</code>和赋值运算符<code>=</code>。</p><p>复合赋值运算符包括<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>和<code>|=</code>。任意一种复合运算都完全等价于<em>a = a op b</em>。</p><h2 id="递增和递减运算符（Increment-and-Decrement-Operators）"><a href="#递增和递减运算符（Increment-and-Decrement-Operators）" class="headerlink" title="递增和递减运算符（Increment and Decrement Operators）"></a>递增和递减运算符（Increment and Decrement Operators）</h2><p>递增和递减运算符是为对象加1或减1的简洁书写形式。很多不支持算术运算的迭代器可以使用递增和递减运算符。</p><p>递增和递减运算符分为前置版本和后置版本：</p><ul><li>前置版本首先将运算对象加1（或减1），然后将改变后的对象作为求值结果。</li><li>后置版本也会将运算对象加1（或减1），但求值结果是运算对象改变前的值的副本。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 0, j;j &#x3D; ++i;    &#x2F;&#x2F; j &#x3D; 1, i &#x3D; 1: prefix yields the incremented valuej &#x3D; i++;    &#x2F;&#x2F; j &#x3D; 1, i &#x3D; 2: postfix yields the unincremented value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除非必须，否则不应该使用递增或递减运算符的后置版本。后置版本需要将原始值存储下来以便于返回修改前的内容，如果我们不需要这个值，那么后置版本的操作就是一种浪费。</p><p>在某些语句中混用解引用和递增运算符可以使程序更简洁。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; *iter++ &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="成员访问运算符（The-Member-Access-Operators）"><a href="#成员访问运算符（The-Member-Access-Operators）" class="headerlink" title="成员访问运算符（The Member Access Operators）"></a>成员访问运算符（The Member Access Operators）</h2><p>点运算符<code>.</code>和箭头运算符<code>-&gt;</code>都可以用来访问成员，表达式<code>ptr-&gt;mem</code>等价于<code>(*ptr).mem</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1 &#x3D; &quot;a string&quot;, *p &#x3D; &amp;s1;auto n &#x3D; s1.size();  &#x2F;&#x2F; run the size member of the string s1n &#x3D; (*p).size();    &#x2F;&#x2F; run size on the object to which p pointsn &#x3D; p-&gt;size();      &#x2F;&#x2F; equivalent to (*p).size()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件运算符（The-Conditional-Operator）"><a href="#条件运算符（The-Conditional-Operator）" class="headerlink" title="条件运算符（The Conditional Operator）"></a>条件运算符（The Conditional Operator）</h2><p>条件运算符的使用形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cond ? expr1 : expr2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<em>cond</em>是判断条件的表达式，如果<em>cond</em>为真则对<em>expr1</em>求值并返回该值，否则对<em>expr2</em>求值并返回该值。</p><p>只有当条件运算符的两个表达式都是左值或者能转换成同一种左值类型时，运算的结果才是左值，否则运算的结果就是右值。</p><p>条件运算符可以嵌套，但是考虑到代码的可读性，运算的嵌套层数最好不要超过两到三层。</p><p>条件运算符的优先级非常低，因此当一个长表达式中嵌套了条件运算子表达式时，通常需要在它两端加上括号。</p><h2 id="位运算符（The-Bitwise-Operators）"><a href="#位运算符（The-Bitwise-Operators）" class="headerlink" title="位运算符（The Bitwise Operators）"></a>位运算符（The Bitwise Operators）</h2><p>位运算符（左结合律）：</p><p><img src="Images/4-3.png" alt="4-3"></p><p>在位运算中符号位如何处理并没有明确的规定，所以建议仅将位运算符用于无符号类型的处理。</p><p>左移运算符<code>&lt;&lt;</code>在运算对象右侧插入值为0的二进制位。右移运算符<code>&gt;&gt;</code>的行为依赖于其左侧运算对象的类型：如果该运算对象是无符号类型，在其左侧插入值为0的二进制位；如果是带符号类型，在其左侧插入符号位的副本或者值为0的二进制位，如何选择视具体环境而定。</p><h2 id="sizeof运算符（The-sizeof-Operator）"><a href="#sizeof运算符（The-sizeof-Operator）" class="headerlink" title="sizeof运算符（The sizeof Operator）"></a>sizeof运算符（The sizeof Operator）</h2><p><code>sizeof</code>运算符返回一个表达式或一个类型名字所占的字节数，返回值是<code>size_t</code>类型。</p><p>在<code>sizeof</code>的运算对象中解引用一个无效指针仍然是一种安全的行为，因为指针实际上并没有被真正使用。</p><p><code>sizeof</code>运算符的结果部分依赖于其作用的类型：</p><ul><li>对<code>char</code>或者类型为<code>char</code>的表达式执行<code>sizeof</code>运算，返回值为1。</li><li>对引用类型执行<code>sizeof</code>运算得到被引用对象所占空间的大小。</li><li>对指针执行<code>sizeof</code>运算得到指针本身所占空间的大小。</li><li>对解引用指针执行<code>sizeof</code>运算得到指针指向的对象所占空间的大小，指针不需要有效。</li><li>对数组执行<code>sizeof</code>运算得到整个数组所占空间的大小。</li><li>对<code>string</code>或<code>vector</code>对象执行<code>sizeof</code>运算只返回该类型固定部分的大小，不会计算对象中元素所占空间的大小。</li></ul><h2 id="逗号运算符（Comma-Operator）"><a href="#逗号运算符（Comma-Operator）" class="headerlink" title="逗号运算符（Comma Operator）"></a>逗号运算符（Comma Operator）</h2><p>逗号运算符<code>,</code>含有两个运算对象，按照从左向右的顺序依次求值，最后返回右侧表达式的值。逗号运算符经常用在<code>for</code>循环中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;::size_type cnt &#x3D; ivec.size();&#x2F;&#x2F; assign values from size... 1 to the elements in ivecfor(vector&lt;int&gt;::size_type ix &#x3D; 0; ix !&#x3D; ivec.size(); ++ix, --cnt)    ivec[ix] &#x3D; cnt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型转换（Type-Conversions）"><a href="#类型转换（Type-Conversions）" class="headerlink" title="类型转换（Type Conversions）"></a>类型转换（Type Conversions）</h2><p>无须程序员介入，会自动执行的类型转换叫做隐式转换（implicit conversions）。</p><h3 id="算术转换（Integral-Promotions）"><a href="#算术转换（Integral-Promotions）" class="headerlink" title="算术转换（Integral Promotions）"></a>算术转换（Integral Promotions）</h3><p>把一种算术类型转换成另一种算术类型叫做算术转换。</p><p>整型提升（integral promotions）负责把小整数类型转换成较大的整数类型。</p><h3 id="其他隐式类型转换（Other-Implicit-Conversions）"><a href="#其他隐式类型转换（Other-Implicit-Conversions）" class="headerlink" title="其他隐式类型转换（Other Implicit Conversions）"></a>其他隐式类型转换（Other Implicit Conversions）</h3><p>在大多数表达式中，数组名字自动转换成指向数组首元素的指针。</p><p>常量整数值0或字面值<code>nullptr</code>能转换成任意指针类型；指向任意非常量的指针能转换成<code>void*</code>；指向任意对象的指针能转换成<code>const void*</code>。</p><p>任意一种算术类型或指针类型都能转换成布尔类型。如果指针或算术类型的值为0，转换结果是<code>false</code>，否则是<code>true</code>。</p><p>指向非常量类型的指针能转换成指向相应的常量类型的指针。</p><h3 id="显式转换（Explicit-Conversions）"><a href="#显式转换（Explicit-Conversions）" class="headerlink" title="显式转换（Explicit Conversions）"></a>显式转换（Explicit Conversions）</h3><p>显式类型转换也叫做强制类型转换（cast）。虽然有时不得不使用强制类型转换，但这种方法本质上是非常危险的。建议尽量避免强制类型转换。</p><p>命名的强制类型转换（named cast）形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cast-name&lt;type&gt;(expression);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<em>type</em>是转换的目标类型，<em>expression</em>是要转换的值。如果<em>type</em>是引用类型，则转换结果是左值。<em>cast-name</em>是<code>static_cast</code>、<code>dynamic_cast</code>、<code>const_cast</code>和<code>reinterpret_cast</code>中的一种，用来指定转换的方式。</p><ul><li><code>dynamic_cast</code>支持运行时类型识别。</li><li>任何具有明确定义的类型转换，只要不包含底层<code>const</code>，都能使用<code>static_cast</code>。</li><li><code>const_cast</code>只能改变运算对象的底层<code>const</code>，不能改变表达式的类型。同时也只有<code>const_cast</code>能改变表达式的常量属性。<code>const_cast</code>常常用于函数重载。</li><li><code>reinterpret_cast</code>通常为运算对象的位模式提供底层上的重新解释。</li></ul><p>早期版本的C++语言中，显式类型转换包含两种形式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">type (expression);    &#x2F;&#x2F; function-style cast notation(type) expression;    &#x2F;&#x2F; C-language-style cast notation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-3-strings-vectors-and-arrays/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-3-strings-vectors-and-arrays/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第3章-字符串、向量和数组"><a href="#第3章-字符串、向量和数组" class="headerlink" title="第3章 字符串、向量和数组"></a>第3章 字符串、向量和数组</h1><h2 id="命名空间的using声明（Namespace-using-Declarations）"><a href="#命名空间的using声明（Namespace-using-Declarations）" class="headerlink" title="命名空间的using声明（Namespace using Declarations）"></a>命名空间的using声明（Namespace using Declarations）</h2><p>使用<code>using</code>声明后就无须再通过专门的前缀去获取所需的名字了。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using std::cout;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序中使用的每个名字都需要用独立的<code>using</code>声明引入。</p><p>头文件中通常不应该包含<code>using</code>声明。</p><h2 id="标准库类型string（Library-string-Type）"><a href="#标准库类型string（Library-string-Type）" class="headerlink" title="标准库类型string（Library string Type）"></a>标准库类型string（Library string Type）</h2><p>标准库类型<code>string</code>表示可变长的字符序列，定义在头文件<em>string</em>中。</p><h3 id="定义和初始化string对象（Defining-and-Initializing-strings）"><a href="#定义和初始化string对象（Defining-and-Initializing-strings）" class="headerlink" title="定义和初始化string对象（Defining and Initializing strings）"></a>定义和初始化string对象（Defining and Initializing strings）</h3><p>初始化<code>string</code>的方式：</p><p><img src="Images/3-1.png" alt="3-1"></p><p>如果使用等号初始化一个变量，实际上执行的是拷贝初始化（copy initialization），编译器把等号右侧的初始值拷贝到新创建的对象中去。如果不使用等号，则执行的是直接初始化（direct initialization）。</p><h3 id="string对象上的操作（Operations-on-strings）"><a href="#string对象上的操作（Operations-on-strings）" class="headerlink" title="string对象上的操作（Operations on strings）"></a>string对象上的操作（Operations on strings）</h3><p><code>string</code>的操作：</p><p><img src="Images/3-2.png" alt="3-2"></p><p>在执行读取操作时，<code>string</code>对象会自动忽略开头的空白（空格符、换行符、制表符等）并从第一个真正的字符开始读取，直到遇见下一处空白为止。</p><p>使用<code>getline</code>函数可以读取一整行字符。该函数只要遇到换行符就结束读取并返回结果，如果输入的开始就是一个换行符，则得到空<code>string</code>。触发<code>getline</code>函数返回的那个换行符实际上被丢弃掉了，得到的<code>string</code>对象中并不包含该换行符。</p><p><code>size</code>函数返回<code>string</code>对象的长度，返回值是<code>string::size_type</code>类型，这是一种无符号类型。要使用<code>size_type</code>，必须先指定它是由哪种类型定义的。</p><p>如果一个表达式中已经有了<code>size</code>函数就不要再使用<code>int</code>了，这样可以避免混用<code>int</code>和<code>unsigned int</code>可能带来的问题。</p><p>当把<code>string</code>对象和字符字面值及字符串字面值混合在一条语句中使用时，必须确保每个加法运算符两侧的运算对象中至少有一个是<code>string</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s4 &#x3D; s1 + &quot;, &quot;;          &#x2F;&#x2F; ok: adding a string and a literalstring s5 &#x3D; &quot;hello&quot; + &quot;, &quot;;     &#x2F;&#x2F; error: no string operandstring s6 &#x3D; s1 + &quot;, &quot; + &quot;world&quot;;    &#x2F;&#x2F; ok: each + has a string operand<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了与C兼容，C++语言中的字符串字面值并不是标准库<code>string</code>的对象。</p><h3 id="处理string对象中的字符（Dealing-with-the-Characters-in-a-string）"><a href="#处理string对象中的字符（Dealing-with-the-Characters-in-a-string）" class="headerlink" title="处理string对象中的字符（Dealing with the Characters in a string）"></a>处理string对象中的字符（Dealing with the Characters in a string）</h3><p>头文件<em>cctype</em>中的字符操作函数：</p><p><img src="Images/3-3.png" alt="3-3"></p><p>建议使用C++版本的C标准库头文件。C语言中名称为<em>name.h</em>的头文件，在C++中则被命名为<em>cname</em>。</p><p>C++11提供了范围<code>for</code>（range for）语句，可以遍历给定序列中的每个元素并执行某种操作。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (declaration : expression)    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>expression</em>部分是一个对象，用于表示一个序列。<em>declaration</em>部分负责定义一个变量，该变量被用于访问序列中的基础元素。每次迭代，<em>declaration</em>部分的变量都会被初始化为<em>expression</em>部分的下一个元素值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str(&quot;some string&quot;);&#x2F;&#x2F; print the characters in str one character to a linefor (auto c : str)      &#x2F;&#x2F; for every char in str    cout &lt;&lt; c &lt;&lt; endl;  &#x2F;&#x2F; print the current character followed by a newline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果想在范围<code>for</code>语句中改变<code>string</code>对象中字符的值，必须把循环变量定义成引用类型。</p><p>下标运算符接收的输入参数是<code>string::size_type</code>类型的值，表示要访问字符的位置，返回值是该位置上字符的引用。</p><p>下标数值从0记起，范围是0至<em>size - 1</em>。使用超出范围的下标将引发不可预知的后果。</p><p>C++标准并不要求标准库检测下标是否合法。编程时可以把下标的类型定义为相应的<code>size_type</code>，这是一种无符号数，可以确保下标不会小于0，此时代码只需要保证下标小于<code>size</code>的值就可以了。另一种确保下标合法的有效手段就是使用范围<code>for</code>语句。</p><h2 id="标准库类型vector（Library-vector-Type）"><a href="#标准库类型vector（Library-vector-Type）" class="headerlink" title="标准库类型vector（Library vector Type）"></a>标准库类型vector（Library vector Type）</h2><p>标准库类型<code>vector</code>表示对象的集合，也叫做容器（container），定义在头文件<em>vector</em>中。<code>vector</code>中所有对象的类型都相同，每个对象都有一个索引与之对应并用于访问该对象。</p><p><code>vector</code>是模板（template）而非类型，由<code>vector</code>生成的类型必须包含<code>vector</code>中元素的类型，如<code>vector&lt;int&gt;</code>。</p><p>因为引用不是对象，所以不存在包含引用的<code>vector</code>。</p><p>在早期的C++标准中，如果<code>vector</code>的元素还是<code>vector</code>，定义时必须在外层<code>vector</code>对象的右尖括号和其元素类型之间添加一个空格，如<code>vector&lt;vector&lt;int&gt; &gt;</code>。但是在C++11标准中，可以直接写成<code>vector&lt;vector&lt;int&gt;&gt;</code>，不需要添加空格。</p><h3 id="定义和初始化vector对象（Defining-and-Initializing-vectors）"><a href="#定义和初始化vector对象（Defining-and-Initializing-vectors）" class="headerlink" title="定义和初始化vector对象（Defining and Initializing vectors）"></a>定义和初始化vector对象（Defining and Initializing vectors）</h3><p>初始化<code>vector</code>对象的方法：</p><p><img src="Images/3-4.png" alt="3-4"></p><p>初始化<code>vector</code>对象时如果使用圆括号，可以说提供的值是用来构造（construct）<code>vector</code>对象的；如果使用的是花括号，则是在列表初始化（list initialize）该<code>vector</code>对象。</p><p>可以只提供<code>vector</code>对象容纳的元素数量而省略初始值，此时会创建一个值初始化（value-initialized）的元素初值，并把它赋给容器中的所有元素。这个初值由<code>vector</code>对象中的元素类型决定。</p><h3 id="向vector对象中添加元素（Adding-Elements-to-a-vector）"><a href="#向vector对象中添加元素（Adding-Elements-to-a-vector）" class="headerlink" title="向vector对象中添加元素（Adding Elements to a vector）"></a>向vector对象中添加元素（Adding Elements to a vector）</h3><p><code>push_back</code>函数可以把一个值添加到<code>vector</code>的尾端。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v2;         &#x2F;&#x2F; empty vectorfor (int i &#x3D; 0; i !&#x3D; 100; ++i)    v2.push_back(i);    &#x2F;&#x2F; append sequential integers to v2&#x2F;&#x2F; at end of loop v2 has 100 elements, values 0 . . . 99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>范围<code>for</code>语句体内不应该改变其所遍历序列的大小。</p><h3 id="其他vector操作（Other-vector-Operations）"><a href="#其他vector操作（Other-vector-Operations）" class="headerlink" title="其他vector操作（Other vector Operations）"></a>其他vector操作（Other vector Operations）</h3><p><code>vector</code>支持的操作：</p><p><img src="Images/3-5.png" alt="3-5"></p><p><code>size</code>函数返回<code>vector</code>对象中元素的个数，返回值是由<code>vector</code>定义的<code>size_type</code>类型。<code>vector</code>对象的类型包含其中元素的类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;::size_type  &#x2F;&#x2F; okvector::size_type       &#x2F;&#x2F; error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>vector</code>和<code>string</code>对象的下标运算符只能用来访问已经存在的元素，而不能用来添加元素。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; ivec;   &#x2F;&#x2F; empty vectorfor (decltype(ivec.size()) ix &#x3D; 0; ix !&#x3D; 10; ++ix)&#123;    ivec[ix] &#x3D; ix;  &#x2F;&#x2F; disaster: ivec has no elements    ivec.push_back(ix); &#x2F;&#x2F; ok: adds a new element with value ix&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器介绍（Introducing-Iterators）"><a href="#迭代器介绍（Introducing-Iterators）" class="headerlink" title="迭代器介绍（Introducing Iterators）"></a>迭代器介绍（Introducing Iterators）</h2><p>迭代器的作用和下标类似，但是更加通用。所有标准库容器都可以使用迭代器，但是其中只有少数几种同时支持下标运算符。</p><h3 id="使用迭代器（Using-Iterators）"><a href="#使用迭代器（Using-Iterators）" class="headerlink" title="使用迭代器（Using Iterators）"></a>使用迭代器（Using Iterators）</h3><p>定义了迭代器的类型都拥有<code>begin</code>和<code>end</code>两个成员函数。<code>begin</code>函数返回指向第一个元素的迭代器，<code>end</code>函数返回指向容器“尾元素的下一位置（one past the end）”的迭代器，通常被称作尾后迭代器（off-the-end iterator）或者简称为尾迭代器（end iterator）。尾后迭代器仅是个标记，表示程序已经处理完了容器中的所有元素。迭代器一般为<code>iterator</code>类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; b denotes the first element and e denotes one past the last element in ivecauto b &#x3D; ivec.begin(), e &#x3D; ivec.end();    &#x2F;&#x2F; b and e have the same type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果容器为空，则<code>begin</code>和<code>end</code>返回的是同一个迭代器，都是尾后迭代器。</p><p>标准容器迭代器的运算符：</p><p><img src="Images/3-6.png" alt="3-6"></p><p>因为<code>end</code>返回的迭代器并不实际指向某个元素，所以不能对其进行递增或者解引用的操作。</p><p>在<code>for</code>或者其他循环语句的判断条件中，最好使用<code>!=</code>而不是<code>&lt;</code>。所有标准库容器的迭代器都定义了<code>==</code>和<code>!=</code>，但是只有其中少数同时定义了<code>&lt;</code>运算符。</p><p>如果<code>vector</code>或<code>string</code>对象是常量，则只能使用<code>const_iterator</code>迭代器，该迭代器只能读元素，不能写元素。</p><p><code>begin</code>和<code>end</code>返回的迭代器具体类型由对象是否是常量决定，如果对象是常量，则返回<code>const_iterator</code>；如果对象不是常量，则返回<code>iterator</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v;const vector&lt;int&gt; cv;auto it1 &#x3D; v.begin();   &#x2F;&#x2F; it1 has type vector&lt;int&gt;::iteratorauto it2 &#x3D; cv.begin();  &#x2F;&#x2F; it2 has type vector&lt;int&gt;::const_iterator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>C++11新增了<code>cbegin</code>和<code>cend</code>函数，不论<code>vector</code>或<code>string</code>对象是否为常量，都返回<code>const_iterator</code>迭代器。</p><p>任何可能改变容器对象容量的操作，都会使该对象的迭代器失效。</p><h3 id="迭代器运算（Iterator-Arithmetic）"><a href="#迭代器运算（Iterator-Arithmetic）" class="headerlink" title="迭代器运算（Iterator Arithmetic）"></a>迭代器运算（Iterator Arithmetic）</h3><p><code>vector</code>和<code>string</code>迭代器支持的操作：</p><p><img src="Images/3-7.png" alt="3-7"></p><p><code>difference_type</code>类型用来表示两个迭代器间的距离，这是一种带符号整数类型。</p><h2 id="数组（Arrays）"><a href="#数组（Arrays）" class="headerlink" title="数组（Arrays）"></a>数组（Arrays）</h2><p>数组类似<code>vector</code>，但数组的大小确定不变，不能随意向数组中添加元素。</p><p>如果不清楚元素的确切个数，应该使用<code>vector</code>。</p><h3 id="定义和初始化内置数组（Defining-and-Initializing-Built-in-Arrays）"><a href="#定义和初始化内置数组（Defining-and-Initializing-Built-in-Arrays）" class="headerlink" title="定义和初始化内置数组（Defining and Initializing Built-in Arrays）"></a>定义和初始化内置数组（Defining and Initializing Built-in Arrays）</h3><p>数组是一种复合类型，声明形式为<code>a[d]</code>，其中<em>a</em>是数组名称，<em>d</em>是数组维度（dimension）。维度必须是一个常量表达式。</p><p>默认情况下，数组的元素被默认初始化。</p><p>定义数组的时候必须指定数组的类型，不允许用<code>auto</code>关键字由初始值列表推断类型。</p><p>如果定义数组时提供了元素的初始化列表，则允许省略数组维度，编译器会根据初始值的数量计算维度。但如果显式指明了维度，那么初始值的数量不能超过指定的大小。如果维度比初始值的数量大，则用提供的值初始化数组中靠前的元素，剩下的元素被默认初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const unsigned sz &#x3D; 3;int ia1[sz] &#x3D; &#123;0,1,2&#125;;  &#x2F;&#x2F; array of three ints with values 0, 1, 2int a2[] &#x3D; &#123;0, 1, 2&#125;;   &#x2F;&#x2F; an array of dimension 3int a3[5] &#x3D; &#123;0, 1, 2&#125;;  &#x2F;&#x2F; equivalent to a3[] &#x3D; &#123;0, 1, 2, 0, 0&#125;string a4[3] &#x3D; &#123;&quot;hi&quot;, &quot;bye&quot;&#125;;   &#x2F;&#x2F; same as a4[] &#x3D; &#123;&quot;hi&quot;, &quot;bye&quot;, &quot;&quot;&#125;int a5[2] &#x3D; &#123;0,1,2&#125;;    &#x2F;&#x2F; error: too many initializers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用字符串字面值初始化字符数组，但字符串字面值结尾处的空字符也会一起被拷贝到字符数组中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char a1[] &#x3D; &#123;&#39;C&#39;, &#39;+&#39;, &#39;+&#39;&#125;;        &#x2F;&#x2F; list initialization, no nullchar a2[] &#x3D; &#123;&#39;C&#39;, &#39;+&#39;, &#39;+&#39;, &#39;\0&#39;&#125;;  &#x2F;&#x2F; list initialization, explicit nullchar a3[] &#x3D; &quot;C++&quot;;      &#x2F;&#x2F; null terminator added automaticallyconst char a4[6] &#x3D; &quot;Daniel&quot;;    &#x2F;&#x2F; error: no space for the null!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不能用一个数组初始化或直接赋值给另一个数组。</p><p>从数组的名字开始由内向外阅读有助于理解复杂数组声明的含义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *ptrs[10];              &#x2F;&#x2F; ptrs is an array of ten pointers to intint &amp;refs[10] &#x3D; &#x2F;* ? *&#x2F;;    &#x2F;&#x2F; error: no arrays of referencesint (*Parray)[10] &#x3D; &amp;arr;   &#x2F;&#x2F; Parray points to an array of ten intsint (&amp;arrRef)[10] &#x3D; arr;    &#x2F;&#x2F; arrRef refers to an array of ten ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问数组元素（Accessing-the-Elements-of-an-Array）"><a href="#访问数组元素（Accessing-the-Elements-of-an-Array）" class="headerlink" title="访问数组元素（Accessing the Elements of an Array）"></a>访问数组元素（Accessing the Elements of an Array）</h3><p>数组下标通常被定义成<code>size_t</code>类型，这是一种机器相关的无符号类型，可以表示内存中任意对象的大小。<code>size_t</code>定义在头文件<em>cstddef</em>中。</p><p>大多数常见的安全问题都源于缓冲区溢出错误。当数组或其他类似数据结构的下标越界并试图访问非法内存区域时，就会产生此类错误。</p><h3 id="指针和数组（Pointers-and-Arrays）"><a href="#指针和数组（Pointers-and-Arrays）" class="headerlink" title="指针和数组（Pointers and Arrays）"></a>指针和数组（Pointers and Arrays）</h3><p>在大多数表达式中，使用数组类型的对象其实是在使用一个指向该数组首元素的指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string nums[] &#x3D; &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;;    &#x2F;&#x2F; array of stringsstring *p &#x3D; &amp;nums[0];   &#x2F;&#x2F; p points to the first element in numsstring *p2 &#x3D; nums;      &#x2F;&#x2F; equivalent to p2 &#x3D; &amp;nums[0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一维数组寻址公式：</p><p><img src="Images/3-8.png" alt="3-8"></p><p>当使用数组作为一个<code>auto</code>变量的初始值时，推断得到的类型是指针而非数组。但<code>decltype</code>关键字不会发生这种转换，直接返回数组类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ia[] &#x3D; &#123;0,1,2,3,4,5,6,7,8,9&#125;;   &#x2F;&#x2F; ia is an array of ten intsauto ia2(ia);   &#x2F;&#x2F; ia2 is an int* that points to the first element in iaia2 &#x3D; 42;       &#x2F;&#x2F; error: ia2 is a pointer, and we can&#39;t assign an int to a pointerauto ia2(&amp;ia[0]);   &#x2F;&#x2F; now it&#39;s clear that ia2 has type int*&#x2F;&#x2F; ia3 is an array of ten intsdecltype(ia) ia3 &#x3D; &#123;0,1,2,3,4,5,6,7,8,9&#125;;ia3 &#x3D; p;    &#x2F;&#x2F; error: can&#39;t assign an int* to an arrayia3[4] &#x3D; i;     &#x2F;&#x2F; ok: assigns the value of i to an element in ia3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++11在头文件<em>iterator</em>中定义了两个名为<code>begin</code>和<code>end</code>的函数，功能与容器中的两个同名成员函数类似，参数是一个数组。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ia[] &#x3D; &#123;0,1,2,3,4,5,6,7,8,9&#125;;   &#x2F;&#x2F; ia is an array of ten intsint *beg &#x3D; begin(ia);   &#x2F;&#x2F; pointer to the first element in iaint *last &#x3D; end(ia);    &#x2F;&#x2F; pointer one past the last element in ia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两个指针相减的结果类型是<code>ptrdiff_t</code>，这是一种定义在头文件<em>cstddef</em>中的带符号类型。</p><p>标准库类型限定使用的下标必须是无符号类型，而内置的下标运算无此要求。</p><h3 id="C风格字符串（C-Style-Character-Strings）"><a href="#C风格字符串（C-Style-Character-Strings）" class="headerlink" title="C风格字符串（C-Style Character Strings）"></a>C风格字符串（C-Style Character Strings）</h3><p>C风格字符串是将字符串存放在字符数组中，并以空字符结束（null terminated）。这不是一种类型，而是一种为了表达和使用字符串而形成的书写方法。</p><p>C++标准支持C风格字符串，但是最好不要在C++程序中使用它们。对大多数程序来说，使用标准库<code>string</code>要比使用C风格字符串更加安全和高效。</p><p>C风格字符串的函数：</p><p><img src="Images/3-9.png" alt="3-9"></p><p>C风格字符串函数不负责验证其参数的正确性，传入此类函数的指针必须指向以空字符作为结尾的数组。</p><h3 id="与旧代码的接口（Interfacing-to-Older-Code）"><a href="#与旧代码的接口（Interfacing-to-Older-Code）" class="headerlink" title="与旧代码的接口（Interfacing to Older Code）"></a>与旧代码的接口（Interfacing to Older Code）</h3><p>任何出现字符串字面值的地方都可以用以空字符结束的字符数组来代替：</p><ul><li>允许使用以空字符结束的字符数组来初始化<code>string</code>对象或为<code>string</code>对象赋值。</li><li>在<code>string</code>对象的加法运算中，允许使用以空字符结束的字符数组作为其中一个运算对象（不能两个运算对象都是）。</li><li>在<code>string</code>对象的复合赋值运算中，允许使用以空字符结束的字符数组作为右侧运算对象。</li></ul><p>不能用<code>string</code>对象直接初始化指向字符的指针。为了实现该功能，<code>string</code>提供了一个名为<code>c_str</code>的成员函数，返回<code>const char*</code>类型的指针，指向一个以空字符结束的字符数组，数组的数据和<code>string</code>对象一样。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s(&quot;Hello World&quot;);    &#x2F;&#x2F; s holds Hello Worldchar *str &#x3D; s;  &#x2F;&#x2F; error: can&#39;t initialize a char* from a stringconst char *str &#x3D; s.c_str();    &#x2F;&#x2F; ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>针对<code>string</code>对象的后续操作有可能会让<code>c_str</code>函数之前返回的数组失去作用，如果程序想一直都能使用其返回的数组，最好将该数组重新拷贝一份。</p><p>可以使用数组来初始化<code>vector</code>对象，但是需要指明要拷贝区域的首元素地址和尾后地址。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int int_arr[] &#x3D; &#123;0, 1, 2, 3, 4, 5&#125;;&#x2F;&#x2F; ivec has six elements; each is a copy of the corresponding element in int_arrvector&lt;int&gt; ivec(begin(int_arr), end(int_arr));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在新版本的C++程序中应该尽量使用<code>vector</code>、<code>string</code>和迭代器，避免使用内置数组、C风格字符串和指针。</p><h2 id="多维数组（Multidimensional-Arrays）"><a href="#多维数组（Multidimensional-Arrays）" class="headerlink" title="多维数组（Multidimensional Arrays）"></a>多维数组（Multidimensional Arrays）</h2><p>C++中的多维数组其实就是数组的数组。当一个数组的元素仍然是数组时，通常需要用两个维度定义它：一个维度表示数组本身的大小，另一个维度表示其元素（也是数组）的大小。通常把二维数组的第一个维度称作行，第二个维度称作列。</p><p>多维数组初始化的几种方式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ia[3][4] &#x3D;&#123;   &#x2F;&#x2F; three elements; each element is an array of size 4    &#123;0, 1, 2, 3&#125;,   &#x2F;&#x2F; initializers for the row indexed by 0    &#123;4, 5, 6, 7&#125;,   &#x2F;&#x2F; initializers for the row indexed by 1    &#123;8, 9, 10, 11&#125;  &#x2F;&#x2F; initializers for the row indexed by 2&#125;;&#x2F;&#x2F; equivalent initialization without the optional nested braces for each rowint ib[3][4] &#x3D; &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11&#125;;&#x2F;&#x2F; explicitly initialize only element 0 in each rowint ic[3][4] &#x3D; &#123;&#123; 0 &#125;, &#123; 4 &#125;, &#123; 8 &#125;&#125;;&#x2F;&#x2F; explicitly initialize row 0; the remaining elements are value initializedint id[3][4] &#x3D; &#123;0, 3, 6, 9&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用下标访问多维数组的元素，数组的每个维度对应一个下标运算符。如果表达式中下标运算符的数量和数组维度一样多，则表达式的结果是给定类型的元素。如果下标运算符数量比数组维度小，则表达式的结果是给定索引处的一个内层数组。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; assigns the first element of arr to the last element in the last row of iaia[2][3] &#x3D; arr[0][0][0];int (&amp;row)[4] &#x3D; ia[1];  &#x2F;&#x2F; binds row to the second four-element array in ia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多维数组寻址公式：</p><p><img src="Images/3-10.png" alt="3-10"></p><p>使用范围<code>for</code>语句处理多维数组时，为了避免数组被自动转换成指针，语句中的外层循环控制变量必须声明成引用类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (const auto &amp;row : ia)  &#x2F;&#x2F; for every element in the outer array    for (auto col : row)    &#x2F;&#x2F; for every element in the inner array        cout &lt;&lt; col &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果<em>row</em>不是引用类型，编译器初始化<em>row</em>时会自动将数组形式的元素转换成指向该数组内首元素的指针，这样得到的<em>row</em>就是<code>int*</code>类型，而之后的内层循环则试图在一个<code>int*</code>内遍历，程序将无法通过编译。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (auto row : ia)    for (auto col : row)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用范围<code>for</code>语句处理多维数组时，除了最内层的循环，其他所有外层循环的控制变量都应该定义成引用类型。</p><p>因为多维数组实际上是数组的数组，所以由多维数组名称转换得到的指针指向第一个内层数组。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ia[3][4];       &#x2F;&#x2F; array of size 3; each element is an array of ints of size 4int (*p)[4] &#x3D; ia;   &#x2F;&#x2F; p points to an array of four intsp &#x3D; &amp;ia[2];         &#x2F;&#x2F; p now points to the last element in ia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>声明指向数组类型的指针时，必须带有圆括号。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *ip[4];     &#x2F;&#x2F; array of pointers to intint (*ip)[4];   &#x2F;&#x2F; pointer to an array of four ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>auto</code>和<code>decltype</code>能省略复杂的指针定义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; print the value of each element in ia, with each inner array on its own line&#x2F;&#x2F; p points to an array of four intsfor (auto p &#x3D; ia; p !&#x3D; ia + 3; ++p)&#123;    &#x2F;&#x2F; q points to the first element of an array of four ints; that is, q points to an int    for (auto q &#x3D; *p; q !&#x3D; *p + 4; ++q)        cout &lt;&lt; *q &lt;&lt; &#39; &#39;;    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-2-variables-and-basic-types/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-2-variables-and-basic-types/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-变量和基本类型"><a href="#第2章-变量和基本类型" class="headerlink" title="第2章 变量和基本类型"></a>第2章 变量和基本类型</h1><h2 id="基本内置类型（Primitive-Built-in-Types）"><a href="#基本内置类型（Primitive-Built-in-Types）" class="headerlink" title="基本内置类型（Primitive Built-in Types）"></a>基本内置类型（Primitive Built-in Types）</h2><h3 id="算数类型（Arithmetic-Types）"><a href="#算数类型（Arithmetic-Types）" class="headerlink" title="算数类型（Arithmetic Types）"></a>算数类型（Arithmetic Types）</h3><p>算数类型分为两类：整型（integral type）、浮点型（floating-point type）。</p><p><img src="Images/2-1.png" alt="2-1"></p><p><code>bool</code>类型的取值是<code>true</code>或<code>false</code>。</p><p>一个<code>char</code>的大小和一个机器字节一样，确保可以存放机器基本字符集中任意字符对应的数字值。<code>wchar_t</code>确保可以存放机器最大扩展字符集中的任意一个字符。</p><p>在整型类型大小方面，C++规定<code>short</code> ≤ <code>int</code> ≤ <code>long</code> ≤ <code>long long</code>（<code>long long</code>是C++11定义的类型）。</p><p>浮点型可表示单精度（single-precision）、双精度（double-precision）和扩展精度（extended-precision）值，分别对应<code>float</code>、<code>double</code>和<code>long double</code>类型。</p><p>除去布尔型和扩展字符型，其他整型可以分为带符号（signed）和无符号（unsigned）两种。带符号类型可以表示正数、负数和0，无符号类型只能表示大于等于0的数值。类型<code>int</code>、<code>short</code>、<code>long</code>和<code>long long</code>都是带符号的，在类型名前面添加<code>unsigned</code>可以得到对应的无符号类型，如<code>unsigned int</code>。</p><p>字符型分为<code>char</code>、<code>signed char</code>和<code>unsigned char</code>三种，但是表现形式只有带符号和无符号两种。类型<code>char</code>和<code>signed char</code>并不一样， <code>char</code>的具体形式由编译器（compiler）决定。</p><p>如何选择算数类型：</p><ul><li><p>当明确知晓数值不可能为负时，应该使用无符号类型。</p></li><li><p>使用<code>int</code>执行整数运算，如果数值超过了<code>int</code>的表示范围，应该使用<code>long long</code>类型。</p></li><li><p>在算数表达式中不要使用<code>char</code>和<code>bool</code>类型。如果需要使用一个不大的整数，应该明确指定它的类型是<code>signed char</code>还是<code>unsigned char</code>。</p></li><li><p>执行浮点数运算时建议使用<code>double</code>类型。</p></li></ul><h3 id="类型转换（Type-Conversions）"><a href="#类型转换（Type-Conversions）" class="headerlink" title="类型转换（Type Conversions）"></a>类型转换（Type Conversions）</h3><p>进行类型转换时，类型所能表示的值的范围决定了转换的过程。</p><ul><li>把非布尔类型的算术值赋给布尔类型时，初始值为0则结果为<code>false</code>，否则结果为<code>true</code>。</li><li>把布尔值赋给非布尔类型时，初始值为<code>false</code>则结果为0，初始值为<code>true</code>则结果为1。</li><li>把浮点数赋给整数类型时，进行近似处理，结果值仅保留浮点数中的整数部分。</li><li>把整数值赋给浮点类型时，小数部分记为0。如果该整数所占的空间超过了浮点类型的容量，精度可能有损失。</li><li>赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数（8比特大小的<code>unsigned char</code>能表示的数值总数是256）取模后的余数。</li><li>赋给带符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。</li></ul><p>避免无法预知和依赖于实现环境的行为。</p><p>无符号数不会小于0这一事实关系到循环的写法。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; WRONG: u can never be less than 0; the condition will always succeedfor (unsigned u &#x3D; 10; u &gt;&#x3D; 0; --u)    std::cout &lt;&lt; u &lt;&lt; std::endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当<em>u</em>等于0时，*–u*的结果将会是4294967295。一种解决办法是用<code>while</code>语句来代替<code>for</code>语句，前者可以在输出变量前先减去1。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unsigned u &#x3D; 11;    &#x2F;&#x2F; start the loop one past the first element we want to printwhile (u &gt; 0)&#123;    --u;    &#x2F;&#x2F; decrement first, so that the last iteration will print 0    std::cout &lt;&lt; u &lt;&lt; std::endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不要混用带符号类型和无符号类型。</p><h3 id="字面值常量（Literals）"><a href="#字面值常量（Literals）" class="headerlink" title="字面值常量（Literals）"></a>字面值常量（Literals）</h3><p>以<code>0</code>开头的整数代表八进制（octal）数，以<code>0x</code>或<code>0X</code>开头的整数代表十六进制（hexadecimal）数。在C++14中，<code>0b</code>或<code>0B</code>开头的整数代表二进制（binary）数。</p><p>整型字面值具体的数据类型由它的值和符号决定。</p><p>C++14新增了单引号<code>&#39;</code>形式的数字分隔符。数字分隔符不会影响数字的值，但可以通过分隔符将数字分组，使数值读写更容易。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 按照书写形式，每3位分为一组std::cout &lt;&lt; 0B1&#39;101;   &#x2F;&#x2F; 输出&quot;13&quot;std::cout &lt;&lt; 1&#39;100&#39;000; &#x2F;&#x2F; 输出&quot;1100000&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浮点型字面值默认是一个<code>double</code>。</p><p>由单引号括起来的一个字符称为<code>char</code>型字面值，双引号括起来的零个或多个字符称为字符串字面值。</p><p>字符串字面值的类型是由常量字符构成的数组（array）。编译器在每个字符串的结尾处添加一个空字符<code>&#39;\0&#39;</code>，因此字符串字面值的实际长度要比它的内容多一位。</p><p>转义序列：</p><table><thead><tr><th align="center">含义</th><th align="center">转义字符</th></tr></thead><tbody><tr><td align="center">newline</td><td align="center"><code>\n</code></td></tr><tr><td align="center">horizontal tab</td><td align="center"><code>\t</code></td></tr><tr><td align="center">alert (bell)</td><td align="center"><code>\a</code></td></tr><tr><td align="center">vertical tab</td><td align="center"><code>\v</code></td></tr><tr><td align="center">backspace</td><td align="center"><code>\b</code></td></tr><tr><td align="center">double quote</td><td align="center"><code>\&quot;</code></td></tr><tr><td align="center">backslash</td><td align="center"><code>\\</code></td></tr><tr><td align="center">question mark</td><td align="center"><code>\?</code></td></tr><tr><td align="center">single quote</td><td align="center"><code>\&#39;</code></td></tr><tr><td align="center">carriage return</td><td align="center"><code>\r</code></td></tr><tr><td align="center">formfeed</td><td align="center"><code>\f</code></td></tr></tbody></table><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::cout &lt;&lt; &#39;\n&#39;;      &#x2F;&#x2F; prints a newlinestd::cout &lt;&lt; &quot;\tHi!\n&quot;; &#x2F;&#x2F; prints a tab followd by &quot;Hi!&quot; and a newline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>泛化转义序列的形式是<code>\x</code>后紧跟1个或多个十六进制数字，或者<code>\</code>后紧跟1个、2个或3个八进制数字，其中数字部分表示字符对应的数值。如果<code>\</code>后面跟着的八进制数字超过3个，则只有前3个数字与<code>\</code>构成转义序列。相反，<code>\x</code>要用到后面跟着的所有数字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::cout &lt;&lt; &quot;Hi \x4dO\115!\n&quot;; &#x2F;&#x2F; prints Hi MOM! followed by a newlinestd::cout &lt;&lt; &#39;\115&#39; &lt;&lt; &#39;\n&#39;;    &#x2F;&#x2F; prints M followed by a newline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加特定的前缀和后缀，可以改变整型、浮点型和字符型字面值的默认类型。</p><p><img src="Images/2-2.png" alt="2-2"></p><p>使用一个长整型字面值时，最好使用大写字母<code>L</code>进行标记，小写字母<code>l</code>和数字<code>1</code>容易混淆。</p><h2 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h2><h3 id="变量定义（Variable-Definitions）"><a href="#变量定义（Variable-Definitions）" class="headerlink" title="变量定义（Variable Definitions）"></a>变量定义（Variable Definitions）</h3><p>变量定义的基本形式：类型说明符（type specifier）后紧跟由一个或多个变量名组成的列表，其中变量名以逗号分隔，最后以分号结束。定义时可以为一个或多个变量赋初始值（初始化，initialization）。</p><p>初始化不等于赋值（assignment）。初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦除，再用一个新值来替代。</p><p>用花括号初始化变量称为列表初始化（list initialization）。当用于内置类型的变量时，如果使用了列表初始化并且初始值存在丢失信息的风险，则编译器会报错。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">long double ld &#x3D; 3.1415926536;int a&#123;ld&#125;, b &#x3D; &#123;ld&#125;;    &#x2F;&#x2F; error: narrowing conversion requiredint c(ld), d &#x3D; ld;      &#x2F;&#x2F; ok: but value will be truncated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果定义变量时未指定初值，则变量被默认初始化（default initialized）。</p><p>对于内置类型，定义于任何函数体之外的变量被初始化为0，函数体内部的变量将不被初始化（uninitialized）。</p><p>定义于函数体内的内置类型对象如果没有初始化，则其值未定义，使用该类值是一种错误的编程行为且很难调试。类的对象如果没有显式初始化，则其值由类确定。</p><p>建议初始化每一个内置类型的变量。</p><h3 id="变量声明和定义的关系（Variable-Declarations-and-Definitions）"><a href="#变量声明和定义的关系（Variable-Declarations-and-Definitions）" class="headerlink" title="变量声明和定义的关系（Variable Declarations and Definitions）"></a>变量声明和定义的关系（Variable Declarations and Definitions）</h3><p>声明（declaration）使得名字为程序所知。一个文件如果想使用其他地方定义的名字，则必须先包含对那个名字的声明。</p><p>定义（definition）负责创建与名字相关联的实体。</p><p>如果想声明一个变量而不定义它，就在变量名前添加关键字<code>extern</code>，并且不要显式地初始化变量。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">extern int i; &#x2F;&#x2F; declares but does not define iint j;      &#x2F;&#x2F; declares and defines j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>extern</code>语句如果包含了初始值就不再是声明了，而变成了定义。</p><p>变量能且只能被定义一次，但是可以被声明多次。</p><p>如果要在多个文件中使用同一个变量，就必须将声明和定义分开。此时变量的定义必须出现且只能出现在一个文件中，其他使用该变量的文件必须对其进行声明，但绝对不能重复定义。</p><h3 id="标识符（Identifiers）"><a href="#标识符（Identifiers）" class="headerlink" title="标识符（Identifiers）"></a>标识符（Identifiers）</h3><p>C++的标识符由字母、数字和下划线组成，其中必须以字母或下划线开头。标识符的长度没有限制，但是对大小写字母敏感。C++为标准库保留了一些名字。用户自定义的标识符不能连续出现两个下划线，也不能以下划线紧连大写字母开头。此外，定义在函数体外的标识符不能以下划线开头。</p><p><img src="Images/2-3.png" alt="2-3"></p><h3 id="名字的作用域（Scope-of-a-Name）"><a href="#名字的作用域（Scope-of-a-Name）" class="headerlink" title="名字的作用域（Scope of a Name）"></a>名字的作用域（Scope of a Name）</h3><p>定义在函数体之外的名字拥有全局作用域（global scope）。声明之后，该名字在整个程序范围内都可使用。</p><p>最好在第一次使用变量时再去定义它。这样做更容易找到变量的定义位置，并且也可以赋给它一个比较合理的初始值。</p><p>作用域中一旦声明了某个名字，在它所嵌套着的所有作用域中都能访问该名字。同时，允许在内层作用域中重新定义外层作用域已有的名字，此时内层作用域中新定义的名字将屏蔽外层作用域的名字。</p><p>可以用作用域操作符<code>::</code>来覆盖默认的作用域规则。因为全局作用域本身并没有名字，所以当作用域操作符的左侧为空时，会向全局作用域发出请求获取作用域操作符右侧名字对应的变量。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;&#x2F;&#x2F; Program for illustration purposes only: It is bad style for a function&#x2F;&#x2F; to use a global variable and also define a local variable with the same nameint reused &#x3D; 42;    &#x2F;&#x2F; reused has global scopeint main()&#123;    int unique &#x3D; 0; &#x2F;&#x2F; unique has block scope    &#x2F;&#x2F; output #1: uses global reused; prints 42 0    std::cout &lt;&lt; reused &lt;&lt; &quot; &quot; &lt;&lt; unique &lt;&lt; std::endl;    int reused &#x3D; 0; &#x2F;&#x2F; new, local object named reused hides global reused    &#x2F;&#x2F; output #2: uses local reused; prints 0 0    std::cout &lt;&lt; reused &lt;&lt; &quot; &quot; &lt;&lt; unique &lt;&lt; std::endl;    &#x2F;&#x2F; output #3: explicitly requests the global reused; prints 42 0    std::cout &lt;&lt; ::reused &lt;&lt; &quot; &quot; &lt;&lt; unique &lt;&lt; std::endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果函数有可能用到某个全局变量，则不宜再定义一个同名的局部变量。</p><h2 id="复合类型（Compound-Type）"><a href="#复合类型（Compound-Type）" class="headerlink" title="复合类型（Compound Type）"></a>复合类型（Compound Type）</h2><h3 id="引用（References）"><a href="#引用（References）" class="headerlink" title="引用（References）"></a>引用（References）</h3><p>引用为对象起了另外一个名字，引用类型引用（refers to）另外一种类型。通过将声明符写成<code>&amp;d</code>的形式来定义引用类型，其中<em>d</em>是变量名称。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ival &#x3D; 1024;int &amp;refVal &#x3D; ival; &#x2F;&#x2F; refVal refers to (is another name for) ivalint &amp;refVal2;       &#x2F;&#x2F; error: a reference must be initialized<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义引用时，程序把引用和它的初始值绑定（bind）在一起，而不是将初始值拷贝给引用。一旦初始化完成，将无法再令引用重新绑定到另一个对象，因此引用必须初始化。</p><p>引用不是对象，它只是为一个已经存在的对象所起的另外一个名字。</p><p>声明语句中引用的类型实际上被用于指定它所绑定的对象类型。大部分情况下，引用的类型要和与之绑定的对象严格匹配。</p><p>引用只能绑定在对象上，不能与字面值或某个表达式的计算结果绑定在一起。</p><h3 id="指针（Pointer）"><a href="#指针（Pointer）" class="headerlink" title="指针（Pointer）"></a>指针（Pointer）</h3><p>与引用类似，指针也实现了对其他对象的间接访问。</p><ul><li>指针本身就是一个对象，允许对指针赋值和拷贝，而且在生命周期内它可以先后指向不同的对象。</li><li>指针无须在定义时赋初值。和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值。</li></ul><p>通过将声明符写成<code>*d</code>的形式来定义指针类型，其中<em>d</em>是变量名称。如果在一条语句中定义了多个指针变量，则每个量前都必须有符号<code>*</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *ip1, *ip2;     &#x2F;&#x2F; both ip1 and ip2 are pointers to intdouble dp, *dp2;    &#x2F;&#x2F; dp2 is a pointer to double; dp is a double<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指针存放某个对象的地址，要想获取对象的地址，需要使用取地址符<code>&amp;</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ival &#x3D; 42;int *p &#x3D; &amp;ival; &#x2F;&#x2F; p holds the address of ival; p is a pointer to ival<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为引用不是对象，没有实际地址，所以不能定义指向引用的指针。</p><p>声明语句中指针的类型实际上被用于指定它所指向的对象类型。大部分情况下，指针的类型要和它指向的对象严格匹配。</p><p>指针的值（即地址）应属于下列状态之一：</p><ul><li>指向一个对象。</li><li>指向紧邻对象所占空间的下一个位置。</li><li>空指针，即指针没有指向任何对象。</li><li>无效指针，即上述情况之外的其他值。</li></ul><p>试图拷贝或以其他方式访问无效指针的值都会引发错误。</p><p>如果指针指向一个对象，可以使用解引用（dereference）符<code>*</code>来访问该对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ival &#x3D; 42;int *p &#x3D; &amp;ival; &#x2F;&#x2F; p holds the address of ival; p is a pointer to ivalcout &lt;&lt; *p;     &#x2F;&#x2F; * yields the object to which p points; prints 42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>给解引用的结果赋值就是给指针所指向的对象赋值。</p><p>解引用操作仅适用于那些确实指向了某个对象的有效指针。</p><p>空指针（null pointer）不指向任何对象，在试图使用一个指针前代码可以先检查它是否为空。得到空指针最直接的办法是用字面值<code>nullptr</code>来初始化指针。</p><p>旧版本程序通常使用<code>NULL</code>（预处理变量，定义于头文件<em>cstdlib</em>中，值为0）给指针赋值，但在C++11中，最好使用<code>nullptr</code>初始化空指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *p1 &#x3D; nullptr;  &#x2F;&#x2F; equivalent to int *p1 &#x3D; 0;int *p2 &#x3D; 0;        &#x2F;&#x2F; directly initializes p2 from the literal constant 0&#x2F;&#x2F; must #include cstdlibint *p3 &#x3D; NULL;     &#x2F;&#x2F; equivalent to int *p3 &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>建议初始化所有指针。</p><p><code>void*</code>是一种特殊的指针类型，可以存放任意对象的地址，但不能直接操作<code>void*</code>指针所指的对象。</p><h3 id="理解复合类型的声明（Understanding-Compound-Type-Declarations）"><a href="#理解复合类型的声明（Understanding-Compound-Type-Declarations）" class="headerlink" title="理解复合类型的声明（Understanding Compound Type Declarations）"></a>理解复合类型的声明（Understanding Compound Type Declarations）</h3><p>指向指针的指针（Pointers to Pointers）：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ival &#x3D; 1024;int *pi &#x3D; &amp;ival;    &#x2F;&#x2F; pi points to an intint **ppi &#x3D; &amp;pi;    &#x2F;&#x2F; ppi points to a pointer to an int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="Images/2-4.png" alt="2-4"></p><p>指向指针的引用（References to Pointers）：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int i &#x3D; 42;int *p;         &#x2F;&#x2F; p is a pointer to intint *&amp;r &#x3D; p;    &#x2F;&#x2F; r is a reference to the pointer pr &#x3D; &amp;i;         &#x2F;&#x2F; r refers to a pointer; assigning &amp;i to r makes p point to i*r &#x3D; 0;         &#x2F;&#x2F; dereferencing r yields i, the object to which p points; changes i to 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面对一条比较复杂的指针或引用的声明语句时，从右向左阅读有助于弄清它的真实含义。</p><h2 id="const限定符（Const-Qualifier）"><a href="#const限定符（Const-Qualifier）" class="headerlink" title="const限定符（Const Qualifier）"></a>const限定符（Const Qualifier）</h2><p>在变量类型前添加关键字<code>const</code>可以创建值不能被改变的对象。<code>const</code>变量必须被初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int bufSize &#x3D; 512;    &#x2F;&#x2F; input buffer sizebufSize &#x3D; 512;      &#x2F;&#x2F; error: attempt to write to const object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，<code>const</code>对象被设定成仅在文件内有效。当多个文件中出现了同名的<code>const</code>变量时，其实等同于在不同文件中分别定义了独立的变量。</p><p>如果想在多个文件间共享<code>const</code>对象：</p><ul><li><p>若<code>const</code>对象的值在编译时已经确定，则应该定义在头文件中。其他源文件包含该头文件时，不会产生重复定义错误。</p></li><li><p>若<code>const</code>对象的值直到运行时才能确定，则应该在头文件中声明，在源文件中定义。此时<code>const</code>变量的声明和定义前都应该添加<code>extern</code>关键字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; file_1.cc defines and initializes a const that is accessible to other filesextern const int bufSize &#x3D; fcn();&#x2F;&#x2F; file_1.hextern const int bufSize;   &#x2F;&#x2F; same bufSize as defined in file_1.cc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="const的引用（References-to-const）"><a href="#const的引用（References-to-const）" class="headerlink" title="const的引用（References to const）"></a>const的引用（References to const）</h3><p>把引用绑定在<code>const</code>对象上即为对常量的引用（reference to const）。对常量的引用不能被用作修改它所绑定的对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int ci &#x3D; 1024;const int &amp;r1 &#x3D; ci;     &#x2F;&#x2F; ok: both reference and underlying object are constr1 &#x3D; 42;        &#x2F;&#x2F; error: r1 is a reference to constint &amp;r2 &#x3D; ci;   &#x2F;&#x2F; error: non const reference to a const object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>大部分情况下，引用的类型要和与之绑定的对象严格匹配。但是有两个例外：</p><ul><li><p>初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 42;const int &amp;r1 &#x3D; i;      &#x2F;&#x2F; we can bind a const int&amp; to a plain int objectconst int &amp;r2 &#x3D; 42;     &#x2F;&#x2F; ok: r1 is a reference to constconst int &amp;r3 &#x3D; r1 * 2;     &#x2F;&#x2F; ok: r3 is a reference to constint &amp;r4 &#x3D; r * 2;        &#x2F;&#x2F; error: r4 is a plain, non const reference<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>允许为一个常量引用绑定非常量的对象、字面值或者一般表达式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double dval &#x3D; 3.14;const int &amp;ri &#x3D; dval;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="指针和const（Pointers-and-const）"><a href="#指针和const（Pointers-and-const）" class="headerlink" title="指针和const（Pointers and const）"></a>指针和const（Pointers and const）</h3><p>指向常量的指针（pointer to const）不能用于修改其所指向的对象。常量对象的地址只能使用指向常量的指针来存放，但是指向常量的指针可以指向一个非常量对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const double pi &#x3D; 3.14;     &#x2F;&#x2F; pi is const; its value may not be changeddouble *ptr &#x3D; &amp;pi;          &#x2F;&#x2F; error: ptr is a plain pointerconst double *cptr &#x3D; &amp;pi;   &#x2F;&#x2F; ok: cptr may point to a double that is const*cptr &#x3D; 42;         &#x2F;&#x2F; error: cannot assign to *cptrdouble dval &#x3D; 3.14; &#x2F;&#x2F; dval is a double; its value can be changedcptr &#x3D; &amp;dval;       &#x2F;&#x2F; ok: but can&#39;t change dval through cptr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义语句中把<code>*</code>放在<code>const</code>之前用来说明指针本身是一个常量，常量指针（const pointer）必须初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int errNumb &#x3D; 0;int *const curErr &#x3D; &amp;errNumb;   &#x2F;&#x2F; curErr will always point to errNumbconst double pi &#x3D; 3.14159;const double *const pip &#x3D; &amp;pi;  &#x2F;&#x2F; pip is a const pointer to a const object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>指针本身是常量并不代表不能通过指针修改其所指向的对象的值，能否这样做完全依赖于其指向对象的类型。</p><h3 id="顶层const（Top-Level-const）"><a href="#顶层const（Top-Level-const）" class="headerlink" title="顶层const（Top-Level const）"></a>顶层const（Top-Level const）</h3><p>顶层<code>const</code>表示指针本身是个常量，底层<code>const</code>（low-level const）表示指针所指的对象是一个常量。指针类型既可以是顶层<code>const</code>也可以是底层<code>const</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 0;int *const p1 &#x3D; &amp;i;     &#x2F;&#x2F; we can&#39;t change the value of p1; const is top-levelconst int ci &#x3D; 42;      &#x2F;&#x2F; we cannot change ci; const is top-levelconst int *p2 &#x3D; &amp;ci;    &#x2F;&#x2F; we can change p2; const is low-levelconst int *const p3 &#x3D; p2; &#x2F;&#x2F; right-most const is top-level, left-most is notconst int &amp;r &#x3D; ci;      &#x2F;&#x2F; const in reference types is always low-level<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行拷贝操作时，常量是顶层<code>const</code>还是底层<code>const</code>区别明显：</p><ul><li><p>顶层<code>const</code>没有影响。拷贝操作不会改变被拷贝对象的值，因此拷入和拷出的对象是否是常量无关紧要。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">i &#x3D; ci;     &#x2F;&#x2F; ok: copying the value of ci; top-level const in ci is ignoredp2 &#x3D; p3;    &#x2F;&#x2F; ok: pointed-to type matches; top-level const in p3 is ignored<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>拷入和拷出的对象必须具有相同的底层<code>const</code>资格。或者两个对象的数据类型可以相互转换。一般来说，非常量可以转换成常量，反之则不行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *p &#x3D; p3;    &#x2F;&#x2F; error: p3 has a low-level const but p doesn&#39;tp2 &#x3D; p3;        &#x2F;&#x2F; ok: p2 has the same low-level const qualification as p3p2 &#x3D; &amp;i;        &#x2F;&#x2F; ok: we can convert int* to const int*int &amp;r &#x3D; ci;    &#x2F;&#x2F; error: can&#39;t bind an ordinary int&amp; to a const int objectconst int &amp;r2 &#x3D; i;  &#x2F;&#x2F; ok: can bind const int&amp; to plain int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="constexpr和常量表达式（constexpr-and-Constant-Expressions）"><a href="#constexpr和常量表达式（constexpr-and-Constant-Expressions）" class="headerlink" title="constexpr和常量表达式（constexpr and Constant Expressions）"></a>constexpr和常量表达式（constexpr and Constant Expressions）</h3><p>常量表达式（constant expressions）指值不会改变并且在编译过程就能得到计算结果的表达式。</p><p>一个对象是否为常量表达式由它的数据类型和初始值共同决定。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int max_files &#x3D; 20;           &#x2F;&#x2F; max_files is a constant expressionconst int limit &#x3D; max_files + 1;    &#x2F;&#x2F; limit is a constant expressionint staff_size &#x3D; 27;        &#x2F;&#x2F; staff_size is not a constant expressionconst int sz &#x3D; get_size();  &#x2F;&#x2F; sz is not a constant expression<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>C++11允许将变量声明为<code>constexpr</code>类型以便由编译器来验证变量的值是否是一个常量表达式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr int mf &#x3D; 20;          &#x2F;&#x2F; 20 is a constant expressionconstexpr int limit &#x3D; mf + 1;   &#x2F;&#x2F; mf + 1 is a constant expressionconstexpr int sz &#x3D; size();      &#x2F;&#x2F; ok only if size is a constexpr function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指针和引用都能定义成<code>constexpr</code>，但是初始值受到严格限制。<code>constexpr</code>指针的初始值必须是0、<code>nullptr</code>或者是存储在某个固定地址中的对象。</p><p>函数体内定义的普通变量一般并非存放在固定地址中，因此<code>constexpr</code>指针不能指向这样的变量。相反，函数体外定义的变量地址固定不变，可以用来初始化<code>constexpr</code>指针。</p><p>在<code>constexpr</code>声明中如果定义了一个指针，限定符<code>constexpr</code>仅对指针本身有效，与指针所指的对象无关。<code>constexpr</code>把它所定义的对象置为了顶层<code>const</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr int *p &#x3D; nullptr;     &#x2F;&#x2F; p是指向int的const指针constexpr int i &#x3D; 0;constexpr const int *cp &#x3D; &amp;i;   &#x2F;&#x2F; cp是指向const int的const指针<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>const</code>和<code>constexpr</code>限定的值都是常量。但<code>constexpr</code>对象的值必须在编译期间确定，而<code>const</code>对象的值可以延迟到运行期间确定。</p><p>建议使用<code>constexpr</code>修饰表示数组大小的对象，因为数组的大小必须在编译期间确定且不能改变。</p><h2 id="处理类型（Dealing-with-Types）"><a href="#处理类型（Dealing-with-Types）" class="headerlink" title="处理类型（Dealing with Types）"></a>处理类型（Dealing with Types）</h2><h3 id="类型别名（Type-Aliases）"><a href="#类型别名（Type-Aliases）" class="headerlink" title="类型别名（Type Aliases）"></a>类型别名（Type Aliases）</h3><p>类型别名是某种类型的同义词，传统方法是使用关键字<code>typedef</code>定义类型别名。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef double wages;   &#x2F;&#x2F; wages is a synonym for doubletypedef wages base, *p; &#x2F;&#x2F; base is a synonym for double, p for double*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>C++11使用关键字<code>using</code>进行别名声明（alias declaration），作用是把等号左侧的名字规定成等号右侧类型的别名。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using SI &#x3D; Sales_item; &#x2F;&#x2F; SI is a synonym for Sales_item<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="auto类型说明符（The-auto-Type-Specifier）"><a href="#auto类型说明符（The-auto-Type-Specifier）" class="headerlink" title="auto类型说明符（The auto Type Specifier）"></a>auto类型说明符（The auto Type Specifier）</h3><p>C++11新增<code>auto</code>类型说明符，能让编译器自动分析表达式所属的类型。<code>auto</code>定义的变量必须有初始值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; the type of item is deduced from the type of the result of adding val1 and val2auto item &#x3D; val1 + val2;    &#x2F;&#x2F; item initialized to the result of val1 + val2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译器推断出来的<code>auto</code>类型有时和初始值的类型并不完全一样。</p><ul><li><p>当引用被用作初始值时，编译器以引用对象的类型作为<code>auto</code>的类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 0, &amp;r &#x3D; i;auto a &#x3D; r;     &#x2F;&#x2F; a is an int (r is an alias for i, which has type int)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>auto</code>一般会忽略顶层<code>const</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int ci &#x3D; i, &amp;cr &#x3D; ci;auto b &#x3D; ci;    &#x2F;&#x2F; b is an int (top-level const in ci is dropped)auto c &#x3D; cr;    &#x2F;&#x2F; c is an int (cr is an alias for ci whose const is top-level)auto d &#x3D; &amp;i;    &#x2F;&#x2F; d is an int*(&amp; of an int object is int*)auto e &#x3D; &amp;ci;   &#x2F;&#x2F; e is const int*(&amp; of a const object is low-level const)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果希望推断出的<code>auto</code>类型是一个顶层<code>const</code>，需要显式指定<code>const auto</code>。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const auto f &#x3D; ci;  &#x2F;&#x2F; deduced type of ci is int; f has type const int<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>设置类型为<code>auto</code>的引用时，原来的初始化规则仍然适用，初始值中的顶层常量属性仍然保留。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto &amp;g &#x3D; ci;   &#x2F;&#x2F; g is a const int&amp; that is bound to ciauto &amp;h &#x3D; 42;   &#x2F;&#x2F; error: we can&#39;t bind a plain reference to a literalconst auto &amp;j &#x3D; 42;     &#x2F;&#x2F; ok: we can bind a const reference to a literal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="decltype类型指示符（The-decltype-Type-Specifier）"><a href="#decltype类型指示符（The-decltype-Type-Specifier）" class="headerlink" title="decltype类型指示符（The decltype Type Specifier）"></a>decltype类型指示符（The decltype Type Specifier）</h3><p>C++11新增<code>decltype</code>类型指示符，作用是选择并返回操作数的数据类型，此过程中编译器不实际计算表达式的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">decltype(f()) sum &#x3D; x;  &#x2F;&#x2F; sum has whatever type f returns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>decltype</code>处理顶层<code>const</code>和引用的方式与<code>auto</code>有些不同，如果<code>decltype</code>使用的表达式是一个变量，则<code>decltype</code>返回该变量的类型（包括顶层<code>const</code>和引用）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int ci &#x3D; 0, &amp;cj &#x3D; ci;decltype(ci) x &#x3D; 0;     &#x2F;&#x2F; x has type const intdecltype(cj) y &#x3D; x;     &#x2F;&#x2F; y has type const int&amp; and is bound to xdecltype(cj) z;     &#x2F;&#x2F; error: z is a reference and must be initialized<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>decltype</code>使用的表达式不是一个变量，则<code>decltype</code>返回表达式结果对应的类型。如果表达式的内容是解引用操作，则<code>decltype</code>将得到引用类型。如果<code>decltype</code>使用的是一个不加括号的变量，则得到的结果就是该变量的类型；如果给变量加上了一层或多层括号，则<code>decltype</code>会得到引用类型，因为变量是一种可以作为赋值语句左值的特殊表达式。</p><p><code>decltype((var))</code>的结果永远是引用，而<code>decltype(var)</code>的结果只有当<em>var</em>本身是一个引用时才会是引用。</p><h2 id="自定义数据结构（Defining-Our-Own-Data-Structures）"><a href="#自定义数据结构（Defining-Our-Own-Data-Structures）" class="headerlink" title="自定义数据结构（Defining Our Own Data Structures）"></a>自定义数据结构（Defining Our Own Data Structures）</h2><p>C++11规定可以为类的数据成员（data member）提供一个类内初始值（in-class initializer）。创建对象时，类内初始值将用于初始化数据成员，没有初始值的成员将被默认初始化。</p><p>类内初始值不能使用圆括号。</p><p>类定义的最后应该加上分号。</p><p>头文件（header file）通常包含那些只能被定义一次的实体，如类、<code>const</code>和<code>constexpr</code>变量。</p><p>头文件一旦改变，相关的源文件必须重新编译以获取更新之后的声明。</p><p>头文件保护符（header guard）依赖于预处理变量（preprocessor variable）。预处理变量有两种状态：已定义和未定义。<code>#define</code>指令把一个名字设定为预处理变量。<code>#ifdef</code>指令当且仅当变量已定义时为真，<code>#ifndef</code>指令当且仅当变量未定义时为真。一旦检查结果为真，则执行后续操作直至遇到<code>#endif</code>指令为止。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef SALES_DATA_H#define SALES_DATA_H#include &lt;string&gt;struct Sales_data&#123;    std::string bookNo;    unsigned units_sold &#x3D; 0;    double revenue &#x3D; 0.0;&#125;;#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在高级版本的IDE环境中，可以直接使用<code>#pragma once</code>命令来防止头文件的重复包含。</p><p>预处理变量无视C++语言中关于作用域的规则。</p><p>整个程序中的预处理变量，包括头文件保护符必须唯一。预处理变量的名字一般均为大写。</p><p>头文件即使目前还没有被包含在任何其他头文件中，也应该设置保护符。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-19-specialized-tools-and-techniques/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-19-specialized-tools-and-techniques/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第19章-特殊工具与技术"><a href="#第19章-特殊工具与技术" class="headerlink" title="第19章 特殊工具与技术"></a>第19章 特殊工具与技术</h1><h2 id="控制内存分配（Controlling-Memory-Allocation）"><a href="#控制内存分配（Controlling-Memory-Allocation）" class="headerlink" title="控制内存分配（Controlling Memory Allocation）"></a>控制内存分配（Controlling Memory Allocation）</h2><h3 id="重载new和delete（Overloading-new-and-delete）"><a href="#重载new和delete（Overloading-new-and-delete）" class="headerlink" title="重载new和delete（Overloading new and delete）"></a>重载new和delete（Overloading new and delete）</h3><p>使用<code>new</code>表达式时，实际执行了三步操作：</p><ul><li><code>new</code>表达式调用名为<code>operator new</code>（或<code>operator new[]</code>）的标准库函数。该函数分配一块足够大、原始、未命名的内存空间以便存储特定类型的对象（或对象数组）。</li><li>编译器调用对应的构造函数构造这些对象并初始化。</li><li>对象被分配了空间并构造完成，返回指向该对象的指针。</li></ul><p>使用<code>delete</code>表达式时，实际执行了两步操作：</p><ul><li>对指针所指向的对象（或对象数组）执行对应的析构函数。</li><li>编译器调用名为<code>operator delete</code>（或<code>operator delete[]</code>）的标准库函数释放内存空间。</li></ul><p>如果程序希望控制内存分配的过程，则需要定义自己的<code>operator new</code>和<code>operator delete</code>函数。编译器会用自定义版本替换标准库版本。</p><p>程序可以在全局作用域中定义<code>operator new</code>和<code>operator delete</code>函数，也可以将其定义为成员函数。编译器发现<code>new</code>或<code>delete</code>表达式后，将在程序中查找可供调用的<code>operator</code>函数。如果被分配或释放的对象是类类型，编译器会先在类及其基类的作用域中查找。如果该类含有<code>operator</code>成员，则表达式会调用这些成员。否则编译器会继续在全局作用域查找。如果找到自定义版本，则使用该版本的函数。如果没找到，则使用标准库定义的版本。</p><p>可以使用作用域运算符令<code>new</code>或<code>delete</code>表达式忽略定义在类中的函数，直接执行全局作用域版本。</p><p>标准库定义了<code>operator new</code>和<code>operator delete</code>函数的8个重载版本，其中前4个版本可能抛出<code>bad_alloc</code>异常，后4个版本不会抛出异常。重载这些运算符时，必须使用关键字<code>noexcept</code>指定其不抛出异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; these versions might throw an exceptionvoid *operator new(size_t);     &#x2F;&#x2F; allocate an objectvoid *operator new[](size_t);   &#x2F;&#x2F; allocate an arrayvoid *operator delete(void*) noexcept;      &#x2F;&#x2F; free an objectvoid *operator delete[](void*) noexcept;    &#x2F;&#x2F; free an array&#x2F;&#x2F; versions that promise not to throwvoid *operator new(size_t, nothrow_t&amp;) noexcept;void *operator new[](size_t, nothrow_t&amp;) noexcept;void *operator delete(void*, nothrow_t&amp;) noexcept;void *operator delete[](void*, nothrow_t&amp;) noexcept<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>nothrow_t</code>类型是定义在头文件<em>new</em>中的一个结构体，这个类型不包含任何成员。头文件<em>new</em>还定义了一个名为<code>nothrow</code>的<code>const</code>对象，用户可以通过这个对象请求<code>new</code>的非抛出版本。</p><p>将<code>operator</code>函数定义为类的成员时，它们是隐式静态的，无须显式地声明<code>static</code>。因为<code>operator new</code>用在对象构造之前，<code>operator delete</code>用在对象销毁之后，所以它们必须是静态成员，而且不能操纵类的任何数据成员。</p><p><code>operator new</code>和<code>operator new[]</code>函数的返回类型必须是<code>void*</code>，第一个形参的类型必须是<code>size_t</code>且不能有默认实参。编译器调用<code>operator new</code>时，用存储指定类型对象所需的字节数初始化<code>size_t</code>形参；调用<code>operator new[]</code>时，传入函数的则是存储数组中所有元素所需的空间。</p><p>自定义<code>operator new</code>函数时可以为它提供额外的形参，用到这些自定义函数的<code>new</code>表达式必须使用<code>new</code>的定位形式传递参数。下面这种形式的<code>new</code>函数只供标准库使用，不能被用户重定义：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void *operator new(size_t, void*);   &#x2F;&#x2F; this version may not be redefined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>operator delete</code>和<code>operator delete[]</code>函数的返回类型必须是<code>void</code>，第一个形参的类型必须是<code>void*</code>。函数被调用时，编译器会用指向待释放内存的指针来初始化<code>void*</code>形参。</p><p>将<code>operator delete</code>或<code>operator delete[]</code>定义为类的成员时，可以包含另一个类型为<code>size_t</code>的形参。该形参的初始值是第一个形参所指向对象的字节数。<code>size_t</code>形参可用于删除继承体系中的对象。如果基类有一个虚析构函数，则传递给<code>operator delete</code>的字节数会因待删除指针所指向对象的动态类型不同而有所区别。实际运行的<code>operator delete</code>函数版本也由对象的动态类型决定。</p><p><code>malloc</code>函数接受一个表示待分配字节数的<code>size_t</code>参数，返回指向分配空间的指针，或者返回0以表示分配失败。<code>free</code>函数接受一个<code>void*</code>参数，它是<code>malloc</code>返回的指针的副本，<code>free</code>将相关内存返回给系统。调用<code>free(0)</code>没有任何意义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void *operator new(size_t size)&#123;    if (void *mem &#x3D; malloc(size))        return mem;    else        throw bad_alloc();&#125;void operator delete(void *mem) noexcept&#123;    free(mem);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定位new表达式（Placement-new-Expressions）"><a href="#定位new表达式（Placement-new-Expressions）" class="headerlink" title="定位new表达式（Placement new Expressions）"></a>定位new表达式（Placement new Expressions）</h3><p>在C++的早期版本中，<code>allocator</code>类还不是标准库的一部分。如果程序想分开内存分配和初始化过程，需要直接调用<code>operator new</code>和<code>operator delete</code>函数。它们类似<code>allocator</code>类的<code>allocate</code>和<code>deallocate</code>成员，负责分配或释放内存空间，但不会构造或销毁对象。</p><p>不能使用<code>allocator</code>类的<code>construct</code>函数在<code>operator new</code>分配的内存空间中构造对象，而应该使用定位<code>new</code>表达式构造。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">new (place_address) typenew (place_address) type (initializers)new (place_address) type [size]new (place_address) type [size] &#123; braced initializer list &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<em>place_address</em>是一个指针。<em>initializers</em>是一个以逗号分隔的初始值列表（可能为空），该列表用于构造新分配的对象。</p><p>当仅通过一个地址值调用定位<code>new</code>时，它会使用<code>operator new(size_t, void*)</code>函数（用户无法重载的版本）。该函数不分配任何内存，直接返回指针形参。然后由<code>new</code>表达式负责在指定的地址初始化对象。</p><p>传递给<code>construct</code>函数的指针必须指向同一个<code>allocator</code>对象分配的空间，但是传递给定位<code>new</code>的指针无须指向<code>operator new</code>分配的内存，甚至不需要指向动态内存。</p><p>调用析构函数会销毁对象，但不会释放内存。如果需要的话，可以重新使用该空间。</p><h2 id="运行时类型识别（Run-Time-Type-Identification）"><a href="#运行时类型识别（Run-Time-Type-Identification）" class="headerlink" title="运行时类型识别（Run-Time Type Identification）"></a>运行时类型识别（Run-Time Type Identification）</h2><p>运行时类型识别（RTTI）的功能由两个运算符实现：</p><ul><li><code>typeid</code>运算符，用于返回表达式的类型。</li><li><code>dynamic_cast</code>运算符，用于将基类的指针或引用安全地转换为派生类的指针或引用。</li></ul><p>RTTI运算符适用于以下情况：想通过基类对象的指针或引用执行某个派生类操作，并且该操作不是虚函数。</p><h3 id="dynamic-cast运算符（The-dynamic-cast-Operator）"><a href="#dynamic-cast运算符（The-dynamic-cast-Operator）" class="headerlink" title="dynamic_cast运算符（The dynamic_cast Operator）"></a>dynamic_cast运算符（The dynamic_cast Operator）</h3><p><code>dynamic_cast</code>运算符的形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dynamic_cast&lt;type*&gt;(e)dynamic_cast&lt;type&amp;&gt;(e)dynamic_cast&lt;type&amp;&amp;&gt;(e)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中<em>type</em>是一个类类型，并且通常情况下该类型应该含有虚函数。在第一种形式中，<em>e</em>必须是一个有效指针；在第二种形式中，<em>e</em>必须是一个左值；在第三种形式中，<em>e</em>不能是左值。在所有形式中，<em>e</em>的类型必须符合以下条件之一：</p><ul><li><em>e</em>是<em>type</em>的公有派生类。</li><li><em>e</em>是<em>type</em>的公有基类。</li><li><em>e</em>和<em>type</em>类型相同。</li></ul><p>如果条件符合，则类型转换成功，否则转换失败。转换失败可能有两种结果：</p><ul><li><p>如果<code>dynamic_cast</code>语句的转换目标是指针类型，则结果为0。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (Derived *dp &#x3D; dynamic_cast&lt;Derived*&gt;(bp))&#123;    &#x2F;&#x2F; use the Derived object to which dp points&#125;else&#123;   &#x2F;&#x2F; bp points at a Base object    &#x2F;&#x2F; use the Base object to which bp points&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果<code>dynamic_cast</code>语句的转换目标是引用类型，则抛出<code>bad_cast</code>异常（定义在头文件<em>typeinfo</em>中）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void f(const Base &amp;b)&#123;    try    &#123;        const Derived &amp;d &#x3D; dynamic_cast&lt;const Derived&amp;&gt;(b);        &#x2F;&#x2F; use the Derived object to which b referred    &#125;    catch (bad_cast)    &#123;        &#x2F;&#x2F; handle the fact that the cast failed    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在条件判断部分执行<code>dynamic_cast</code>可以确保类型转换和结果检查在同一条表达式中完成。</p><p>可以对一个空指针执行<code>dynamic_cast</code>，结果是所需类型的空指针。</p><h3 id="typeid运算符（The-typeid-Operator）"><a href="#typeid运算符（The-typeid-Operator）" class="headerlink" title="typeid运算符（The typeid Operator）"></a>typeid运算符（The typeid Operator）</h3><p><code>typeid</code>表达式的形式是<code>typeid(e)</code>，其中<em>e</em>可以是任意表达式或类型名称。<code>typeid</code>的结果是一个指向常量对象的引用，该对象的类型是标准库<code>type_info</code>（定义在头文件<em>typeinfo</em>中）或<code>type_info</code>的公有派生类型。</p><p><code>typeid</code>可以作用于任何类型的表达式，其中的顶层<code>const</code>会被忽略。如果表达式是一个引用，则<code>typeid</code>返回该引用所指对象的类型。当<code>typeid</code>作用于数组或函数时，不会执行向指针的标准类型转换。</p><p>当<code>typeid</code>的运算对象不属于类类型或者是一个不包含任何虚函数的类时，<code>typeid</code>返回其静态类型。而当运算对象是至少包含一个虚函数的类的左值时，<code>typeid</code>的结果直到运行期间才会确定。</p><p>通常情况下，<code>typeid</code>用于比较两条表达式的类型是否相同，或者比较一条表达式的类型是否与指定类型相同。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Derived *dp &#x3D; new Derived;Base *bp &#x3D; dp;   &#x2F;&#x2F; both pointers point to a Derived object&#x2F;&#x2F; compare the type of two objects at run timeif (typeid(*bp) &#x3D;&#x3D; typeid(*dp))&#123;    &#x2F;&#x2F; bp and dp point to objects of the same type&#125;&#x2F;&#x2F; test whether the run-time type is a specific typeif (typeid(*bp) &#x3D;&#x3D; typeid(Derived))&#123;    &#x2F;&#x2F; bp actually points to a Derived&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>typeid</code>应该作用于对象。当<code>typeid</code>作用于指针时，返回的结果是该指针的静态编译类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; test always fails: the type of bp is pointer to Baseif (typeid(bp) &#x3D;&#x3D; typeid(Derived))&#123;    &#x2F;&#x2F; code never executed&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当类型含有虚函数时，编译器才会对<code>typeid</code>的表达式求值以确定返回类型。对于<code>typeid(*p)</code>，如果指针<em>p</em>所指向的类型不包含虚函数，则<em>p</em>可以是一个无效指针。否则<code>*p</code>会在运行期间求值，此时<em>p</em>必须是一个有效指针。如果<em>p</em>是空指针，<code>typeid(*p)</code>会抛出<code>bad_typeid</code>异常。</p><h3 id="使用RTTI（Using-RTTI）"><a href="#使用RTTI（Using-RTTI）" class="headerlink" title="使用RTTI（Using RTTI）"></a>使用RTTI（Using RTTI）</h3><p>使用RTTI可以为具有继承关系的类实现相等运算符。</p><p>相等运算符的形参是基类的引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base&#123;    friend bool operator&#x3D;&#x3D;(const Base&amp;, const Base&amp;);public:    &#x2F;&#x2F; interface members for Baseprotected:    virtual bool equal(const Base&amp;) const;    &#x2F;&#x2F; data and other implementation members of Base&#125;;class Derived: public Base&#123;public:    &#x2F;&#x2F; other interface members for Derivedprotected:    bool equal(const Base&amp;) const;    &#x2F;&#x2F; data and other implementation members of Derived&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>typeid</code>检查两个运算对象的类型是否一致，类型一致才会继续判断每个数据成员的取值是否相同。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool operator&#x3D;&#x3D;(const Base &amp;lhs, const Base &amp;rhs)&#123;    &#x2F;&#x2F; returns false if typeids are different; otherwise makes a virtual call to equal    return typeid(lhs) &#x3D;&#x3D; typeid(rhs) &amp;&amp; lhs.equal(rhs);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个类定义的<code>equal</code>函数负责比较类型自己的数据成员。<code>equal</code>函数的形参都是基类的引用，但是在比较之前需要先把运算对象转换成自己的类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool Derived::equal(const Base &amp;rhs) const&#123;    &#x2F;&#x2F; we know the types are equal, so the cast won&#39;t throw    auto r &#x3D; dynamic_cast&lt;const Derived&amp;&gt;(rhs);    &#x2F;&#x2F; do the work to compare two Derived objects and return the result&#125;bool Base::equal(const Base &amp;rhs) const&#123;&#x2F;&#x2F; do whatever is required to compare to Base objects&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="type-info类（The-type-info-Class）"><a href="#type-info类（The-type-info-Class）" class="headerlink" title="type_info类（The type_info Class）"></a>type_info类（The type_info Class）</h3><p><code>type_info</code>类的精确定义会根据编译器的不同而略有差异。但是C++规定<code>type_info</code>必须定义在头文件<em>typeinfo</em>中，并且至少提供以下操作：</p><p><img src="Images/19-1.png" alt="19-1"></p><p><code>type_info</code>类一般是作为一个基类出现，所以它还应该提供一个公有虚析构函数。当编译器希望提供额外的类型信息时，通常在<code>type_info</code>的派生类中完成。</p><p><code>type_info</code>类没有默认构造函数，而且它的拷贝和移动构造函数以及赋值运算符都被定义为删除的。创建<code>type_info</code>对象的唯一方式就是使用<code>typeid</code>运算符。</p><p>对于某种给定类型来说，<code>name</code>成员的返回值因编译器而异并且不一定与在程序中使用的名字一致。对于<code>name</code>返回值的唯一要求就是类型不同则返回的字符串必须有所区别。</p><h2 id="枚举类型（Enumerations）"><a href="#枚举类型（Enumerations）" class="headerlink" title="枚举类型（Enumerations）"></a>枚举类型（Enumerations）</h2><p>和类一样，每个枚举类型都定义了一种新的类型。枚举属于字面值常量类型。</p><p>C++包含两种枚举：</p><ul><li><p>限定作用域的枚举（scoped enumeration，C++11新增）。定义形式是关键字<code>enum class</code>（或<code>enum struct</code>）后接枚举类型名字以及用花括号包围、以逗号分隔的枚举成员（enumerator）列表。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum class open_modes&#123;    input,    output,    append&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不限定作用域的枚举（unscoped enumeration）。定义时省略关键字<code>class</code>（或<code>struct</code>），枚举类型名字是可选的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">C++&#x2F;&#x2F; unscoped enumerationenum color&#123;    red,    yellow,    green&#125;;&#x2F;&#x2F; unnamed, unscoped enumenum&#123;    floatPrec &#x3D; 6,    doublePrec &#x3D; 10,    double_doublePrec &#x3D; 10&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果枚举是未命名的，则只能在定义该枚举时一同定义它的对象。</p></li></ul><p>在限定作用域的枚举类型中，枚举成员的名字遵循常规作用域规则，并且在枚举类型的作用域外是不可访问的。与之相反，在不限定作用域的枚举类型中，枚举成员的作用域与枚举类型本身的作用域相同。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum color &#123; red, yellow, green &#125;;   &#x2F;&#x2F; unscoped enumerationenum stoplight &#123; red, yellow, green &#125;;   &#x2F;&#x2F; error: redefines enumeratorsenum class peppers &#123; red, yellow, green &#125;;   &#x2F;&#x2F; ok: enumerators are hiddencolor eyes &#x3D; green;    &#x2F;&#x2F; ok: enumerators are in scope for an unscoped enumerationpeppers p &#x3D; green;     &#x2F;&#x2F; error: enumerators from peppers are not in scope&#x2F;&#x2F; color::green is in scope but has the wrong typecolor hair &#x3D; color::red;      &#x2F;&#x2F; ok: we can explicitly access the enumeratorspeppers p2 &#x3D; peppers::red;    &#x2F;&#x2F; ok: using red from peppers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，枚举值从0开始，依次加1。也可以直接为枚举成员指定特定的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum class intTypes&#123;    charTyp &#x3D; 8, shortTyp &#x3D; 16, intTyp &#x3D; 16,    longTyp &#x3D; 32, long_longTyp &#x3D; 64&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举值可以不唯一。如果没有显式提供初始值，则当前枚举成员的值等于之前枚举成员的值加1。</p><p>枚举成员是<code>const</code>的，因此在初始化枚举成员时提供的初始值必须是常量表达式。</p><p>可以在任何需要常量表达式的地方使用枚举成员。如：</p><ul><li>定义枚举类型的<code>constexpr</code>变量。</li><li>将枚举类型对象作为<code>switch</code>语句的表达式，而将枚举值作为<code>case</code>标签。</li><li>将枚举类型作为非类型模板形参使用。</li><li>在类的定义中初始化枚举类型的静态数据成员。</li></ul><p>初始化枚举对象或者给枚举对象赋值时，必须使用该类型的一个枚举成员或者该类型的另一个对象。即使某个整型值恰好与枚举成员的值相等，也不能用其初始化枚举对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">open_modes om &#x3D; 2;        &#x2F;&#x2F; error: 2 is not of type open_modesom &#x3D; open_modes::input;   &#x2F;&#x2F; ok: input is an enumerator of open_modes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不限定作用域的枚举类型对象或枚举成员能自动转换成整型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; color::red;     &#x2F;&#x2F; ok: unscoped enumerator implicitly converted to intint j &#x3D; peppers::red;   &#x2F;&#x2F; error: scoped enumerations are not implicitly converted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>枚举是由某种整数类型表示的。C++11中，可以在枚举名字后面指定用来表示枚举成员的整型类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum intValues : unsigned long long&#123;    &#x2F;*...*&#x2F;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有指定枚举的潜在类型，则默认情况下限定作用域的枚举成员类型是<code>int</code>。不限定作用域的枚举成员不存在默认类型。</p><p>C++11中可以提前声明枚举。枚举的前置声明必须指定（无论隐式或显式）其成员的类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; forward declaration of unscoped enum named intValuesenum intValues : unsigned long long;    &#x2F;&#x2F; unscoped, must specify a typeenum class open_modes;    &#x2F;&#x2F; scoped enums can use int by default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="类成员指针（Pointer-to-Class-Member）"><a href="#类成员指针（Pointer-to-Class-Member）" class="headerlink" title="类成员指针（Pointer to Class Member）"></a>类成员指针（Pointer to Class Member）</h2><p>成员指针（pointer to member）是指可以指向类的非静态成员的指针。</p><p>成员指针的类型包括类的类型和成员的类型。初始化成员指针时，会令其指向类的某个成员，但是不指定该成员所属的对象。直到使用成员指针时，才提供成员所属的对象。</p><h3 id="数据成员指针（Pointers-to-Data-Members）"><a href="#数据成员指针（Pointers-to-Data-Members）" class="headerlink" title="数据成员指针（Pointers to Data Members）"></a>数据成员指针（Pointers to Data Members）</h3><p>声明成员指针时必须在<code>*</code>前添加<code>classname::</code>以表示当前定义的指针可以指向<em>classname</em>的成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Screen&#123;public:    typedef std::string::size_type pos;    char get_cursor() const &#123; return contents[cursor]; &#125;    char get() const;    char get(pos ht, pos wd) const;private:    std::string contents;    pos cursor;    pos height, width;&#125;&#x2F;&#x2F; pdata can point to a string member of a const (or non const) Screen objectconst string Screen::*pdata;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化或者给成员指针赋值时，需要指定它所指向的成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pdata &#x3D; &amp;Screen::contents;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成员指针使用<code>.*</code>和<code>-&gt;*</code>来获得其指向对象的成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Screen myScreen, *pScreen &#x3D; &amp;myScreen;&#x2F;&#x2F; .* dereferences pdata to fetch the contents member from the object myScreenauto s &#x3D; myScreen.*pdata;&#x2F;&#x2F; -&gt;* dereferences pdata to fetch contents from the object to which pScreen pointss &#x3D; pScreen-&gt;*pdata;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常规的访问控制规则对成员指针同样有效。数据成员一般是私有的，因此通常不能直接获得数据成员的指针。如果类希望外部代码能访问它的私有数据成员，可以定义一个函数，令其返回指向私有成员的指针。</p><h3 id="成员函数指针（Pointers-to-Member-Functions）"><a href="#成员函数指针（Pointers-to-Member-Functions）" class="headerlink" title="成员函数指针（Pointers to Member Functions）"></a>成员函数指针（Pointers to Member Functions）</h3><p>类似于其他函数指针，指向成员函数的指针也需要指定目标函数的返回类型和形参列表。如果成员函数是<code>const</code>成员或引用成员，则指针也必须包含<code>const</code>或引用限定符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; pmf is a pointer that can point to a Screen member function that is const&#x2F;&#x2F; that returns a char and takes no argumentsauto pmf &#x3D; &amp;Screen::get_cursor;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果成员函数存在重载问题，则必须显式声明指针指向的函数类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char (Screen::*pmf2)(Screen::pos, Screen::pos) const;pmf2 &#x3D; &amp;Screen::get;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和普通函数指针不同，在成员函数和指向该成员的指针之间不存在自动转换规则。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; pmf points to a Screen member that takes no arguments and returns charpmf &#x3D; &amp;Screen::get;    &#x2F;&#x2F; must explicitly use the address-of operatorpmf &#x3D; Screen::get;     &#x2F;&#x2F; error: no conversion to pointer for member functions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成员函数指针使用<code>.*</code>和<code>-&gt;*</code>来调用类的成员函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Screen myScreen, *pScreen &#x3D; &amp;myScreen;&#x2F;&#x2F; call the function to which pmf points on the object to which pScreen pointschar c1 &#x3D; (pScreen-&gt;*pmf)();&#x2F;&#x2F; passes the arguments 0, 0 to the two-parameter version of get on the object myScreenchar c2 &#x3D; (myScreen.*pmf2)(0, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用类型别名来增强含有成员指针的代码的可读性。</p><h3 id="将成员函数用作可调用对象（Using-Member-Functions-as-Callable-Objects）"><a href="#将成员函数用作可调用对象（Using-Member-Functions-as-Callable-Objects）" class="headerlink" title="将成员函数用作可调用对象（Using Member Functions as Callable Objects）"></a>将成员函数用作可调用对象（Using Member Functions as Callable Objects）</h3><p>成员指针不是一个可调用对象，不支持函数调用运算符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto fp &#x3D; &amp;string::empty;   &#x2F;&#x2F; fp points to the string empty function&#x2F;&#x2F; error: must use .* or -&gt;* to call a pointer to memberfind_if(svec.begin(), svec.end(), fp);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从成员函数指针获取可调用对象的一种方法是使用标准库模板<code>function</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">function&lt;bool (const string&amp;)&gt; fcn &#x3D; &amp;string::empty;find_if(svec.begin(), svec.end(), fcn);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义一个<code>function</code>对象时，必须指定该对象所能表示的函数类型（即可调用对象的形式）。如果可调用对象是一个成员函数，则第一个形参必须表示该成员是在哪个对象上执行的。</p><p>使用标准库功能<code>mem_fn</code>（定义在头文件<em>functional</em>中）可以让编译器推断成员的类型。和<code>function</code>一样，<code>mem_fn</code>可以从成员指针生成可调用对象。但<code>mem_fn</code>可以根据成员指针的类型推断可调用对象的类型，无须显式指定。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">find_if(svec.begin(), svec.end(), mem_fn(&amp;string::empty));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>mem_fn</code>生成的可调用对象可以通过对象和指针调用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto f &#x3D; mem_fn(&amp;string::empty);    &#x2F;&#x2F; f takes a string or a string*f(*svec.begin());   &#x2F;&#x2F; ok: passes a string object; f uses .* to call emptyf(&amp;svec[0]);        &#x2F;&#x2F; ok: passes a pointer to string; f uses .-&gt; to call empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="嵌套类（Nested-Classes）"><a href="#嵌套类（Nested-Classes）" class="headerlink" title="嵌套类（Nested Classes）"></a>嵌套类（Nested Classes）</h2><p>一个类可以定义在另一个类的内部，前者被称为嵌套类或嵌套类型（nested type）。嵌套类通常用于定义作为实现部分的类。</p><p>外层类的对象和嵌套类的对象是相互独立的。在嵌套类对象中不包含任何外层类定义的成员，在外层类对象中也不包含任何嵌套类定义的成员。</p><p>嵌套类的名字在外层类作用域中是可见的，在外层类作用域之外不可见。</p><p>外层类对嵌套类的成员没有特殊的访问权限，嵌套类对外层类的成员也没有特殊的访问权限。</p><p>嵌套类在其外层类中定义了一个类型成员。和其他成员类似，该类型的访问权限由外层类的访问说明符决定。</p><p>嵌套类必须声明在类的内部，但是可以定义在类的内部或外部。在外层类之外定义嵌套类时，必须用外层类的名字限定嵌套类的名字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class TextQuery&#123;    class QueryResult;  &#x2F;&#x2F; nested class to be defined later&#125;;&#x2F;&#x2F; we&#39;re defining the QueryResult class that is a member of class TextQueryclass TextQuery::QueryResult&#123;    &#x2F;*...*&#x2F;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在嵌套类在其外层类之外完成真正的定义之前，它都是一个不完全类型。</p><h2 id="union：一种节省空间的类（union-A-Space-Saving-Class）"><a href="#union：一种节省空间的类（union-A-Space-Saving-Class）" class="headerlink" title="union：一种节省空间的类（union: A Space-Saving Class）"></a>union：一种节省空间的类（union: A Space-Saving Class）</h2><p>联合（union）是一种特殊的类。一个联合可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。给联合的某个成员赋值之后，其他成员会变为未定义状态。分配给联合对象的存储空间至少要能容纳它的最大数据成员。</p><p>联合不能包含引用类型的成员。在C++11中，含有构造函数或析构函数的类类型也可以作为联合的成员类型。</p><p>联合可以为其成员指定<code>public</code>、<code>protected</code>和<code>private</code>等保护标记。默认情况下，联合的成员都是公有的。</p><p>联合可以定义包括构造函数和析构函数在内的成员函数。但是由于联合既不能继承自其他类，也不能作为基类使用，所以在联合中不能含有虚函数。</p><p>定义联合时，首先是关键字<code>union</code>，随后是该联合的名字（可选）以及在花括号内的一组成员声明。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; objects of type Token have a single member, which could be of any of the listed typesunion Token&#123;    &#x2F;&#x2F; members are public by default    char cval;    int ival;    double dval;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，联合是未初始化的。可以像显式初始化聚合类一样显式初始化联合，提供的初始值会被用于初始化第一个成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Token first_token &#x3D; &#123; &#39;a&#39; &#125;;   &#x2F;&#x2F; initializes the cval member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用通用的成员访问运算符访问联合对象的成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">last_token.cval &#x3D; &#39;z&#39;;pt-&gt;ival &#x3D; 42;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>匿名联合（anonymous union）是一个未命名的联合，并且在右花括号和分号之间没有任何声明。一旦定义了一个匿名联合，编译器就会自动地为该联合创建一个未命名的对象。在匿名联合的定义所在的作用域内，该联合的成员都是可以直接访问的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">union&#123;   &#x2F;&#x2F; anonymous union    char cval;    int ival;    double dval;&#125;;  &#x2F;&#x2F; defines an unnamed object, whose members we can access directlycval &#x3D; &#39;c&#39;;   &#x2F;&#x2F; assigns a new value to the unnamed, anonymous union objectival &#x3D; 42;    &#x2F;&#x2F; that object now holds the value 42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名联合不能包含<code>protected</code>和<code>private</code>成员，也不能定义成员函数。</p><p>C++的早期版本规定，在联合中不能含有定义了构造函数或拷贝控制成员的类类型成员。C++11取消了该限制。但是如果联合的成员类型定义了自己的构造函数或拷贝控制成员，该联合的用法会比只含有内置类型成员的联合复杂得多。</p><ul><li>当联合只包含内置类型的成员时，可以使用普通的赋值语句改变联合的值。但是如果想将联合的值改为类类型成员对应的值，或者将类类型成员的值改为一个其他值，则必须构造或析构该类类型的成员。</li><li>当联合只包含内置类型的成员时，编译器会按照成员顺序依次合成默认构造函数或拷贝控制成员。但是如果联合含有类类型成员，并且该类型自定义了默认构造函数或拷贝控制成员，则编译器会为该联合合成对应的版本并将其声明为删除的。</li></ul><p>对于联合来说，构造或销毁类类型成员的操作非常复杂。通常情况下，可以把含有类类型成员的联合内嵌在另一个类中，这个类可以管理并控制与联合的类类型成员相关的状态转换。</p><h2 id="局部类（Local-Classes）"><a href="#局部类（Local-Classes）" class="headerlink" title="局部类（Local Classes）"></a>局部类（Local Classes）</h2><p>类可以定义在某个函数的内部，这种类被称为局部类。局部类定义的类型只能在定义它的作用域内可见。</p><p>局部类的所有成员（包括成员函数）都必须完整定义在类的内部，因此局部类的作用与嵌套类相比相差很远。</p><p>局部类中不允许声明静态数据成员。</p><p>局部类只能访问外层作用域定义的类型名、静态变量以及枚举成员，不能使用普通局部变量。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a, val;void foo(int val)&#123;    static int si;    enum Loc &#123; a &#x3D; 1024, b &#125;;    &#x2F;&#x2F; Bar is local to foo    struct Bar    &#123;        Loc locVal;    &#x2F;&#x2F; ok: uses a local type name        int barVal;        void fooBar(Loc l &#x3D; a)  &#x2F;&#x2F; ok: default argument is Loc::a        &#123;            barVal &#x3D; val;    &#x2F;&#x2F; error: val is local to foo            barVal &#x3D; ::val;  &#x2F;&#x2F; ok: uses a global object            barVal &#x3D; si;     &#x2F;&#x2F; ok: uses a static local object            locVal &#x3D; b;      &#x2F;&#x2F; ok: uses an enumerator        &#125;    &#125;;    &#x2F;&#x2F; . . .&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常规的访问保护规则对于局部类同样适用。外层函数对局部类的私有成员没有任何访问特权。局部类可以将外层函数声明为友元。</p><p>可以在局部类的内部再嵌套一个类。此时嵌套类的定义可以出现在局部类之外，不过嵌套类必须定义在与局部类相同的作用域中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void foo()&#123;    class Bar    &#123;    public:        class Nested;   &#x2F;&#x2F; declares class Nested    &#125;;    &#x2F;&#x2F; definition of Nested    class Bar::Nested    &#123;    &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部类内的嵌套类也是一个局部类，必须遵循局部类的各种规定。</p><h2 id="固有的不可移植的特性（Inherently-Nonportable-Features）"><a href="#固有的不可移植的特性（Inherently-Nonportable-Features）" class="headerlink" title="固有的不可移植的特性（Inherently Nonportable Features）"></a>固有的不可移植的特性（Inherently Nonportable Features）</h2><h3 id="位域（Bit-fields）"><a href="#位域（Bit-fields）" class="headerlink" title="位域（Bit-fields）"></a>位域（Bit-fields）</h3><p>类可以将其非静态数据成员定义成位域，在一个位域中含有一定数量的二进制位。当程序需要向其他程序或硬件设备传递二进制数据时，通常会使用位域。</p><p>位域的声明形式是在成员名字之后紧跟一个冒号和一个常量表达式，该表达式用于指定成员所占的二进制位数。</p><p>位域的类型必须是整型或枚举类型。因为带符号位域的行为是由具体实现确定的，所以通常情况下使用无符号类型保存位域。位域类型的大小不能小于位域结构的总大小。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Descriptor&#123;    &#x2F;&#x2F; error: should use unsigned long long    unsigned int LimitLow : 16;    unsigned int BaseLow : 24;    unsigned int Attribute : 16;    unsigned int BaseHigh : 8;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义位域时建议结合<code>#pragma pack</code>指令将结构体对齐值修改为1，防止数据结构错位。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 保存原始对齐值，设置新对齐#pragma pack(push, 1)&#x2F;&#x2F; 结构体定义……&#x2F;&#x2F; 恢复原始对齐值#pragma pack(pop)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>位域成员按定义顺序在内存中由低地址向高地址排列，具体布局与机器相关。</p><p>取地址符<code>&amp;</code>不能作用于位域，因此任何指针都无法指向类的位域。</p><p>如果可能的话，类内部连续定义的位域会压缩在同一整数的相邻位，从而提供存储压缩。</p><p>访问位域的方式与访问类的其他数据成员的方式类似。操作超过1位的位域时，通常会使用内置的位运算符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">File &amp;File::open(File::modes m)&#123;    mode |&#x3D; READ;   &#x2F;&#x2F; set the READ bit by default    &#x2F;&#x2F; other processing    if (m &amp; WRITE)  &#x2F;&#x2F; if opening READ and WRITE        &#x2F;&#x2F; processing to open the file in read&#x2F;write mode        return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="volatile限定符（volatile-Qualifier）"><a href="#volatile限定符（volatile-Qualifier）" class="headerlink" title="volatile限定符（volatile Qualifier）"></a>volatile限定符（volatile Qualifier）</h3><p>当对象的值可能在程序的控制或检测之外被改变时（如子线程），应该将该对象声明为<code>volatile</code>。关键字<code>volatile</code>的作用是告知编译器不要优化这样的对象。</p><p><code>volatile</code>的确切含义与机器有关，只能通过查阅编译器文档来理解。要想让一个使用了<code>volatile</code>的程序在移植到新机器或新编译器后仍然有效，通常需要对该程序进行一些修改。</p><p><code>volatile</code>的用法和<code>const</code>类似，都是对类型的额外修饰。二者相互之间并没有影响。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">volatile int display_register;   &#x2F;&#x2F; int value that might changevolatile Task *curr_task;        &#x2F;&#x2F; curr_task points to a volatile objectvolatile int iax[max_size];      &#x2F;&#x2F; each element in iax is volatile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类可以将成员函数定义为<code>volatile</code>的。<code>volatile</code>对象只能调用<code>volatile</code>成员函数。</p><p><code>volatile</code>和指针的关系类似<code>const</code>。可以声明<code>volatile</code>指针、指向<code>volatile</code>对象的指针和指向<code>volatile</code>对象的<code>volatile</code>指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">volatile int v;      &#x2F;&#x2F; v is a volatile intint *volatile vip;   &#x2F;&#x2F; vip is a volatile pointer to intvolatile int *ivp;   &#x2F;&#x2F; ivp is a pointer to volatile int&#x2F;&#x2F; vivp is a volatile pointer to volatile intvolatile int *volatile vivp;int *ip &#x3D; &amp;v;   &#x2F;&#x2F; error: must use a pointer to volatile*ivp &#x3D; &amp;v;      &#x2F;&#x2F; ok: ivp is a pointer to volatilevivp &#x3D; &amp;v;      &#x2F;&#x2F; ok: vivp is a volatile pointer to volatile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能使用合成的拷贝/移动构造函数和赋值运算符初始化<code>volatile</code>对象或者给<code>volatile</code>对象赋值。合成的成员接受的形参类型是非<code>volatile</code>常量引用，不能把非<code>volatile</code>引用绑定到<code>volatile</code>对象上。</p><p>如果类需要拷贝、移动或赋值它的<code>volatile</code>对象，则必须自定义拷贝或移动操作。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo(const volatile Foo&amp;); &#x2F;&#x2F; copy from a volatile object    &#x2F;&#x2F; assign from a volatile object to a nonvolatile object    Foo&amp; operator&#x3D;(volatile const Foo&amp;);    &#x2F;&#x2F; assign from a volatile object to a volatile object    Foo&amp; operator&#x3D;(volatile const Foo&amp;) volatile;    &#x2F;&#x2F; remainder of class Foo&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链接指示：extern-“C”（Linkage-Directives：extern-“C”）"><a href="#链接指示：extern-“C”（Linkage-Directives：extern-“C”）" class="headerlink" title="链接指示：extern “C”（Linkage Directives：extern “C”）"></a>链接指示：extern “C”（Linkage Directives：extern “C”）</h3><p>C++程序有时需要调用使用其他语言编写的函数，最常见的是调用C语言函数。其他语言中的函数名字也必须在C++中进行声明。对于这些函数，编译器检查其调用的方式与处理普通C++函数的方式相同，但是生成的代码有所区别。C++使用链接指示指出任意非C++函数所用的语言。</p><p>链接指示有单个形式和复合形式，其不能出现在类定义或函数定义的内部。同样的链接指示必须出现在函数的每个声明处。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; illustrative linkage directives that might appear in the C++ header &lt;cstring&gt;&#x2F;&#x2F; single-statement linkage directiveextern &quot;C&quot; size_t strlen(const char *);&#x2F;&#x2F; compound-statement linkage directiveextern &quot;C&quot;&#123;    int strcmp(const char*, const char*);    char *strcat(char*, const char*);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接指示包含关键字<code>extern</code>、字符串字面值常量和一个函数声明。其中的字符串字面值常量指出了编写函数所用的语言。</p><p>复合形式的链接指示可以应用于整个头文件。当一个<code>#include</code>指示被放置在复合链接指示的花括号中时，头文件中的所有函数声明都会被认为是由链接指示的语言编写的。链接指示可以嵌套，因此如果头文件包含自带链接指示的函数，该函数不会受到影响。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; compound-statement linkage directiveextern &quot;C&quot;&#123;    #include &lt;string.h&gt;   &#x2F;&#x2F; C functions that manipulate C-style strings&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++从C语言继承的标准库函数可以定义成C函数，但并非必须。选择使用C还是C++实现C标准库，是由每个C++实现决定的。</p><p>编写函数所使用的语言是函数类型的一部分。因此对于使用链接指示定义的函数来说，它的每个声明都必须使用相同的链接指示，而且指向这类函数的指针也必须使用与函数本身一样的链接指示。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; pf points to a C function that returns void and takes an intextern &quot;C&quot; void (*pf)(int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指向C函数的指针与指向C++函数的指针是不同的类型，两者不能相互赋值或初始化（少数C++编译器支持这种赋值操作并将其视为对语言的扩展，但是从严格意义上来说它是非法的）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void (*pf1)(int);   &#x2F;&#x2F; points to a C++ functionextern &quot;C&quot; void (*pf2)(int);    &#x2F;&#x2F; points to a C functionpf1 &#x3D; pf2;   &#x2F;&#x2F; error: pf1 and pf2 have different types<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>链接指示不仅对函数本身有效，对作为返回类型或形参类型的函数指针也有效。所以如果希望给C++函数传入指向C函数的指针，必须使用类型别名。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; f1 is a C function; its parameter is a pointer to a C functionextern &quot;C&quot; void f1(void(*)(int));&#x2F;&#x2F; FC is a pointer to a C functionextern &quot;C&quot; typedef void FC(int);&#x2F;&#x2F; f2 is a C++ function with a parameter that is a pointer to a C functionvoid f2(FC *);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过链接指示定义函数，可以令C++函数在其他语言编写的程序中可用。编译器会为该函数生成适合于指定语言的代码。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; the calc function can be called from C programsextern &quot;C&quot; double calc(double dparm) &#123; &#x2F;* ... *&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果需要在C和C++中编译同一个源文件，可以在编译C++版本时使用预处理定义<code>__cplusplus</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"># ifdef __cplusplus&#x2F;&#x2F; ok: we&#39;re compiling C++extern &quot;C&quot;# endifint strcmp(const char*, const char*);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接指示与重载函数的相互作用依赖于目标语言。C语言不支持函数重载，所以一个C链接指示只能用于说明一组重载函数中的某一个。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; error: two extern &quot;C&quot; functions with the same nameextern &quot;C&quot; void print(const char*);extern &quot;C&quot; void print(int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-18-tools-for-large-programs/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-18-tools-for-large-programs/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第18章-用于大型程序的工具"><a href="#第18章-用于大型程序的工具" class="headerlink" title="第18章 用于大型程序的工具"></a>第18章 用于大型程序的工具</h1><h2 id="异常处理（Exception-Handling）"><a href="#异常处理（Exception-Handling）" class="headerlink" title="异常处理（Exception Handling）"></a>异常处理（Exception Handling）</h2><p>异常处理机制允许程序中独立开发的部分能够在运行期间就出现的问题进行通信并做出相应的处理，使问题检测和解决过程相互分离。</p><h3 id="抛出异常（Throwing-an-Exception）"><a href="#抛出异常（Throwing-an-Exception）" class="headerlink" title="抛出异常（Throwing an Exception）"></a>抛出异常（Throwing an Exception）</h3><p>在C++中，通过抛出（throwing）一条表达式来引发（raised）一个异常。被抛出的表达式类型和当前的调用链共同决定了应该使用哪段处理代码（handler）来处理该异常。被选中的处理代码是在调用链中与抛出对象类型匹配且距离最近的代码。</p><p>执行一个<code>throw</code>语句时，跟在<code>throw</code>后面的语句将不再执行。程序的控制权从<code>throw</code>转移到与之匹配的<code>catch</code>语句中。该<code>catch</code>可能是同一个函数中的局部<code>catch</code>，也可能位于直接或间接调用了发生异常的函数的另一个函数中。控制权的转移意味着两个问题：</p><ul><li>沿着调用链的函数可能会提前退出。</li><li>一旦程序开始执行异常处理代码，则沿着调用链创建的对象会被销毁。</li></ul><p>抛出异常后，程序暂停执行当前函数并立即寻找对应<code>catch</code>语句的过程叫做栈展开（stack unwinding）。栈展开沿着嵌套函数的调用链不断查找，直到找到了与异常匹配的<code>catch</code>语句为止。如果没有对应的<code>catch</code>语句，则退出主函数后查找过程结束。</p><ul><li>如果找到了匹配的<code>catch</code>语句，则程序进入该子句并执行其中的代码。<code>catch</code>语句执行结束后，程序会转移到与<code>try</code>块关联的最后一个<code>catch</code>语句之后的位置继续执行。</li><li>如果没有找到匹配的<code>catch</code>语句，程序会调用标准库的<code>terminate</code>函数，终止运行。</li></ul><p>在栈展开过程中，位于调用链上的语句块可能会提前退出，其中的局部对象也会被销毁。如果异常发生在构造函数或者数组及容器的元素初始化过程中，则当前的对象可能只构造了一部分，此时必须确保已构造的成员能被正确销毁。</p><p>如果一个块分配了资源，并且在执行资源释放代码前发生了异常，则资源不会被释放。</p><p>由于栈展开可能会调用析构函数，因此析构函数不应该抛出不能被它自身处理的异常。即，如果析构函数需要执行某个可能引发异常的操作，则该操作应该被放置在一个<code>try</code>语句块中，并在析构函数内部得到处理。实际编程中，析构函数仅仅是释放资源，不太可能引发异常。所有的标准库类型都能确保它们的析构函数不会引发异常。</p><p>编译器使用异常抛出表达式对异常对象（exception object）进行拷贝初始化，因此<code>throw</code>语句中的表达式必须具有完全类型。如果该表达式是类类型，则相应的类必须含有可访问的析构函数和拷贝/移动构造函数。如果该表达式是数组或函数类型，则表达式会被转换成对应的指针类型。</p><p>抛出一条表达式时，该表达式的静态编译类型决定了异常对象的类型。如果<code>throw</code>表达式解引用一个基类指针，而该指针实际指向派生类对象，则只有基类部分会被抛出。</p><p>抛出指针时必须确保在任何对应的处理代码中，指针指向的对象一定存在。</p><h3 id="捕获异常（Catching-an-Exception）"><a href="#捕获异常（Catching-an-Exception）" class="headerlink" title="捕获异常（Catching an Exception）"></a>捕获异常（Catching an Exception）</h3><p><code>catch</code>语句（catch clause）中的异常声明（exception declaration）类似只包含一个形参的函数形参列表。声明的类型决定了处理代码所能捕获的异常类型。该类型必须是完全类型，可以是左值引用，但不能是右值引用。如果<code>catch</code>无须访问抛出的表达式，则可以忽略捕获形参的名字。</p><p>进入<code>catch</code>语句后，使用异常对象初始化异常声明中的参数。<code>catch</code>参数的特性和函数参数类似。</p><ul><li>如果<code>catch</code>的参数类型是非引用类型，则该参数是异常对象的一个副本，改变参数不会影响异常对象本身。</li><li>如果<code>catch</code>的参数类型是引用类型，则该参数是异常对象的一个别名，改变参数就是改变异常对象本身。</li><li>在继承体系中，如果<code>catch</code>的参数类型是基类类型，则可以使用其派生类类型的异常对象对其初始化。<ul><li><code>catch</code>的参数是基类非引用类型时，异常对象会被切除一部分。</li><li><code>catch</code>的参数是基类引用类型时，以常规方式绑定到异常对象。</li></ul></li></ul><p>异常声明的静态类型决定了<code>catch</code>语句所能执行的操作。如果<code>catch</code>的参数是基类类型，则无法使用派生类特有的成员。</p><p>通常情况下，如果<code>catch</code>接受的异常与某个继承体系有关，则最好将<code>catch</code>参数定义为引用类型。</p><p>查找异常处理代码时，最终结果是第一个与异常匹配的<code>catch</code>语句，但这未必是最佳匹配。因此，越特殊的<code>catch</code>越应该位于整个<code>catch</code>列表的前端。当程序使用具有继承关系的异常时，派生类异常的处理代码应该位于基类异常的处理代码之前。</p><p>异常和异常声明的匹配规则比函数参数严格，绝大多数类型转换都不能使用。</p><ul><li>允许从非常量到常量的类型转换。</li><li>允许从派生类到基类的类型转换。</li><li>数组被转换成指向数组元素类型的指针，函数被转换成指向该函数类型的指针。</li></ul><p>除此之外，包括标准算术类型转换和类类型转换在内的其他所有转换规则都不能在<code>catch</code>匹配过程中使用。</p><p>有时一个单独的<code>catch</code>语句不能完整处理某个异常。执行完一些校正操作后，当前的<code>catch</code>可能会让位于调用链上层的函数继续处理异常。一个<code>catch</code>语句通过重新抛出（rethrowing）的操作将异常传递给另一个<code>catch</code>语句。重新抛出是一条不包含表达式的<code>throw</code>语句。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">throw;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>空<code>throw</code>语句只能出现在<code>catch</code>或<code>catch</code>语句调用的函数之内。如果在异常处理代码之外的区域遇到了空<code>throw</code>语句，编译器将调用<code>terminate</code>函数。</p><p>重新抛出语句不指定新的表达式，而是将当前的异常对象沿着调用链向上传递。如果<code>catch</code>语句修改了其参数并重新抛出异常，则只有当<code>catch</code>异常声明是引用类型时，程序对参数所做的改变才会被保留并继续传播。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">catch (my_error &amp;eObj)&#123;   &#x2F;&#x2F; specifier is a reference type    eObj.status &#x3D; errCodes::severeErr;  &#x2F;&#x2F; modifies the exception    object    throw;   &#x2F;&#x2F; the status member of the exception object is severeErr&#125;catch (other_error eObj)&#123;   &#x2F;&#x2F; specifier is a nonreference type    eObj.status &#x3D; errCodes::badErr;     &#x2F;&#x2F; modifies the local copy only    throw;   &#x2F;&#x2F; the status member of the exception object is unchanged&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用省略号<code>...</code>作为异常声明可以一次性捕获所有异常，这种处理代码被称为捕获所有异常（catch-all）的处理代码，可以与任意类型的异常相匹配。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">try&#123;    &#x2F;&#x2F; actions that cause an exception to be thrown&#125;catch (...)&#123;    &#x2F;&#x2F; work to partially handle the exception    throw;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>catch(…)</code>通常与重新抛出语句一起使用。</p><p>如果<code>catch(…)</code>与其他<code>catch</code>语句一起使用，则<code>catch(…)</code>必须位于最后，否则<code>catch(…)</code>后面的<code>catch</code>语句永远不会被匹配。</p><h3 id="函数try语句块与构造函数（Function-try-Blocks-and-Constructors）"><a href="#函数try语句块与构造函数（Function-try-Blocks-and-Constructors）" class="headerlink" title="函数try语句块与构造函数（Function try Blocks and Constructors）"></a>函数try语句块与构造函数（Function try Blocks and Constructors）</h3><p>要想处理构造函数初始值列表抛出的异常，必须将构造函数写成函数<code>try</code>语句块（function try block）的形式。函数<code>try</code>语句块使得一组<code>catch</code>语句可以同时处理构造函数体和构造函数初始化过程中的异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;Blob&lt;T&gt;::Blob(std::initializer_list&lt;T&gt; il) try :    data(std::make_shared&lt;std::vector&lt;T&gt;&gt;(il))&#123;    &#x2F;* empty body *&#x2F;&#125;catch(const std::bad_alloc &amp;e)&#123;    handle_out_of_memory(e);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数<code>try</code>语句块的<code>catch</code>语句会在结尾处隐式地重新抛出异常，通知上层函数对象构造失败。上层函数需要继续处理该异常。</p><p>在初始化构造函数参数时发生的异常不属于函数<code>try</code>语句块处理的范围。</p><h3 id="noexcept异常说明（The-noexcept-Exception-Specification）"><a href="#noexcept异常说明（The-noexcept-Exception-Specification）" class="headerlink" title="noexcept异常说明（The noexcept Exception Specification）"></a>noexcept异常说明（The noexcept Exception Specification）</h3><p>在C++11中，可以通过提供<code>noexcept</code>说明（noexcept specification）来指出某个函数不会抛出异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void recoup(int) noexcept;  &#x2F;&#x2F; won&#39;t throwvoid alloc(int);            &#x2F;&#x2F; might throw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>noexcept</code>说明的出现位置：</p><ul><li>关键字<code>noexcept</code>位于函数的参数列表之后，尾置返回类型之前。</li><li>对于一个函数来说，<code>noexcept</code>说明必须同时出现在该函数的所有声明和定义语句中。</li><li>函数指针的声明和定义也可以指定<code>noexcept</code>。</li><li>在<code>typedef</code>或类型别名中不能使用<code>noexcept</code>。</li><li>在成员函数中，关键字<code>noexcept</code>位于<code>const</code>或引用限定符之后，<code>final</code>、<code>override</code>或虚函数的<code>=0</code>之前。</li></ul><p>编译器并不会在编译时检查<code>noexcept</code>说明。如果一个函数在指定了<code>noexcept</code>的同时又含有<code>throw</code>语句或其他可能抛出异常的操作，仍然会通过编译（个别编译器可能会提出警告）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; this function will compile, even though it clearly violates its exception specificationvoid f() noexcept   &#x2F;&#x2F; promises not to throw any exception&#123;    throw exception();   &#x2F;&#x2F; violates the exception specification&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦<code>noexcept</code>函数抛出异常，程序会调用<code>terminate</code>函数终止运行（该过程是否执行栈展开未作规定）。因此<code>noexcept</code>可以用于两种情况：</p><ul><li>确认函数不会抛出异常。</li><li>不知道该如何处理函数抛出的异常。</li></ul><p>指明某个函数不会抛出异常可以让调用者不必再考虑异常处理操作。</p><p>早期的C++版本设计了一套更详细的异常说明方案。函数可以使用一个关键字<code>throw</code>，后面跟上用括号包围的异常类型列表，用于指定函数可能抛出的异常类型。关键字<code>throw</code>出现的位置与C++11的<code>noexcept</code>相同。该方案在C++11中被取消。但如果一个函数被声明为<code>throw()</code>的，则也说明该函数不会抛出异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void recoup(int) noexcept;   &#x2F;&#x2F; recoup doesn&#39;t throwvoid recoup(int) throw();   &#x2F;&#x2F; equivalent declaration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>noexcept</code>说明符接受一个可选的实参，该实参必须能转换为<code>bool</code>类型。如果实参为<code>true</code>，则函数不会抛出异常；如果实参为<code>false</code>，则函数可能抛出异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void recoup(int) noexcept(true);    &#x2F;&#x2F; recoup won&#39;t throwvoid alloc(int) noexcept(false);    &#x2F;&#x2F; alloc can throw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>noexcept</code>运算符（noexcept operator）是一个一元运算符，返回<code>bool</code>类型的右值常量表达式，表示给定的运算对象是否会抛出异常。和<code>sizeof</code>类似，<code>noexcept</code>运算符也不会对运算对象求值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">noexcept(e)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当<em>e</em>调用的函数都含有<code>noexcept</code>说明且<em>e</em>本身不含有<code>throw</code>语句时，上述表达式返回<code>true</code>，否则返回<code>false</code>。</p><p><code>noexcept</code>运算符通常在<code>noexcept</code>说明符的实参中使用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void f() noexcept(noexcept(g()));   &#x2F;&#x2F; f has same exception specifier as g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数指针与该指针指向的函数必须具有一致的异常说明。如果某个函数指针是<code>noexcept</code>的，则该指针只能指向<code>noexcept</code>函数；如果显式或隐式地说明了函数指针可能抛出异常，则该指针可以指向任何函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; both recoup and pf1 promise not to throwvoid (*pf1)(int) noexcept &#x3D; recoup;&#x2F;&#x2F; ok: recoup won&#39;t throw; it doesn&#39;t matter that pf2 mightvoid (*pf2)(int) &#x3D; recoup;pf1 &#x3D; alloc;    &#x2F;&#x2F; error: alloc might throw but pf1 said it wouldn&#39;tpf2 &#x3D; alloc;    &#x2F;&#x2F; ok: both pf2 and alloc might throw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个虚函数是<code>noexcept</code>的，则后续派生出来的虚函数必须也是<code>noexcept</code>的。如果基类的虚函数允许抛出异常，则派生类的对应函数既可以允许，也可以禁止抛出异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base&#123;public:    virtual double f1(double) noexcept;   &#x2F;&#x2F; doesn&#39;t throw    virtual int f2() noexcept(false);   &#x2F;&#x2F; can throw    virtual void f3();   &#x2F;&#x2F; can throw&#125;;class Derived : public Base&#123;public:    double f1(double);   &#x2F;&#x2F; error: Base::f1 promises not to throw    int f2() noexcept(false);   &#x2F;&#x2F; ok: same specification as Base::f2    void f3() noexcept;   &#x2F;&#x2F; ok: Derived f3 is more restrictive&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器合成拷贝控制成员时，也会生成一个异常声明。如果所有的成员和基类操作都含有<code>noexcept</code>说明，则合成成员也是<code>noexcept</code>的。</p><h3 id="异常类层次（Exception-Class-Hierarchies）"><a href="#异常类层次（Exception-Class-Hierarchies）" class="headerlink" title="异常类层次（Exception Class Hierarchies）"></a>异常类层次（Exception Class Hierarchies）</h3><p>标准库异常类的继承体系：</p><p><img src="Images/18-1.png" alt="18-1"></p><p><code>exception</code>类型只定义了拷贝构造函数、拷贝赋值运算符、一个虚析构函数和一个名为<code>what</code>的虚成员。<code>what</code>函数返回一个<code>const char*</code>，指向一个以<code>NULL</code>结尾的字符数组，并且不会抛出异常。</p><p><code>exception</code>、<code>bad_cast</code>和<code>bad_alloc</code>类型定义了默认构造函数。<code>runtime_error</code>和<code>logic_error</code>类型没有默认构造函数，但是有一个接受C风格字符串或<code>string</code>类型实参的构造函数，该实参通常用于提供错误信息。<code>what</code>函数返回用于初始化异常对象的错误信息。</p><p>实际编程中通常会自定义<code>exception</code>（或者<code>exception</code>的标准库派生类）的派生类以扩展其继承体系。这些面向具体应用的异常类表示了与应用相关的异常状态。</p><h2 id="命名空间（Namespaces）"><a href="#命名空间（Namespaces）" class="headerlink" title="命名空间（Namespaces）"></a>命名空间（Namespaces）</h2><p>大型应用程序通常会使用多个独立开发的库，其中某些名字可能会相互冲突。多个库将名字放置在全局命名空间中会产生命名空间污染（namespace pollution）。</p><p>命名空间分割了全局命名空间，其中每个命名空间都是一个作用域。</p><h3 id="命名空间定义（Namespace-Definitions）"><a href="#命名空间定义（Namespace-Definitions）" class="headerlink" title="命名空间定义（Namespace Definitions）"></a>命名空间定义（Namespace Definitions）</h3><p>命名空间的定义包含两部分：关键字<code>namespace</code>和随后的命名空间名字。在命名空间名字后面是一系列由花括号包围的声明和定义。能出现在全局作用域中的声明就也能出现在命名空间中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace cplusplus_primer&#123;    class Sales_data &#123; &#x2F; * ... * &#x2F;&#125;;    Sales_data operator+(const Sales_data&amp;, const Sales_data&amp;);    class Query &#123; &#x2F;* ... *&#x2F; &#125;;    class Query_base &#123; &#x2F;* ... *&#x2F;&#125;;&#125;   &#x2F;&#x2F; like blocks, namespaces do not end with a semicolon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名空间作用域后面不需要分号结束。</p><p>和其他名字一样，命名空间的名字也必须在定义它的作用域内保持唯一。命名空间可以定义在全局作用域内，也可以定义在其他命名空间中，但是不能定义在函数或类的内部。</p><p>每个命名空间都是一个作用域，不同命名空间内可以有相同名字的成员。</p><p>定义在某个命名空间中的名字可以被该命名空间内的其他成员直接访问，也可以被这些成员内嵌作用域中的任何单位访问。位于该命名空间之外的代码则必须明确指出所使用的名字属于哪个命名空间。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cplusplus_primer::Query q &#x3D; cplusplus_primer::Query(&quot;hello&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命名空间的定义可以是不连续的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace nsp&#123;    &#x2F;&#x2F; declarations&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果之前没有名为<em>nsp</em>的命名空间定义，则上述代码创建一个新的命名空间；否则，上述代码打开已经存在的命名空间定义并为其添加新的成员声明。</p><p>利用命名空间不连续的特性可以将几个独立的接口和实现文件组成一个命名空间。此时，命名空间的组织方式类似管理自定义类和函数的方式。</p><ul><li>命名空间的一部分成员用于定义类，以及声明作为类接口的函数和对象。这些成员应该放置在头文件中。</li><li>命名空间成员的定义部分放置在另外的源文件中。源文件需要包含对应的头文件。</li></ul><p>程序中的某些实体只能定义一次，如非内联函数、静态数据成员等，命名空间中定义的名字也需要满足该要求。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ---- Sales_data.h----&#x2F;&#x2F; #includes should appear before opening the namespace# include &lt;string&gt;namespace cplusplus_primer&#123;    class Sales_data &#123; &#x2F;* ... *&#x2F;&#125;;    Sales_data operator+(const Sales_data&amp;, const Sales_data&amp;);    &#x2F;&#x2F; declarations for the remaining functions in the Sales_data interface&#125;&#x2F;&#x2F; ---- Sales_data.cc----&#x2F;&#x2F; be sure any #includes appear before opening the namespace# include &quot;Sales_data.h&quot;namespace cplusplus_primer&#123;    &#x2F;&#x2F; definitions for Sales_data members and overloaded operators&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常情况下，<code>#include</code>不应该出现在命名空间内部。否则头文件中的所有名字都会被定义为该命名空间的成员。</p><p>定义多个类型不相关的命名空间时应该使用单独的文件分别表示每个类型。</p><p>可以在命名空间的外部定义该命名空间的成员。命名空间对于名字的声明必须在作用域内，同时该名字的定义需要明确指出其所属的命名空间。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; namespace members defined outside the namespace must use qualified namescplusplus_primer::Sales_datacplusplus_primer::operator+(const Sales_data&amp; lhs, const Sales_data&amp; rhs)&#123;    Sales_data ret(lhs);    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板特例化必须定义在原始模板所属的命名空间中。可以在命名空间内部添加模板特例化声明，而在外部对其进行定义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; we must declare the specialization as a member of stdnamespace std&#123;    template &lt;&gt; struct hash&lt;Sales_data&gt;;&#125;&#x2F;&#x2F; having added the declaration for the specialization to std&#x2F;&#x2F; we can define the specialization outside the std namespacetemplate &lt;&gt; struct std::hash&lt;Sales_data&gt;&#123;    size_t operator()(const Sales_data&amp; s) const    &#123;        return hash&lt;string&gt;()(s.bookNo) ^            hash&lt;unsigned&gt;()(s.units_sold) ^            hash&lt;double&gt;()(s.revenue);    &#125;    &#x2F;&#x2F; other members as before&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局作用域中定义的名字被隐式添加到全局命名空间（global namespace）中。全局命名空间以隐式方式声明，在所有程序中都存在。</p><p>作用域运算符<code>::</code>可以用于全局命名空间的成员。因为全局命名空间是隐式声明的，所以它并没有名字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">::member_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命名空间可以嵌套。嵌套的命名空间同时也是一个嵌套的作用域，它嵌套在外层命名空间的作用域内。内层命名空间声明的名字会隐藏外层命名空间的同名成员。在嵌套的命名空间中定义的名字只在内层命名空间中有效，外层命名空间中的代码在访问时需要在名字前添加限定符。</p><p>C++11新增了内联命名空间（inline namespace）。和一般的嵌套命名空间不同，内联命名空间中的名字可以被外层命名空间直接使用。定义内联命名空间的方式是在<code>namespace</code>前添加关键字<code>inline</code>。<code>inline</code>必须出现在该命名空间第一次定义的地方。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">inline namespace FifthEd&#123;    &#x2F;&#x2F; namespace for the code from the Primer Fifth Edition&#125;namespace FifthEd&#123;   &#x2F;&#x2F; implicitly inline    class Query_base &#123; &#x2F;* ... *&#x2F; &#125;;    &#x2F;&#x2F; other Query-related declarations&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当应用程序的代码在两次发布之间发生了改变时，通常会使用内联命名空间。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace FourthEd&#123;    class Item_base &#123; &#x2F;* ... *&#x2F;&#125;;    class Query_base &#123; &#x2F;* ... *&#x2F;&#125;;    &#x2F;&#x2F; other code from the Fourth Edition&#125;namespace cplusplus_primer&#123;    #include &quot;FifthEd.h&quot;    #include &quot;FourthEd.h&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<em>FifthEd</em>是内联的，所以形如<code>cplusplus_primer::</code>的代码可以直接获得<em>FifthEd</em>的成员。如果想使用早期版本，则必须加上完整的外层命名空间名字。</p><p>未命名的命名空间（unnamed namespace）指关键字<code>namespace</code>后紧跟以花括号包围的一系列声明语句。未命名的命名空间中定义的变量拥有静态生命周期：它们在第一次使用前创建，直到程序结束才销毁。</p><p>一个未命名的命名空间可以在某个给定的文件内不连续，但是不能跨越多个文件。每个文件定义自己的未命名的命名空间。如果一个头文件定义了未命名的命名空间，则该命名空间中定义的名字在每个包含该头文件的文件中对应不同实体。</p><p>定义在未命名的命名空间中的名字可以直接使用，不能对其使用作用域运算符。</p><p>定义在未命名的命名空间中的名字的作用域与该命名空间所在的作用域相同。如果未命名的命名空间定义在最外层作用域中，则该命名空间中的名字必须要与全局作用域中的名字有所区别。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i; &#x2F;&#x2F; global declaration for inamespace&#123;    int i;&#125;&#x2F;&#x2F; ambiguous: defined globally and in an unnested, unnamed namespacei &#x3D; 10;namespace local&#123;    namespace    &#123;        int i;    &#125;&#125;&#x2F;&#x2F; ok: i defined in a nested unnamed namespace is distinct from global ilocal::i &#x3D; 42;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在标准C++引入命名空间的概念之前，程序需要将名字声明为<code>static</code>的以令其对整个文件有效。在文件中进行静态声明的做法是从C语言继承而来的。在C语言中，声明为<code>static</code>的全局实体在其所在的文件之外不可见。该做法已经被C++标准取消，现在应该使用未命名的命名空间。</p><h3 id="使用命名空间成员（Using-Namespace-Members）"><a href="#使用命名空间成员（Using-Namespace-Members）" class="headerlink" title="使用命名空间成员（Using Namespace Members）"></a>使用命名空间成员（Using Namespace Members）</h3><p>可以使用关键字<code>namespace</code>和<code>=</code>为命名空间定义别名（namespace alias）。别名必须出现在命名空间的定义之后。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace primer &#x3D; cplusplus_primer;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个命名空间可以有多个别名，它们都与命名空间的原名等价。</p><p>一条<code>using</code>声明（using declaration）一次只引入命名空间的一个成员。</p><p><code>using</code>声明的有效范围从<code>using</code>声明语句开始，一直到<code>using</code>声明所在的作用域结束为止。在此过程中，外层作用域的同名实体会被隐藏。未加限定的名字只能在<code>using</code>声明所在的作用域及其内层作用域中使用。</p><p><code>using</code>声明可以出现在全局作用域、局部作用域、命名空间作用域和类的作用域中。在类的作用域中使用时，<code>using</code>声明只能指向基类成员。</p><p>和<code>using</code>声明不同，<code>using</code>指示使某个命名空间中的所有名字都可见。</p><p><code>using</code>指示可以出现在全局作用域、局部作用域和命名空间作用域中，不能出现在类的作用域中。</p><p>如果对<em>std</em>等命名空间使用了<code>using</code>指示而未做任何特殊控制的话，会重新引入多个库之间的名字冲突问题。</p><p> <code>using</code>指示具有将命名空间成员提升到包含命名空间本身和<code>using</code>指示的最近外层作用域的能力。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; namespace A and function f are defined at global scopenamespace A&#123;    int i, j;&#125;void f()&#123;    using namespace A;  &#x2F;&#x2F; injects the names from A into the global scope    cout &lt;&lt; i * j &lt;&lt; endl;  &#x2F;&#x2F; uses i and j from namespace A    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当命名空间被注入到其外层作用域之后，该命名空间中定义的名字可能会与其外层作用域的成员冲突。这种冲突允许存在，但是要想使用冲突的名字，就必须明确指出名字的版本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace blip&#123;    int i &#x3D; 16, j &#x3D; 15, k &#x3D; 23;    &#x2F;&#x2F; other declarations&#125;int j &#x3D; 0;  &#x2F;&#x2F; ok: j inside blip is hidden inside a namespacevoid manip()&#123;    &#x2F;&#x2F; using directive; the names in blip are &#39;&#39;added&#39;&#39; to the global scope    using namespace blip;   &#x2F;&#x2F; clash between ::j and blip::j    &#x2F;&#x2F; detected only if j is used    ++i;    &#x2F;&#x2F; sets blip::i to 17    ++j;    &#x2F;&#x2F; error ambiguous: global j or blip::j?    ++::j;  &#x2F;&#x2F; ok: sets global j to 1    ++blip::j;    &#x2F;&#x2F; ok: sets blip::j to 16    int k &#x3D; 97;   &#x2F;&#x2F; local k hides blip::k    ++k;    &#x2F;&#x2F; sets local k to 98&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件如果在其顶层作用域中使用<code>using</code>声明或<code>using</code>指示，则会将名字注入到包含该头文件的所有文件中。通常，头文件只负责定义接口部分的名字，而不定义实现部分的名字。因此，头文件最多只能在它的函数或命名空间内使用<code>using</code>声明或<code>using</code>指示。</p><p>相比于使用<code>using</code>指示，在程序中对命名空间中的每个成员分别使用<code>using</code>声明效果更好。</p><ul><li>如果程序使用了多个不同的库，而这些库中的名字通过<code>using</code>指示变得可见，则全局命名空间污染问题将重新出现。</li><li><code>using</code>指示引发的二义性错误只有在使用了冲突名字的地方才会被发现。而<code>using</code>声明引发的二义性错误在声明处就能发现。</li></ul><p>建议在命名空间本身的实现文件中使用<code>using</code>指示。</p><h3 id="类、命名空间与作用域（Classes，Namespaces，and-Scope）"><a href="#类、命名空间与作用域（Classes，Namespaces，and-Scope）" class="headerlink" title="类、命名空间与作用域（Classes，Namespaces，and Scope）"></a>类、命名空间与作用域（Classes，Namespaces，and Scope）</h3><p>对命名空间内部名字的查找遵循常规查找规则：由内向外依次查找每个外层作用域。只有位于开放的块中且在使用点之前声明的名字才会被考虑。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace A&#123;    int i;    namespace B    &#123;        int i;  &#x2F;&#x2F; hides A::i within B        int j;        int f1()        &#123;            int j;   &#x2F;&#x2F; j is local to f1 and hides A::B::j            return i;   &#x2F;&#x2F; returns B::i        &#125;    &#125;   &#x2F;&#x2F; namespace B is closed and names in it are no longer visible    int f2()    &#123;        return j;   &#x2F;&#x2F; error: j is not defined    &#125;    int j &#x3D; i;   &#x2F;&#x2F; initialized from A::i&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于位于命名空间中的类来说，名字的常规查找规则依然适用：当成员函数使用某个名字时，首先在该成员中查找，然后在类（包括基类）中查找，接着在外层作用域中查找。</p><p>可以从函数的限定名推断出名字查找时检查作用域的顺序，限定名以相反的顺序指出被查找的作用域。</p><p>命名空间中名字的隐藏规则有一个例外：传递给函数一个类类型的对象、指向类的引用或指针时，除了在常规作用域查找名字外，还会查找实参类所属的命名空间。该例外允许概念上作为类接口一部分的非成员函数无须单独的<code>using</code>声明就能被程序使用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::string s;std::cin &gt;&gt; s;&#x2F;&#x2F; 等价于std::operator&gt;&gt;(std::cin, s);&#x2F;&#x2F; 若该规则不存在，则必须为&gt;&gt;运算符提供using声明using std::operator&gt;&gt;;&#x2F;&#x2F; 或者显式使用std::operator&gt;&gt;std::operator&gt;&gt;(std::cin, s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准库定义的<code>move</code>和<code>forward</code>模板函数接受一个右值引用形参，可以匹配任何类型。如果应用程序也定义了一个接受单一参数的<code>move</code>和<code>forward</code>函数，则不管形参是什么类型，都会与标准库的版本冲突。对于这两个函数来说，冲突大多是无意的，因此建议使用它们的含有限定语的完整版本（即<code>std::move</code>、<code>std::forward</code>）。</p><p>如果一个未声明的类或函数第一次出现在友元声明中，则会被认定是离它最近的外层命名空间的成员。</p><h3 id="重载与命名空间（Overloading-and-Namespaces）"><a href="#重载与命名空间（Overloading-and-Namespaces）" class="headerlink" title="重载与命名空间（Overloading and Namespaces）"></a>重载与命名空间（Overloading and Namespaces）</h3><p><code>using</code>声明和<code>using</code>指示能将某些函数添加到候选函数集。</p><p>确定候选函数集时，会在函数的每个实参类（以及实参类的基类）所属的命名空间中搜索候选函数。这些命名空间中所有与被调用函数同名的函数都会被添加到候选集当中，即使其中某些函数在调用语句处不可见也是如此。</p><p><code>using</code>声明语句声明的是一个名字，而非一个特定的函数。一个<code>using</code>声明囊括了重载函数的所有版本以确保不违反命名空间的接口。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">using NS::print(int);   &#x2F;&#x2F; error: cannot specify a parameter listusing NS::print;        &#x2F;&#x2F; ok: using declarations specify names only<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个<code>using</code>声明引入的函数将重载该声明语句所属作用域中已有的其他同名函数。如果<code>using</code>声明出现在局部作用域中，则引入的名字会隐藏外层作用域的相关声明。如果<code>using</code>声明所在的作用域中已经有一个函数与引入的函数同名且形参列表相同，则该<code>using</code>声明会引发错误。除此之外，<code>using</code>声明将为引入的名字添加额外的重载实例，并最终扩充候选函数集的规模。</p><p><code>using</code>指示将命名空间的成员提升到外层作用域中，如果命名空间的某个函数与该命名空间所属作用域中的函数同名，则命名空间的函数会被添加到重载集合中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace libs_R_us&#123;    extern void print(int);    extern void print(double);&#125;&#x2F;&#x2F; ordinary declarationvoid print(const std::string &amp;);&#x2F;&#x2F; this using directive adds names to the candidate set for calls to print:using namespace libs_R_us;&#x2F;&#x2F; the candidates for calls to print at this point in the program are:&#x2F;&#x2F; print(int) from libs_R_us&#x2F;&#x2F; print(double) from libs_R_us&#x2F;&#x2F; print(const std::string &amp;) declared explicitlyvoid fooBar(int ival)&#123;    print(&quot;Value: &quot;);   &#x2F;&#x2F; calls global print(const string &amp;)    print(ival);        &#x2F;&#x2F; calls libs_R_us::print(int)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与<code>using</code>声明不同，<code>using</code>指示引入一个与已有函数形参列表完全相同的函数并不会引发错误。但需要明确指出调用的是命名空间中的函数版本还是当前作用域中的版本。</p><p>如果存在多个<code>using</code>指示，则来自每个命名空间的名字都会成为候选函数集的一部分。</p><h2 id="多重继承与虚继承（Multiple-and-Virtual-Inheritance）"><a href="#多重继承与虚继承（Multiple-and-Virtual-Inheritance）" class="headerlink" title="多重继承与虚继承（Multiple and Virtual Inheritance）"></a>多重继承与虚继承（Multiple and Virtual Inheritance）</h2><p>多重继承（Multiple inheritance）是指从多个直接基类中产生派生类的能力。多重继承的派生类继承了所有父类的属性。</p><h3 id="多重继承（Multiple-Inheritance）"><a href="#多重继承（Multiple-Inheritance）" class="headerlink" title="多重继承（Multiple Inheritance）"></a>多重继承（Multiple Inheritance）</h3><p>派生类的派生列表中可以包含多个基类。每个基类都包含一个可选的访问说明符。和单继承相同，如果访问说明符被省略，则关键字<code>class</code>对应的默认访问说明符是<code>private</code>，关键字<code>struct</code>对应的是<code>public</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Bear : public ZooAnimal &#123; &#x2F;* ... *&#x2F; &#125;;class Panda : public Bear, public Endangered &#123; &#x2F;* ... *&#x2F; &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和单继承相同，多重继承的派生列表也只能包含已经被定义过的类，且这些类不能是<code>final</code>的。</p><p>多重继承关系中，派生类对象包含每个基类的子对象。</p><p><img src="Images/18-2.png" alt="18-2"></p><p>构造一个多重继承的派生类对象将同时构造并初始化它的所有基类子对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; explicitly initialize both base classesPanda::Panda(std::string name, bool onExhibit)    : Bear(name, onExhibit, &quot;Panda&quot;),      Endangered(Endangered::critical) &#123; &#125;&#x2F;&#x2F; implicitly uses the Bear default constructor to initialize the Bear subobjectPanda::Panda()    : Endangered(Endangered::critical) &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>派生类的构造函数初始值列表将实参分别传递给每个直接基类。其中基类的构造顺序与派生列表中基类的出现顺序一致，与构造函数初始值列表中基类的顺序无关。</p><p>C++11允许派生类从它的一个或多个基类中继承构造函数，但如果从多个基类中继承了相同的构造函数（即形参列表完全相同），程序会产生错误。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Base1&#123;    Base1() &#x3D; default;    Base1(const std::string&amp;);    Base1(std::shared_ptr&lt;int&gt;);&#125;;struct Base2&#123;    Base2() &#x3D; default;    Base2(const std::string&amp;);    Base2(int);&#125;;&#x2F;&#x2F; error: D1 attempts to inherit D1::D1 (const string&amp;) from both base classesstruct D1: public Base1, public Base2&#123;    using Base1::Base1;   &#x2F;&#x2F; inherit constructors from Base1    using Base2::Base2;   &#x2F;&#x2F; inherit constructors from Base2&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个类从它的多个基类中继承了相同的构造函数，则必须为该构造函数定义其自己的版本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct D2: public Base1, public Base2&#123;    using Base1::Base1;    &#x2F;&#x2F; inherit constructors from Base1    using Base2::Base2;    &#x2F;&#x2F; inherit constructors from Base2    &#x2F;&#x2F; D2 must define its own constructor that takes a string    D2(const string &amp;s): Base1(s), Base2(s) &#123; &#125;    D2() &#x3D; default;   &#x2F;&#x2F; needed once D2 defines its own constructor&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和单继承相同，多重继承的派生类如果定义了自己的拷贝/赋值构造函数和赋值运算符，则必须在完整的对象上执行这些操作。只有当派生类使用的是合成版本的拷贝、移动或赋值成员时，才会自动处理其基类部分。在合成版本的拷贝控制成员中，每个基类分别使用自己的对应成员隐式地完成构造、赋值或销毁等工作。</p><h3 id="类型转换与多个基类（Conversions-and-Multiple-Base-Classes）"><a href="#类型转换与多个基类（Conversions-and-Multiple-Base-Classes）" class="headerlink" title="类型转换与多个基类（Conversions and Multiple Base Classes）"></a>类型转换与多个基类（Conversions and Multiple Base Classes）</h3><p>多重继承和单继承相同，某个可访问基类的指针或引用可以直接指向派生类对象。</p><p>编译器不会在派生类向基类的几种转换中进行比较和选择。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void print(const Bear&amp;);void print(const Endangered&amp;);Panda ying_yang(&quot;ying_yang&quot;);print(ying_yang);   &#x2F;&#x2F; error: ambiguous<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和单继承相同，对象、指针和引用的静态类型决定了我们可以使用的成员。</p><h3 id="多重继承下的类作用域（Class-Scope-under-Multiple-Inheritance）"><a href="#多重继承下的类作用域（Class-Scope-under-Multiple-Inheritance）" class="headerlink" title="多重继承下的类作用域（Class Scope under Multiple Inheritance）"></a>多重继承下的类作用域（Class Scope under Multiple Inheritance）</h3><p>在单继承中，派生类的作用域嵌套在直接基类和间接基类的作用域中。名称查找沿着继承体系自底向上进行，直到找到所需的名字。派生类的名字会隐藏基类的同名成员。在多重继承中，相同的查找过程在所有基类中同时进行。如果名字在多个基类中都被找到，则会产生二义性错误。</p><p>派生类可以从多个基类中分别继承名字相同的成员，但是在使用该名字时必须明确指出其版本。避免潜在二义性的最好方法是在派生类中定义新的版本。</p><h3 id="虚继承（Virtual-Inheritance）"><a href="#虚继承（Virtual-Inheritance）" class="headerlink" title="虚继承（Virtual Inheritance）"></a>虚继承（Virtual Inheritance）</h3><p>尽管在派生列表中同一个基类只能出现一次，但实际上派生类可以多次继承同一个类。派生类可以通过它的两个直接基类分别继承同一个间接基类，也可以直接继承某个基类，然后通过另一个基类再次间接继承该类。</p><p>默认情况下，派生类含有继承链上每个类对应的子部分。如果某个类在派生过程中出现了多次，则派生类中会包含该类的多个子对象。这种默认情况对某些类并不适用。例如<code>iostream</code>，它直接继承自<code>istream</code>和<code>ostream</code>，而<code>istream</code>和<code>ostream</code>都继承自<code>base_ios</code>，所以<code>iostream</code>继承了<code>base_ios</code>两次。如果<code>iostream</code>对象包含<code>base_ios</code>的两份拷贝，则无法在同一个缓冲区中进行读写操作。</p><p>虚继承可以让某个类共享它的基类，其中共享的基类子对象称为虚基类（virtual base class）。在该机制下，不论虚基类在继承体系中出现了多少次，派生类都只包含唯一一个共享的虚基类子对象。</p><p>通常情况下，使用虚继承的类层次是由一个人或一个项目组一次性设计完成的。对于一个独立开发的类来说，很少需要基类中的某一个是虚基类，况且新基类的开发者也无法改变已存在的类体系。</p><p>虚派生只影响从指定了虚基类的派生类中进一步派生出的类，它不会影响派生类本身。</p><p>指定虚基类的方式是在派生列表中添加关键字<code>virtual</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; the order of the keywords public and virtual is not significantclass Raccoon : public virtual ZooAnimal &#123; &#x2F;* ... *&#x2F; &#125;;class Bear : virtual public ZooAnimal &#123; &#x2F;* ... *&#x2F; &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果某个类指定了虚基类，则该类的派生仍按照常规方式进行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Panda : public Bear, public Raccoon, public Endangered &#123; &#x2F;* ... *&#x2F; &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Images/18-3.png" alt="18-3"></p><p>不论基类是不是虚基类，派生类对象都能被可访问基类的指针或引用操作。</p><p>因为在每个共享的虚基类中只有唯一一个共享的子对象，所以该基类的成员可以被直接访问，而且不会产生二义性。此外，如果虚基类的成员只被一条派生路径覆盖，则也可以直接访问该成员。但如果成员被多个基类覆盖，则一般情况下派生类必须为该成员定义新的版本。例如，假设类<em>B</em>定义了一个名为<em>X</em>的成员，<em>D1</em>和<em>D2</em>都从<em>B</em>虚继承得到，<em>D</em>继承了<em>D1</em>和<em>D2</em>。则在<em>D</em>的作用域中，<em>X</em>通过<em>D</em>的两个基类都是可见的。如果通过<em>D</em>的对象使用<em>X</em>，则有三种可能性：</p><ul><li>如果<em>D1</em>和<em>D2</em>中都没有<em>X</em>的定义，则<em>X</em>会被解析为<em>B</em>的成员，此时不存在二义性。</li><li>如果<em>D1</em>和<em>D2</em>中的某一个定义了<em>X</em>，派生类的<em>X</em>会比共享虚基类<em>B</em>的<em>X</em>优先级更高，此时同样没有二义性。</li><li>如果<em>D1</em>和<em>D2</em>都定义了<em>X</em>，则直接访问<em>X</em>会产生二义性问题。</li></ul><h3 id="构造函数与虚继承（Constructors-and-Virtual-Inheritance）"><a href="#构造函数与虚继承（Constructors-and-Virtual-Inheritance）" class="headerlink" title="构造函数与虚继承（Constructors and Virtual Inheritance）"></a>构造函数与虚继承（Constructors and Virtual Inheritance）</h3><p>在虚派生中，虚基类是由最低层的派生类初始化的。如果按普通规则处理，虚基类将会在多条继承路径上被重复初始化。</p><p>继承体系中的每个类都可能在某个时刻成为“最低层的派生类”。只要能创建虚基类的派生类对象，该派生类的构造函数就必须初始化它的虚基类。即使虚基类不是派生类的直接基类，构造函数也可以进行初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Bear::Bear(std::string name, bool onExhibit)    : ZooAnimal(name, onExhibit, &quot;Bear&quot;) &#123; &#125;Raccoon::Raccoon(std::string name, bool onExhibit)    : ZooAnimal(name, onExhibit, &quot;Raccoon&quot;) &#123; &#125;Panda::Panda(std::string name, bool onExhibit)    : ZooAnimal(name, onExhibit, &quot;Panda&quot;),      Bear(name, onExhibit),      Raccoon(name, onExhibit),      Endangered(Endangered::critical),      sleeping flag(false) &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造含有虚基类的对象时，首先使用提供给最低层派生类构造函数的初始值初始化该对象的虚基类子部分，之后再按照直接基类在派生列表中出现的顺序依次对其初始化。</p><p>一个类可以有多个虚基类，此时这些虚子对象按照它们在派生列表中出现的顺序依次构造。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-17-specialized-library-facilities/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-17-specialized-library-facilities/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第17章-标准库特殊设施"><a href="#第17章-标准库特殊设施" class="headerlink" title="第17章 标准库特殊设施"></a>第17章 标准库特殊设施</h1><h2 id="tuple类型（The-tuple-Type）"><a href="#tuple类型（The-tuple-Type）" class="headerlink" title="tuple类型（The tuple Type）"></a>tuple类型（The tuple Type）</h2><p><code>tuple</code>是类似<code>pair</code>的模板，定义在头文件<em>tuple</em>中。与<code>pair</code>不同，<code>tuple</code>可以有任意数量的成员。如果希望将一些数据组合成单一对象，但又不想定义新数据结构时，可以使用<code>tuple</code>（“快速而随意”的数据结构）。</p><p><img src="Images/17-1.png" alt="17-1"></p><h3 id="定义和初始化tuple（Defining-and-Initializing-tuples）"><a href="#定义和初始化tuple（Defining-and-Initializing-tuples）" class="headerlink" title="定义和初始化tuple（Defining and Initializing tuples）"></a>定义和初始化tuple（Defining and Initializing tuples）</h3><p>定义<code>tuple</code>时需要指定每个成员的类型。创建<code>tuple</code>对象时，可以使用<code>tuple</code>的默认构造函数，它会对每个成员进行值初始化。或者给每个成员提供初始值。包含初始值的构造函数是<code>explicit</code>的，因此必须使用直接初始化语法。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">tuple&lt;size_t, size_t, size_t&gt; threeD &#x3D; &#123; 1, 2, 3 &#125;;   &#x2F;&#x2F; errortuple&lt;size_t, size_t, size_t&gt; threeD&#123; 1, 2, 3 &#125;;      &#x2F;&#x2F; ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>类似<code>make_pair</code>，<code>make_tuple</code>函数可以生成<code>tuple</code>对象。<code>tuple</code>的类型由初始值决定。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; tuple that represents a bookstore transaction: ISBN, count, price per bookauto item &#x3D; make_tuple(&quot;0-999-78345-X&quot;, 3, 20.00);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用<code>get</code>访问<code>tuple</code>的成员。<code>get</code>是一个函数模板，使用时必须指定一个显式模板实参，表示要访问的成员索引。传递给<code>get</code>一个<code>tuple</code>实参后，会返回其指定成员的引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto book &#x3D; get&lt;0&gt;(item);    &#x2F;&#x2F; returns the first member of itemauto cnt &#x3D; get&lt;1&gt;(item);     &#x2F;&#x2F; returns the second member of itemauto price &#x3D; get&lt;2&gt;(item)&#x2F;cnt;    &#x2F;&#x2F; returns the last member of itemget&lt;2&gt;(item) *&#x3D; 0.8;    &#x2F;&#x2F; apply 20% discount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>tuple_size</code>和<code>tuple_element</code>这两个辅助类模板查询<code>tuple</code>成员的数量和类型。</p><ul><li><code>tuple_size</code>通过一个<code>tuple</code>类型来初始化，它有一个名为<code>value</code>的静态公有数据成员，类型为<code>size_t</code>，表示给定<code>tuple</code>中成员的数量。</li><li><code>tuple_element</code>通过一个索引值（整型常量）和一个<code>tuple</code>类型来初始化，它有一个名为<code>type</code>的公有数据成员，表示给定<code>tuple</code>中指定成员的类型。</li></ul><p>使用<code>decltype</code>可以确定一个对象的类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef decltype(item) trans;    &#x2F;&#x2F; trans is the type of item&#x2F;&#x2F; returns the number of members in object&#39;s of type transsize_t sz &#x3D; tuple_size&lt;trans&gt;::value;    &#x2F;&#x2F; returns 3&#x2F;&#x2F; cnt has the same type as the second member in itemtuple_element&lt;1, trans&gt;::type cnt &#x3D; get&lt;1&gt;(item);    &#x2F;&#x2F; cnt is an int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>tuple</code>的关系和相等运算符逐对比较两个<code>tuple</code>对象的成员。只有当两个<code>tuple</code>的成员数量相等时才可以进行比较。使用<code>tuple</code>的相等或不等运算符时，每对成员必须支持<code>==</code>运算符；使用<code>tuple</code>的关系运算符时，每对成员必须支持<code>&lt;</code>运算符。</p><p>由于<code>tuple</code>定义了<code>&lt;</code>和<code>==</code>运算符，因此<code>tuple</code>序列可以被传递给算法，无序容器的关键字也可以使用<code>tuple</code>类型。</p><h3 id="使用tuple返回多个值（Using-a-tuple-to-Return-Multiple-Values）"><a href="#使用tuple返回多个值（Using-a-tuple-to-Return-Multiple-Values）" class="headerlink" title="使用tuple返回多个值（Using a tuple to Return Multiple Values）"></a>使用tuple返回多个值（Using a tuple to Return Multiple Values）</h3><p><code>tuple</code>的一个常见用途是从一个函数返回多个值。</p><h2 id="bitset类型（The-bitset-Type）"><a href="#bitset类型（The-bitset-Type）" class="headerlink" title="bitset类型（The bitset Type）"></a>bitset类型（The bitset Type）</h2><p>标准库在头文件<em>bitset</em>中定义了<code>bitset</code>类，用于处理二进制位。<code>bitset</code>可以处理超过最长整型类型大小的位集合。</p><h3 id="定义和初始化bitset（Defining-and-Initializing-bitsets）"><a href="#定义和初始化bitset（Defining-and-Initializing-bitsets）" class="headerlink" title="定义和初始化bitset（Defining and Initializing bitsets）"></a>定义和初始化bitset（Defining and Initializing bitsets）</h3><p><code>bitset</code>类是一个模板，类似<code>array</code>，具有固定的大小。定义一个<code>bitset</code>时需要指明它包含的二进制位数。</p><p><img src="Images/17-2.png" alt="17-2"></p><p>使用一个整型值初始化<code>bitset</code>时，此值会被转换为<code>unsigned long long</code>类型并被当作位模式处理。<code>bitset</code>中的二进制位就是此模式的副本。如果<code>bitset</code>的大小大于<code>unsigned long long</code>中的二进制位数，剩余的高位会被置为0。如果<code>bitset</code>的大小小于<code>unsigned long long</code>中的二进制位数，则只使用给定值的低位部分。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; bitvec1 is smaller than the initializer; high-order bits from the initializer are discardedbitset&lt;13&gt; bitvec1 (0xbeef);    &#x2F;&#x2F; bits are 1111011101111&#x2F;&#x2F; bitvec2 is larger than the initializer; high-order bits in bitvec2 are set to zerobitset&lt;20&gt; bitvec2(0xbeef);     &#x2F;&#x2F; bits are 00001011111011101111&#x2F;&#x2F; on machines with 64-bit long long 0ULL is 64 bits of 0, so ~0ULL is 64 onesbitset&lt;128&gt; bitvec3(~0ULL);     &#x2F;&#x2F; bits 0 ... 63 are one; 63 ... 127 are zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>string</code>或字符数组指针来初始化<code>bitset</code>，字符直接表示位模式。使用字符串表示数时，字符串中下标最小的字符对应<code>bitset</code>的高位。如果<code>string</code>包含的字符数比<code>bitset</code>少，则<code>bitset</code>的高位被置为0。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bitset&lt;32&gt; bitvec4(&quot;1100&quot;); &#x2F;&#x2F; bits 2 and 3 are 1, all others are 0string str(&quot;1111111000000011001101&quot;);bitset&lt;32&gt; bitvec5(str, 5, 4);           &#x2F;&#x2F; four bits starting at str[5], 1100bitset&lt;32&gt; bitvec6(str, str.size()-4);   &#x2F;&#x2F; use last four characters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Images/17-3.png" alt="17-3"></p><h3 id="bitset操作（Operations-on-bitsets）"><a href="#bitset操作（Operations-on-bitsets）" class="headerlink" title="bitset操作（Operations on bitsets）"></a>bitset操作（Operations on bitsets）</h3><p><code>bitset</code>操作：</p><p><img src="Images/17-4.png" alt="17-4"></p><p><code>bitset</code>的下标运算符对<code>const</code>属性进行了重载。<code>const</code>版本的下标运算符在指定位置置位时返回<code>true</code>，否则返回<code>false</code>。非<code>const</code>版本返回<code>bitset</code>定义的一个特殊类型，用来控制指定位置的值。</p><p><code>to_ulong</code>和<code>to_ullong</code>操作用来提取<code>bitset</code>的值。只有当<code>bitset</code>的大小不大于对应操作的返回值（<code>to_ulong</code>为<code>unsigned long</code>，<code>to_ullong</code>为<code>unsigned long long</code>）时，才能使用这两个操作。如果<code>bitset</code>中的值不能存入给定类型，则会引发<code>overflow_error</code>异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unsigned long ulong &#x3D; bitvec3.to_ulong();cout &lt;&lt; &quot;ulong &#x3D; &quot; &lt;&lt; ulong &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>bitset</code>的输入运算符从输入流读取字符，保存到临时的<code>string</code>对象中。遇到下列情况时停止读取：</p><ul><li>读取的字符数达到对应<code>bitset</code>的大小。</li><li>遇到不是1和0的字符。</li><li>遇到文件结尾。</li><li>输入出现错误。</li></ul><p>读取结束后用临时<code>string</code>对象初始化<code>bitset</code>。如果读取的字符数小于<code>bitset</code>的大小，则<code>bitset</code>的高位被置为0。</p><h2 id="正则表达式（Regular-Expressions）"><a href="#正则表达式（Regular-Expressions）" class="headerlink" title="正则表达式（Regular Expressions）"></a>正则表达式（Regular Expressions）</h2><p>正则表达式是一种描述字符序列的方法。C++11新标准增加了正则表达式库（RE库），定义在头文件<em>regex</em>中，包含多个组件。</p><p><img src="Images/17-5.png" alt="17-5"></p><p><code>regex</code>类表示一个正则表达式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; find the characters ei that follow a character other than cstring pattern(&quot;[^c]ei&quot;);&#x2F;&#x2F; we want the whole word in which our pattern appearspattern &#x3D; &quot;[[:alpha:]]*&quot; + pattern + &quot;[[:alpha:]]*&quot;;regex r(pattern);    &#x2F;&#x2F; construct a regex to find patternsmatch results;      &#x2F;&#x2F; define an object to hold the results of a search&#x2F;&#x2F; define a string that has text that does and doesn&#39;t match patternstring test_str &#x3D; &quot;receipt freind theif receive&quot;;&#x2F;&#x2F; use r to find a match to pattern in test_strif (regex_search(test_str, results, r))     &#x2F;&#x2F; if there is a match    cout &lt;&lt; results.str() &lt;&lt; endl;     &#x2F;&#x2F; print the matching word<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>regex_match</code>和<code>regex_search</code>函数确定一个给定的字符序列与一个<code>regex</code>是否匹配。如果整个输入序列与表达式匹配，则<code>regex_match</code>函数返回<code>true</code>；如果输入序列中的一个子串与表达式匹配，则<code>regex_search</code>函数返回<code>true</code>。这两个函数的其中一个重载版本接受一个类型为<code>smatch</code>的附加参数。如果匹配成功，函数会将匹配信息保存在给定的<code>smatch</code>对象中。二者的参数形式如下：</p><p><img src="Images/17-6.png" alt="17-6"></p><h3 id="使用正则表达式库（Using-the-Regular-Expression-Library）"><a href="#使用正则表达式库（Using-the-Regular-Expression-Library）" class="headerlink" title="使用正则表达式库（Using the Regular Expression Library）"></a>使用正则表达式库（Using the Regular Expression Library）</h3><p>默认情况下，<code>regex</code>使用的正则表达式语言是ECMAScript。</p><p>定义一个<code>regex</code>或者对一个<code>regex</code>调用<code>assign</code>为其赋新值时，可以指定一些标志来影响<code>regex</code>的操作。<code>ECMAScript</code>、<code>basic</code>、<code>extended</code>、<code>awk</code>、<code>grep</code>和<code>egrep</code>这六个标志指定编写正则表达式时所使用的语言。这六个标志中必须设置其中之一，且只能设置一个。默认情况下，<code>ECMAScript</code>标志被设置，<code>regex</code>会使用ECMA-262规范，这也是很多Web浏览器使用的正则表达式语言。</p><p><img src="Images/17-7.png" alt="17-7"></p><p>正则表达式的语法是否正确是在运行期间解析的。如果正则表达式存在错误，标准库会抛出类型为<code>regex_error</code>的异常。除了<code>what</code>操作外，<code>regex_error</code>还有一个名为<code>code</code>的成员，用来返回错误类型对应的数值编码。<code>code</code>返回的值是由具体实现定义的。RE库能抛出的标准错误如下，<code>code</code>返回对应错误的编号（从0开始）。</p><p><img src="Images/17-8.png" alt="17-8"></p><p>正则表达式在程序运行时才编译，这是一个非常慢的操作。因此构造一个<code>regex</code>对象或者给一个已经存在的<code>regex</code>赋值是很耗时间的。为了最小化这种开销，应该尽量避免创建不必要的<code>regex</code>。特别是在循环中使用正则表达式时，应该在循环体外部创建<code>regex</code>对象。</p><p>RE库为不同的输入序列都定义了对应的类型。使用时RE库类型必须与输入类型匹配。</p><ul><li><code>regex</code>类保存<code>char</code>类型的正则表达式；<code>wregex</code>保存<code>wchar_t</code>类型的正则表达式。</li><li><code>smatch</code>表示<code>string</code>类型的输入序列；<code>cmatch</code>表示字符数组类型的输入序列；<code>wsmatch</code>表示<code>wstring</code>类型的输入序列；<code>wcmatch</code>表示宽字符数组类型的输入序列。</li></ul><p><img src="Images/17-9.png" alt="17-9"></p><h3 id="匹配与Regex迭代器类型（The-Match-and-Regex-Iterator-Types）"><a href="#匹配与Regex迭代器类型（The-Match-and-Regex-Iterator-Types）" class="headerlink" title="匹配与Regex迭代器类型（The Match and Regex Iterator Types）"></a>匹配与Regex迭代器类型（The Match and Regex Iterator Types）</h3><p><code>regex</code>迭代器是一种迭代器适配器，它被绑定到一个输入序列和一个<code>regex</code>对象上，每种输入类型都有对应的迭代器类型。</p><p><code>sregex_iterator</code>操作：</p><p><img src="Images/17-10.png" alt="17-10"></p><p>以<code>sregex_iterator</code>为例，将<code>sregex_iterator</code>绑定到一个<code>string</code>和一个<code>regex</code>对象时，迭代器自动定位至给定<code>string</code>中的第一个匹配位置。即，<code>sregex_iterator</code>构造函数对给定<code>string</code>和<code>regex</code>调用<code>regex_search</code>。解引用迭代器时，返回最近一次搜索结果的<code>smatch</code>对象。递增迭代器时，它调用<code>regex_search</code>在输入<code>string</code>中查找下一个匹配位置。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; find the characters ei that follow a character other than cstring pattern(&quot;[^c]ei&quot;);&#x2F;&#x2F; we want the whole word in which our pattern appearspattern &#x3D; &quot;[[:alpha:]]*&quot; + pattern + &quot;[[:alpha:]]*&quot;;regex r(pattern, regex::icase);     &#x2F;&#x2F; we&#39;ll ignore case in doing the match&#x2F;&#x2F; it will repeatedly call regex_search to find all matches in filefor (sregex_iterator it(file.begin(), file.end(), r), end_it;        it !&#x3D; end_it; ++it)    cout &lt;&lt; it-&gt;str() &lt;&lt; endl;   &#x2F;&#x2F; matched word<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Images/17-11.png" alt="17-11"></p><p>匹配类型有两个名为<code>prefix</code>和<code>suffix</code>的成员，分别返回表示输入序列中当前匹配之前和之后部分的<code>ssub_match</code>对象。一个<code>ssub_match</code>对象有两个名为<code>str</code>和<code>length</code>的成员，分别返回匹配的<code>string</code>和该<code>string</code>的长度。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; same for loop header as beforefor (sregex_iterator it(file.begin(), file.end(), r), end_it;    it !&#x3D; end_it; ++it)&#123;    auto pos &#x3D; it-&gt;prefix().length();    &#x2F;&#x2F; size of the prefix    pos &#x3D; pos &gt; 40 ? pos - 40 : 0;       &#x2F;&#x2F; we want up to 40 characters    cout &lt;&lt; it-&gt;prefix().str().substr(pos)          &#x2F;&#x2F; last part of the prefix        &lt;&lt; &quot;\n\t\t&gt;&gt;&gt; &quot; &lt;&lt; it-&gt;str() &lt;&lt; &quot; &lt;&lt;&lt;\n&quot;    &#x2F;&#x2F; matched word        &lt;&lt; it-&gt;suffix().str().substr(0, 40)         &#x2F;&#x2F; first part of the suffix        &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Images/17-12.png" alt="17-12"></p><p><code>smatch</code>支持的操作：</p><p><img src="Images/17-13.png" alt="17-13"></p><h3 id="使用子表达式（Using-Subexpressions）"><a href="#使用子表达式（Using-Subexpressions）" class="headerlink" title="使用子表达式（Using Subexpressions）"></a>使用子表达式（Using Subexpressions）</h3><p>正则表达式中的模式通常包含一个或多个子表达式。子表达式是模式的一部分，本身也有意义。正则表达式语法通常用括号表示子表达式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; r has two subexpressions: the first is the part of the file name before the period&#x2F;&#x2F; the second is the file extensionregex r(&quot;([[:alnum:]]+)\\.(cpp|cxx|cc)$&quot;, regex::icase);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>匹配对象除了提供匹配整体的相关信息外，还可以用来访问模式中的每个子表达式。子匹配是按位置来访问的，第一个子匹配位置为0，表示整个模式对应的匹配，随后是每个子表达式对应的匹配。</p><p>子表达式的一个常见用途是验证必须匹配特定格式的数据，如电话号码和电子邮箱地址。</p><p>ECMAScript正则表达式语言的一些特性：</p><ul><li>模式<code>[[:alnum:]]</code>匹配任意字母。</li><li>符号<code>+</code>表示匹配一个或多个字符。</li><li>符号<code>*</code>表示匹配零个或多个字符。</li><li><code>\&#123;d&#125;</code>表示单个数字，<code>\&#123;d&#125;&#123;n&#125;</code>表示一个n个数字的序列。</li><li>在方括号中的字符集合表示匹配这些字符中的任意一个。</li><li>后接<code>?</code>的组件是可选的。</li><li>类似C++，ECMAScript使用反斜线进行转义。由于模式包含括号，而括号是ECMAScript中的特殊字符，因此需要用<code>\(</code>和<code>\)</code>来表示括号是模式的一部分。</li></ul><p>因为反斜线<code>\</code>是C++中的特殊字符，所以在模式中使用<code>\</code>时，需要一个额外的反斜线进行转义。</p><p>子匹配操作：</p><p><img src="Images/17-14.png" alt="17-14"></p><h3 id="使用regex-replace（Using-regex-replace）"><a href="#使用regex-replace（Using-regex-replace）" class="headerlink" title="使用regex_replace（Using regex_replace）"></a>使用regex_replace（Using regex_replace）</h3><p>正则表达式替换操作：</p><p><img src="Images/17-15.png" alt="17-15"></p><p>标准库定义了用于在正则表达式替换过程中控制匹配或格式的标志。这些标志可以传递给<code>regex_search</code>、<code>regex_match</code>函数或者<code>smatch</code>类的<code>format</code>成员。匹配和格式化标志的类型为<code>match_flag_type</code>，定义在命名空间<em>regex_constants</em>中。由于<em>regex_constants</em>定义在<em>std</em>中，因此在使用这些名字时，需要同时加上两个命名空间的限定符。</p><p><img src="Images/17-16.png" alt="17-16"></p><p>默认情况下，<code>regex_replace</code>输出整个输入序列。未与正则表达式匹配的部分会原样输出，匹配的部分按照格式字符串指定的格式输出。使用<code>format_no_copy</code>标志可以只输出匹配部分。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; generate just the phone numbers: use a new format stringstring fmt2 &#x3D; &quot;$2.$5.$7 &quot;;    &#x2F;&#x2F; put space after the last number as a separator&#x2F;&#x2F; tell regex_replace to copy only the text that it replacescout &lt;&lt; regex_replace(s, r, fmt2, format_no_copy) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="随机数（Random-Numbers）"><a href="#随机数（Random-Numbers）" class="headerlink" title="随机数（Random Numbers）"></a>随机数（Random Numbers）</h2><p>在新标准出现之前，C和C++都依赖于一个简单的C库函数<code>rand</code>来生成随机数。该函数生成均匀分布的伪随机整数，每个随机数的范围在0和一个系统相关的最大值（至少为32767）之间。</p><p>头文件<em>random</em>中的随机数库定义了一组类来解决<code>rand</code>函数的一些问题：随机数引擎类（random-number engines）可以生成<code>unsigned</code>随机数序列；随机数分布类（random-number distribution classes）使用引擎类生成指定类型、范围和概率分布的随机数。</p><p><img src="Images/17-17.png" alt="17-17"></p><p>C++程序不应该使用<code>rand</code>函数，而应该使用<code>default_random_engine</code>类和恰当的分布类对象。</p><h3 id="随机数引擎和分布（Random-Number-Engines-and-Distribution）"><a href="#随机数引擎和分布（Random-Number-Engines-and-Distribution）" class="headerlink" title="随机数引擎和分布（Random-Number Engines and Distribution）"></a>随机数引擎和分布（Random-Number Engines and Distribution）</h3><p>随机数引擎是函数对象类，定义了一个不接受参数的调用运算符，返回一个随机<code>unsigned</code>整数。调用一个随机数引擎对象可以生成原始随机数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">default_random_engine e;    &#x2F;&#x2F; generates random unsigned integersfor (size_t i &#x3D; 0; i &lt; 10; ++i)    &#x2F;&#x2F; e() &quot;calls&quot; the object to produce the next random number    cout &lt;&lt; e() &lt;&lt; &quot; &quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>标准库定义了多个随机数引擎类，区别在于性能和随机性质量。每个编译器都会指定其中一个作为<code>default_random_engine</code>类型，此类型一般具有最常用的特性。</p><p>随机数引擎操作：</p><p><img src="Images/17-18.png" alt="17-18"></p><p>大多数情况下，随机数引擎的输出是不能直接使用的，因为生成的随机数范围通常与程序所需要的不符。</p><p>使用分布类对象可以得到指定范围的随机数。新标准库的<code>uniform_int_distribution&lt;unsigned&gt;</code>类型生成均匀分布的<code>unsigned</code>值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; uniformly distributed from 0 to 9 inclusiveuniform_int_distribution&lt;unsigned&gt; u(0,9);default_random_engine e;    &#x2F;&#x2F; generates unsigned random integersfor (size_t i &#x3D; 0; i &lt; 10; ++i)    &#x2F;&#x2F; u uses e as a source of numbers    &#x2F;&#x2F; each call returns a uniformly distributed value in the specified range    cout &lt;&lt; u(e) &lt;&lt; &quot; &quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似引擎类型，分布类型也是函数对象类。分布类型定义了一个接受一个随机数引擎参数的调用运算符。分布对象使用它的引擎参数生成随机数，并将其映射到指定的分布区间。</p><p>随机数发生器指分布对象和引擎对象的组合。</p><p><code>rand</code>函数的生成范围在0到<code>RAND_MAX</code>之间，随机数引擎生成的<code>unsigned</code>整数在一个系统定义的范围内。一个引擎类型的范围可以通过调用该类型对象的<code>min</code>和<code>max</code>成员来获得。</p><p>即使随机数发生器生成的数看起来是随机的，但对于一个给定的发生器，每次运行程序时它都会返回相同的数值序列。</p><p>如果函数需要局部的随机数发生器，应该将其（包括引擎和分布对象）定义为<code>static</code>对象，这样随机数发生器就能在函数调用期间保持状态。否则每次调用函数都会生成相同的序列。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; returns a vector of 100 uniformly distributed random numbersvector&lt;unsigned&gt; good_randVec()&#123;    &#x2F;&#x2F; because engines and distributions retain state, they usually should be    &#x2F;&#x2F; defined as static so that new numbers are generated on each call    static default_random_engine e;    static uniform_int_distribution&lt;unsigned&gt; u(0,9);    vector&lt;unsigned&gt; ret;    for (size_t i &#x3D; 0; i &lt; 100; ++i)        ret.push_back(u(e));    return ret;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过为引擎提供一个种子（seed），可以让引擎在程序每次运行时生成不同的序列。种子是一个数值，引擎利用它从序列中的一个新位置重新开始生成随机数。</p><p>为引擎设置种子有两种方式：</p><ul><li>在创建对象时提供种子。</li><li>调用引擎的<code>seed</code>成员设置种子。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">default_random_engine e1;    &#x2F;&#x2F; uses the default seeddefault_random_engine e2(2147483646);   &#x2F;&#x2F; use the given seed valuedefault_random_engine e3;    &#x2F;&#x2F; uses the default seed valuee3.seed(32767);     &#x2F;&#x2F; call seed to set a new seed value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>选择种子的常用方法是调用系统函数<code>time</code>。该函数定义在头文件<em>ctime</em>中，返回从一个特定时刻到当前经过的秒数。<code>time</code>函数接受单个指针参数，指向用于写入时间的数据结构。如果指针为空，则函数简单地返回时间。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">default_random_engine e1(time(0));   &#x2F;&#x2F; a somewhat random seed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于<code>time</code>函数返回以秒计算的时间，因此用<code>time</code>返回值作为种子的方式只适用于生成种子的间隔为秒级或更长时间的应用。另外如果程序作为一个自动过程的一部分反复运行，这种方式也会无效，可能多次使用的是相同的种子。</p><h3 id="其他随机数分布（Other-Kinds-of-Distributions）"><a href="#其他随机数分布（Other-Kinds-of-Distributions）" class="headerlink" title="其他随机数分布（Other Kinds of Distributions）"></a>其他随机数分布（Other Kinds of Distributions）</h3><p>从<code>rand</code>函数获得随机浮点数的一个常用但不正确的方法是用<code>rand</code>的结果除以<code>RAND_MAX</code>。但因为随机整数的精度通常低于随机浮点数，所以使用这种方法时，有一些浮点值永远不会被生成。</p><p>使用新标准库的<code>uniform_real_distribution</code>类型可以获得随机浮点数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">default_random_engine e;    &#x2F;&#x2F; generates unsigned random integers&#x2F;&#x2F; uniformly distributed from 0 to 1 inclusiveuniform_real_distribution&lt;double&gt; u(0,1);for (size_t i &#x3D; 0; i &lt; 10; ++i)    cout &lt;&lt; u(e) &lt;&lt; &quot; &quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分布类型操作：</p><p><img src="Images/17-19.png" alt="17-19"></p><p>除了总是生成<code>bool</code>类型的<code>bernouilli_distribution</code>外，其他分布类型都是模板。每个模板都接受单个类型参数，指定分布生成的结果类型。</p><p>分布类型限制了可以作为模板类型的参数类型，一些模板只能生成浮点数，而其他模板只能生成整数。分布类型还定义了一个默认模板类型参数，整型分布的默认参数是<code>int</code>，浮点数分布的默认参数是<code>double</code>。使用默认类型时应该在模板名后使用空尖括号。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; empty &lt;&gt; signify we want to use the default result typeuniform_real_distribution&lt;&gt; u(0,1);    &#x2F;&#x2F; generates double by default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>bernouilli_distribution</code>类型是一个普通类，而非模板。该分布返回一个<code>bool</code>值，其中<code>true</code>的概率是一个常数，默认为0.5。</p><p>由于引擎会返回相同的随机数序列，因此需要在循环中使用引擎时，必须在循环体外定义引擎对象。否则每次循环都会创建新引擎，生成相同序列。同样，分布对象也需要保持运行状态，也必须在循环体外定义。</p><h2 id="IO库再探（The-IO-Library-Revisited）"><a href="#IO库再探（The-IO-Library-Revisited）" class="headerlink" title="IO库再探（The IO Library Revisited）"></a>IO库再探（The IO Library Revisited）</h2><h3 id="格式化输入与输出（Formatted-Input-and-Output）"><a href="#格式化输入与输出（Formatted-Input-and-Output）" class="headerlink" title="格式化输入与输出（Formatted Input and Output）"></a>格式化输入与输出（Formatted Input and Output）</h3><p>除了条件状态外，每个<code>iostream</code>对象还维护着一个格式状态来控制IO格式化细节。</p><p>标准库定义了一组操纵符（manipulator）来修改流的格式状态。操纵符是一个函数或对象，会影响流的状态，并能作为输入和输出运算符的运算对象。类似输入和输出运算符，操纵符也返回它所处理的流对象。</p><p>操纵符用于两大类输出控制：控制数值的输出格式，控制补白的数量和位置。</p><p>操纵符改变流的格式状态时，通常改变后的状态对所有后续IO都生效。大多数改变格式状态的操纵符都是设置/复原成对的，一个操纵符用于设置新格式，另一个用于恢复正常格式。</p><p>默认情况下，<code>bool</code>值输出为1（<code>true</code>）或0（<code>false</code>）。对流使用<code>boolalpha</code>操纵符可以输出<code>true</code>或<code>false</code>，还原格式时使用<code>noboolalpha</code>操纵符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; &quot;default bool values: &quot; &lt;&lt; true &lt;&lt; &quot; &quot; &lt;&lt; false    &lt;&lt; &quot;\nalpha bool values: &quot; &lt;&lt; boolalpha    &lt;&lt; true &lt;&lt; &quot; &quot; &lt;&lt; false &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">default bool values: 1 0alpha bool values: true false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，整型值的输入输出使用十进制。可以使用<code>hex</code>、<code>oct</code>和<code>dec</code>操纵符将其改为十六进制、八进制或改回十进制。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; &quot;default: &quot; &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;cout &lt;&lt; &quot;octal: &quot; &lt;&lt; oct &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;cout &lt;&lt; &quot;hex: &quot; &lt;&lt; hex &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;cout &lt;&lt; &quot;decimal: &quot; &lt;&lt; dec &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">default: 20 1024octal: 24 2000hex: 14 400decimal: 20 1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>hex</code>、<code>oct</code>和<code>dec</code>操纵符只影响整型运算对象，浮点值的表示形式不受影响。</p><p>默认情况下，在输出数值时，没有可见的标识指出当前使用的进制模式。如果需要输出八进制或十六进制值，应该使用<code>showbase</code>操纵符。对流应用<code>showbase</code>后，在输出结果中会显示进制，显示模式和指定整型常量进制的规范相同。</p><ul><li>前导<code>0x</code>表示十六进制。</li><li>前导<code>0</code>表示八进制。</li><li>无前导字符表示十进制。</li></ul><p>还原格式时使用<code>noshowbase</code>操纵符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; showbase;    &#x2F;&#x2F; show the base when printing integral valuescout &lt;&lt; &quot;default: &quot; &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;cout &lt;&lt; &quot;in octal: &quot; &lt;&lt; oct &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;cout &lt;&lt; &quot;in hex: &quot; &lt;&lt; hex &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;cout &lt;&lt; &quot;in decimal: &quot; &lt;&lt; dec &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024 &lt;&lt; endl;cout &lt;&lt; noshowbase;   &#x2F;&#x2F; reset the state of the stream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">default: 20 1024in octal: 024 02000in hex: 0x14 0x400in decimal: 20 1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，十六进制值（包括前导字符）以小写格式输出。使用<code>uppercase</code>操纵符可以输出大写字母。还原格式时使用<code>nouppercase</code>操纵符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; uppercase &lt;&lt; showbase &lt;&lt; hex    &lt;&lt; &quot;printed in hexadecimal: &quot; &lt;&lt; 20 &lt;&lt; &quot; &quot; &lt;&lt; 1024    &lt;&lt; nouppercase &lt;&lt; noshowbase &lt;&lt; dec &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">printed in hexadecimal: 0X14 0X400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浮点数的输出格式涉及三个方面：</p><ul><li>输出精度（即输出多少个数字）。</li><li>十六进制、定点十进制或者科学记数法形式输出。</li><li>没有小数部分的浮点值是否输出小数点。</li></ul><p>默认情况下，浮点值按六位数字精度输出；如果浮点值没有小数部分，则不输出小数点；根据浮点数的值选择输出为定点十进制或科学计数法形式：非常大或非常小的值输出为科学记数法形式，其他值输出为定点十进制形式。</p><p>默认情况下，精度控制输出的数字总位数。输出时，浮点值按照当前精度四舍五入而非截断。</p><p>调用IO对象的<code>precision</code>成员或者使用<code>setprecision</code>操纵符可以改变精度。</p><ul><li><code>precision</code>成员是重载的。一个版本接受一个<code>int</code>值，将精度设置为此值，并返回旧精度值。另一个版本不接受参数，直接返回当前精度值。</li><li><code>setprecision</code>操纵符接受一个参数来设置精度。</li></ul><p><code>setprecision</code>操纵符和其他接受参数的操纵符都定义在头文件<em>iomanip</em>中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; cout.precision reports the current precision valuecout &lt;&lt; &quot;Precision: &quot; &lt;&lt; cout.precision()    &lt;&lt; &quot;, Value: &quot; &lt;&lt; sqrt(2.0) &lt;&lt; endl;&#x2F;&#x2F; cout.precision(12) asks that 12 digits of precision be printedcout.precision(12);cout &lt;&lt; &quot;Precision: &quot; &lt;&lt; cout.precision()    &lt;&lt; &quot;, Value: &quot; &lt;&lt; sqrt(2.0) &lt;&lt; endl;&#x2F;&#x2F; alternative way to set precision using the setprecision manipulatorcout &lt;&lt; setprecision(3);cout &lt;&lt; &quot;Precision: &quot; &lt;&lt; cout.precision()    &lt;&lt; &quot;, Value: &quot; &lt;&lt; sqrt(2.0) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">Precision: 6, Value: 1.41421Precision: 12, Value: 1.41421356237Precision: 3, Value: 1.41<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义在头文件<em>iostream</em>中的操纵符：</p><p><img src="Images/17-20.png" alt="17-20"></p><p>操纵符可以强制流使用科学记数法、定点十进制或十六进制形式输出浮点值。</p><ul><li><code>scientific</code>使用科学记数法表示浮点值。</li><li><code>fixed</code>使用定点十进制表示浮点值。</li><li><code>hexfloat</code>（新标准库）使用十六进制表示浮点值。</li><li><code>defaultfloat</code>（新标准库）将流恢复到默认状态。</li></ul><p>除非程序需要控制浮点数的表示方式，否则最好由标准库来选择计数法。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; &quot;default format: &quot; &lt;&lt; 100 * sqrt(2.0) &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;scientific: &quot; &lt;&lt; scientific &lt;&lt; 100 * sqrt(2.0) &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;fixed decimal: &quot; &lt;&lt; fixed &lt;&lt; 100 * sqrt(2.0) &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;hexadecimal: &quot; &lt;&lt; hexfloat &lt;&lt; 100 * sqrt(2.0) &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;use defaults: &quot; &lt;&lt; defaultfloat &lt;&lt; 100 * sqrt(2.0) &lt;&lt; &#39;\n&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">default format: 141.421scientific: 1.414214e+002fixed decimal: 141.421356hexadecimal: 0x1.1ad7bcp+7use defaults: 141.421<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>scientific</code>、<code>fixed</code>和<code>hexfloat</code>操纵符会改变流的精度含义。执行这些操纵符后，精度控制的将是小数点后面的数字位数，而默认情况下控制的是数字总位数。</p><p>默认情况下，当浮点值的小数部分为0时，不显示小数点。使用<code>showpoint</code>操纵符可以强制输出小数点，<code>noshowpoint</code>操纵符还原默认行为。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; 10.0 &lt;&lt; endl;        &#x2F;&#x2F; prints 10cout &lt;&lt; showpoint &lt;&lt; 10.0    &#x2F;&#x2F; prints 10.0000    &lt;&lt; noshowpoint &lt;&lt; endl;  &#x2F;&#x2F; revert to default format for the decimal point<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按列输出时，通常需要非常精细地控制数据格式。</p><ul><li><code>setw</code>指定下一个数字或字符串值的最小空间。</li><li><code>left</code>表示左对齐输出。</li><li><code>right</code>表示右对齐输出（默认格式）。</li><li><code>internal</code>控制负数的符号位置，它左对齐符号，右对齐值，中间空间用空格填充。</li><li><code>setfill</code>指定一个字符代替默认的空格进行补白。</li></ul><p><code>setw</code>类似<code>endl</code>，不改变输出流的内部状态，只影响下一次输出的大小。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; -16;double d &#x3D; 3.14159;&#x2F;&#x2F; pad the first column to use a minimum of 12 positions in the outputcout &lt;&lt; &quot;i: &quot; &lt;&lt; setw(12) &lt;&lt; i &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;d: &quot; &lt;&lt; setw(12) &lt;&lt; d &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;;&#x2F;&#x2F; pad the first column and left-justify all columnscout &lt;&lt; left    &lt;&lt; &quot;i: &quot; &lt;&lt; setw(12) &lt;&lt; i &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;d: &quot; &lt;&lt; setw(12) &lt;&lt; d &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;    &lt;&lt; right;   &#x2F;&#x2F; restore normal justification&#x2F;&#x2F; pad the first column and right-justify all columnscout &lt;&lt; right    &lt;&lt; &quot;i: &quot; &lt;&lt; setw(12) &lt;&lt; i &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;d: &quot; &lt;&lt; setw(12) &lt;&lt; d &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;;&#x2F;&#x2F; pad the first column but put the padding internal to the fieldcout &lt;&lt; internal    &lt;&lt; &quot;i: &quot; &lt;&lt; setw(12) &lt;&lt; i &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;d: &quot; &lt;&lt; setw(12) &lt;&lt; d &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;;&#x2F;&#x2F; pad the first column, using # as the pad charactercout &lt;&lt; setfill(&#39;#&#39;)    &lt;&lt; &quot;i: &quot; &lt;&lt; setw(12) &lt;&lt; i &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;    &lt;&lt; &quot;d: &quot; &lt;&lt; setw(12) &lt;&lt; d &lt;&lt; &quot;next col&quot; &lt;&lt; &#39;\n&#39;    &lt;&lt; setfill(&#39; &#39;);    &#x2F;&#x2F; restore the normal pad character<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">i: -16next cold: 3.14159next coli: -16 next cold: 3.14159 next coli: -16next cold: 3.14159next coli: - 16next cold: 3.14159next coli: -#########16next cold: #####3.14159next col<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件<em>iomanip</em>中定义的操纵符：</p><p><img src="Images/17-21.png" alt="17-21"></p><p>默认情况下，输入运算符会忽略空白字符（空格符、制表符、换行符、换纸符和回车符）。使用<code>noskipws</code>操纵符可以让输入运算符读取空白符，<code>skipws</code>操纵符还原默认行为。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cin &gt;&gt; noskipws;    &#x2F;&#x2F; set cin so that it reads whitespacewhile (cin &gt;&gt; ch)    cout &lt;&lt; ch;cin &gt;&gt; skipws;      &#x2F;&#x2F; reset cin to the default state so that it discards whitespace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="未格式化的输入-输出操作（Unformatted-Input-Output-Operations）"><a href="#未格式化的输入-输出操作（Unformatted-Input-Output-Operations）" class="headerlink" title="未格式化的输入/输出操作（Unformatted Input/Output Operations）"></a>未格式化的输入/输出操作（Unformatted Input/Output Operations）</h3><p>标准库提供了一组低层操作，支持未格式化IO（unformatted IO）。这些操作可以将一个流当作无解释的字节序列来处理。</p><p>一些未格式化操作每次处理流的一个字节，它们会读取而不是忽略空白符。</p><p><img src="Images/17-22.png" alt="17-22"></p><p>使用未格式化IO操作<code>get</code>和<code>put</code>可以读取和写入一个字符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char ch;while (cin.get(ch))    cout.put(ch);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有时读取完一个字符后才发现目前无法处理该字符，希望将其放回流中。标准库提供了三种方法退回字符。</p><ul><li><code>peek</code>返回输入流中下一个字符的副本，但不会将其从流中删除。</li><li><code>unget</code>使输入流向后移动，令最后读取的值回到流中。即使不知道最后从流中读取了什么值，也可以调用<code>unget</code>。</li><li><code>putback</code>是特殊版本的<code>unget</code>，它退回从流中读取的最后一个值，但它接受一个参数，该参数必须与最后读取的值相同。</li></ul><p>一般情况下，在读取下一个值之前，标准库保证程序可以退回最多一个值。</p><p><code>peek</code>和无参数的<code>get</code>函数都以<code>int</code>类型从输入流返回字符。这些函数使用<code>int</code>的原因是可以返回文件尾标记。<code>char</code>范围中的每个值都表示一个真实字符，因此没有额外的值可以表示文件尾。返回<code>int</code>的函数先将要返回的字符转换为<code>unsigned char</code>，再将结果提升为<code>int</code>。因此即使字符集中有字符映射到负值，返回的<code>int</code>也是正值。而标准库使用负值表示文件尾，这样就能保证文件尾与任何合法字符的值都不相同。头文件<em>cstdio</em>定义了一个名为<code>EOF</code>的常量值，可以用它检测函数返回的值是否是文件尾。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ch;    &#x2F;&#x2F; use an int, not a char to hold the return from get()&#x2F;&#x2F; loop to read and write all the data in the inputwhile ((ch &#x3D; cin.get()) !&#x3D; EOF)    cout.put(ch);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个常见的编程错误是将<code>get</code>或<code>peek</code>函数的返回值赋给<code>char</code>而非<code>int</code>对象，但编译器不能发现这个错误。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char ch;   &#x2F;&#x2F; using a char here invites disaster!&#x2F;&#x2F; the return from cin.get is converted to char and then compared to an intwhile ((ch &#x3D; cin.get()) !&#x3D; EOF)    cout.put(ch);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>get</code>返回<code>EOF</code>时，该值会先被转换为<code>unsigned char</code>，之后提升得到的<code>int</code>值与<code>EOF</code>值不再相等，因此循环永远不会停止。</p><p>一些未格式化IO操作一次处理大块数据，这些操作可以提高程序执行速度，但需要自己分配并管理用来保存和提取数据的字符数组。</p><p><img src="Images/17-23.png" alt="17-23"></p><p><code>get</code>和<code>getline</code>函数接受相同的参数，它们的行为类似但不相同。两个函数都一直读取数据，直到遇到下列情况之一：</p><ul><li>已经读取了<em>size - 1</em>个字符。</li><li>遇到了文件尾（<code>EOF</code>）。</li><li>遇到了分隔符。</li></ul><p>两个函数的区别在于处理分隔符的方式：<code>get</code>将分隔符留在输入流中作为下一个字符，而<code>getline</code>读取并丢弃分隔符。两个函数都不会将分隔符保存在结果数组中。</p><p>读取流数据时的一个常见错误是忘记从流中删除分隔符。</p><p>一些操作可能从输入流中读取了未知个数的字节，使用<code>gcount</code>函数可以确定上一次未格式化输入操作读取了多少字符。<code>gcount</code>函数应该在任何后续未格式化输入操作前调用，将字符退回流的操作也属于未格式化输入操作。如果在调用<code>gcount</code>前使用了<code>peek</code>、<code>unget</code>或<code>putback</code>操作，则<code>gcount</code>的返回值为0。</p><p>使用<code>clear</code>、<code>ignore</code>和<code>sync</code>函数可以清空输入流中的数据。读到非法字符时，输入流将处于错误状态。为了继续获取输入数据，先调用<code>clear</code>函数重置流的错误标记。再调用<code>ignore</code>清空流中指定大小的数据，或者调用<code>sync</code>直接清空流中所有数据。<code>numeric_limits&lt;streamsize&gt;::max()</code>返回流的缓冲区大小。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 重置错误标志cin.clear();&#x2F;&#x2F; 清除流中所有数据cin.clear();cin.ignore(numeric_limits&lt;streamsize&gt;::max());&#x2F;&#x2F; 清除流中一行数据cin.ignore(numeric_limits&lt;streamsize&gt;::max(), &#39;\n&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流随机访问（Random-Access-to-a-Stream）"><a href="#流随机访问（Random-Access-to-a-Stream）" class="headerlink" title="流随机访问（Random Access to a Stream）"></a>流随机访问（Random Access to a Stream）</h3><p>随机IO本质上是依赖于操作系统的。</p><p>为了支持随机访问，IO类型通过维护一个标记来确定下一次读写操作的位置。<code>seek</code>函数用于移动标记，<code>tell</code>函数用于获取标记。标准库实际上定义了两对<code>seek</code>和<code>tell</code>函数，一对用于输入流（后缀为<code>g</code>，表示get），一对用于输出流（后缀为<code>p</code>，表示put）。</p><p><img src="Images/17-24.png" alt="17-24"></p><p>虽然标准库为所有流类型都定义了<code>seek</code>和<code>tell</code>函数，但它们是否有意义取决于流绑定到哪个设备。在大多数系统中，绑定到<code>cin</code>、<code>cout</code>、<code>cerr</code>和<code>clog</code>的流不支持随机访问。对这些流可以调用<code>seek</code>和<code>tell</code>函数，但在运行时会出现错误，流也会被置为无效状态。</p><p>从逻辑上考虑，<code>seek</code>和<code>tell</code>函数的使用范围如下：</p><ul><li>可以对<code>istream</code>、<code>ifstream</code>、<code>istringstream</code>类型使用<code>g</code>版本。</li><li>可以对<code>ostream</code>、<code>ofstream</code>、<code>ostringstream</code>类型使用<code>p</code>版本。</li><li>可以对<code>iostream</code>、<code>fstream</code>、<code>stringstream</code>类型使用<code>g</code>和<code>p</code>版本。</li></ul><p>一个流中只有一个标记——不存在独立的读标记和写标记。<code>fstream</code>和<code>stringstream</code>类型可以读写同一个流。在这些类型中，有单一的缓冲区用于保存读写的数据，同时标记也只有一个，表示缓冲区中的当前位置。标准库将两个版本的<code>seek</code>和<code>tell</code>函数都映射到这个标记。</p><p>由于流中只有一个标记，因此在切换读写操作时，必须使用<code>seek</code>函数来重定位标记。</p><p><code>seek</code>函数有两个重载版本：一个版本使用绝对地址移动流标记；另一个版本使用指定位置和偏移量移动流标记。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; set the marker to a fixed positionseekg(new_position);    &#x2F;&#x2F; set the read marker to the given pos_type locationseekp(new_position);    &#x2F;&#x2F; set the write marker to the given pos_type location&#x2F;&#x2F; offset some distance ahead of or behind the given starting pointseekg(offset, from);    &#x2F;&#x2F; set the read marker offset distance from fromseekp(offset, from);    &#x2F;&#x2F; offset has type off_type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数<em>new_position</em>和<em>offset</em>的类型分别是<code>pos_type</code>和<code>off_type</code>，这两个类型都是机器相关的，定义在头文件<em>istream</em>和<em>ostream</em>中。<code>pos_type</code>表示文件位置，而<code>off_type</code>表示距离当前位置的偏移量，偏移量可以是正数也可以是负数。</p><p><code>tellg</code>和<code>tellp</code>函数返回一个<code>pos_type</code>值，表示流的当前位置。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-16-templates-and-generic-programming/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-16-templates-and-generic-programming/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第16章-模板与泛型编程"><a href="#第16章-模板与泛型编程" class="headerlink" title="第16章 模板与泛型编程"></a>第16章 模板与泛型编程</h1><h2 id="定义模板（Defining-a-Template）"><a href="#定义模板（Defining-a-Template）" class="headerlink" title="定义模板（Defining a Template）"></a>定义模板（Defining a Template）</h2><h3 id="函数模板（Function-Templates）"><a href="#函数模板（Function-Templates）" class="headerlink" title="函数模板（Function Templates）"></a>函数模板（Function Templates）</h3><p>函数模板可以用来生成针对特定类型的函数版本。</p><p>模板定义以关键字<code>template</code>开始，后跟一个模板参数列表（template parameter list）。模板参数列表以尖括号<code>&lt;&gt;</code>包围，内含用逗号分隔的一个或多个模板参数（template parameter）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;int compare(const T &amp;v1, const T &amp;v2)&#123;    if (v1 &lt; v2) return -1;    if (v2 &lt; v1) return 1;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义模板时，模板参数列表不能为空。</p><p>模板参数表示在类或函数定义中用到的类型或值。当使用模板时，需要显式或隐式地指定模板实参（template argument），并将其绑定到模板参数上。</p><p>使用函数模板时，编译器用推断出的模板参数来实例化（instantiate）一个特定版本的函数，这些生成的函数通常被称为模板的实例（instantiation）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; instantiates int compare(const int&amp;, const int&amp;)cout &lt;&lt; compare(1, 0) &lt;&lt; endl;    &#x2F;&#x2F; T is int&#x2F;&#x2F; instantiates int compare(const vector&lt;int&gt;&amp;, const vector&lt;int&gt;&amp;)vector&lt;int&gt; vec1&#123;1, 2, 3&#125;, vec2&#123;4, 5, 6&#125;;cout &lt;&lt; compare(vec1, vec2) &lt;&lt; endl;    &#x2F;&#x2F; T is vector&lt;int&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板类型参数（type parameter）可以用来指定函数的返回类型或参数类型，以及在函数体内用于变量声明和类型转换。类型参数前必须使用关键字<code>class</code>或<code>typename</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ok: same type used for the return type and parametertemplate &lt;typename T&gt;T foo(T* p)&#123;    T tmp &#x3D; *p; &#x2F;&#x2F; tmp will have the type to which p points    &#x2F;&#x2F; ...    return tmp;&#125;&#x2F;&#x2F; error: must precede U with either typename or classtemplate &lt;typename T, U&gt; T calc(const T&amp;, const U&amp;);&#x2F;&#x2F; ok: no distinction between typename and class in a template parameter listtemplate &lt;typename T, class U&gt; calc (const T&amp;, const U&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用<code>typename</code>而不是<code>class</code>来指定模板类型参数，这样更加直观。</p><p>模板非类型参数（nontype parameter）需要用特定的类型名来指定，表示一个值而非一个类型。非类型参数可以是整型、指向对象或函数类型的指针或左值引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;unsigned N, unsigned M&gt;int compare(const char (&amp;p1)[N], const char (&amp;p2)[M])&#123;    return strcmp(p1, p2);&#125;int compare(const char (&amp;p1)[3], const char (&amp;p2)[4]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绑定到整型非类型参数的实参必须是一个常量表达式。绑定到指针或引用非类型参数的实参必须具有静态的生存期，不能用普通局部变量或动态对象作为指针或引用非类型参数的实参。</p><p>函数模板也可以声明为<code>inline</code>或<code>constexpr</code>的，说明符放在模板参数列表之后，返回类型之前。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ok: inline specifier follows the template parameter listtemplate &lt;typename T&gt; inline T min(const T&amp;, const T&amp;);&#x2F;&#x2F; error: incorrect placement of the inline specifierinline template &lt;typename T&gt; T min(const T&amp;, const T&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>模板程序应该尽量减少对实参类型的要求。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; expected comparisonif (v1 &lt; v2) return -1;if (v1 &gt; v2) return 1;return 0;&#x2F;&#x2F; version of compare that will be correct even if used on pointerstemplate &lt;typename T&gt;int compare(const T &amp;v1, const T &amp;v2)&#123;    if (less&lt;T&gt;()(v1, v2)) return -1;    if (less&lt;T&gt;()(v2, v1)) return 1;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当模板的一个特定版本被实例化时，编译器才会生成代码。此时编译器需要掌握生成代码所需的信息，因此函数模板和类模板成员函数的定义通常放在头文件中。</p><p>使用模板时，所有不依赖于模板参数的名字都必须是可见的，这是由模板的设计者来保证的。模板设计者应该提供一个头文件，包含模板定义以及在类模板或成员定义中用到的所有名字的声明。</p><p>调用者负责保证传递给模板的实参能正确支持模板所要求的操作。</p><h3 id="类模板（Class-Templates）"><a href="#类模板（Class-Templates）" class="headerlink" title="类模板（Class Templates）"></a>类模板（Class Templates）</h3><p>使用一个类模板时，必须提供显式模板实参（explicit template argument）列表，编译器使用这些模板实参来实例化出特定的类。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;class Blob&#123;public:    Blob();    Blob(std::initializer_list&lt;T&gt; il);    void push_back(const T &amp;t) &#123; data-&gt;push_back(t); &#125;    void push_back(T &amp;&amp;t) &#123; data-&gt;push_back(std::move(t)); &#125;    &#x2F;&#x2F; ...private:    std::shared_ptr&lt;std::vector&lt;T&gt;&gt; data;&#125;;Blob&lt;int&gt; ia;   &#x2F;&#x2F; empty Blob&lt;int&gt;Blob&lt;int&gt; ia2 &#x3D; &#123; 0, 1, 2, 3, 4 &#125;;    &#x2F;&#x2F; Blob&lt;int&gt; with five elements&#x2F;&#x2F; these definitions instantiate two distinct Blob typesBlob&lt;string&gt; names;     &#x2F;&#x2F; Blob that holds stringsBlob&lt;double&gt; prices;    &#x2F;&#x2F; different element type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类模板的每个实例都形成一个独立的类，相互之间没有关联。</p><p>如果一个类模板中的代码使用了另一个模板，通常不会将一个实际类型（或值）的名字用作其模板实参，而是将模板自己的参数用作被使用模板的实参。</p><p>类模板的成员函数具有和类模板相同的模板参数，因此定义在类模板外的成员函数必须以关键字<code>template</code>开始，后跟类模板参数列表。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;ret-type Blob&lt;T&gt;::member-name(parm-list)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，一个类模板的成员函数只有当程序用到它时才进行实例化。</p><p>在类模板自己的作用域内，可以直接使用模板名而不用提供模板实参。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;class BlobPtr&#123;public:    &#x2F;&#x2F; 类模板作用域内不需要写成BlobPtr&lt;T&gt;形式    BlobPtr&amp; operator++();&#125;&#x2F;&#x2F; 类外定义时需要提供模板实参template &lt;typename T&gt;BlobPtr&lt;T&gt;&amp; BlobPtr&lt;T&gt;::operator++()&#123;    &#x2F;&#x2F; 进入类模板作用域    BlobPtr Ret &#x3D; *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一个类包含一个友元声明时，类与友元各自是否是模板并无关联。如果一个类模板包含一个非模板友元，则友元可以访问所有类模板实例。如果友元自身是模板，则类可以给所有友元模板实例授予访问权限，也可以只授权给特定实例。</p><ul><li><p>一对一友元关系</p><p>为了引用模板的一个特定实例，必须首先声明模板自身。模板声明包括模板参数列表。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; forward declarations needed for friend declarations in Blobtemplate &lt;typename&gt; class BlobPtr;template &lt;typename&gt; class Blob;    &#x2F;&#x2F; needed for parameters in operator&#x3D;&#x3D;template &lt;typename T&gt;bool operator&#x3D;&#x3D;(const Blob&lt;T&gt;&amp;, const Blob&lt;T&gt;&amp;);template &lt;typename T&gt;class Blob&#123;    &#x2F;&#x2F; each instantiation of Blob grants access to the version of    &#x2F;&#x2F; BlobPtr and the equality operator instantiated with the same type    friend class BlobPtr&lt;T&gt;;    friend bool operator&#x3D;&#x3D;&lt;T&gt;(const Blob&lt;T&gt;&amp;, const Blob&lt;T&gt;&amp;);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通用和特定的模板友元关系</p><p>为了让模板的所有实例成为友元，友元声明中必须使用与类模板本身不同的模板参数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; forward declaration necessary to befriend a specific instantiation of a templatetemplate &lt;typename T&gt; class Pal;class C&#123; &#x2F;&#x2F; C is an ordinary, nontemplate class    friend class Pal&lt;C&gt;;    &#x2F;&#x2F; Pal instantiated with class C is a friend to C    &#x2F;&#x2F; all instances of Pal2 are friends to C;    &#x2F;&#x2F; no forward declaration required when we befriend all instantiations    template &lt;typename T&gt; friend class Pal2;&#125;;template &lt;typename T&gt;class C2&#123; &#x2F;&#x2F; C2 is itself a class template    &#x2F;&#x2F; each instantiation of C2 has the same instance of Pal as a friend    friend class Pal&lt;T&gt;;    &#x2F;&#x2F; a template declaration for Pal must be in scope    &#x2F;&#x2F; all instances of Pal2 are friends of each instance of C2, prior declaration needed    template &lt;typename X&gt; friend class Pal2;    &#x2F;&#x2F; Pal3 is a nontemplate class that is a friend of every instance of C2    friend class Pal3;      &#x2F;&#x2F; prior declaration for Pal3 not needed&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>C++11中，类模板可以将模板类型参数声明为友元。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename Type&gt;class Bar&#123;    friend Type;   &#x2F;&#x2F; grants access to the type used to instantiate Bar    &#x2F;&#x2F; ...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++11允许使用<code>using</code>为类模板定义类型别名。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt; using twin &#x3D; pair&lt;T, T&gt;;twin&lt;string&gt; authors;   &#x2F;&#x2F; authors is a pair&lt;string, string&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>类模板可以声明<code>static</code>成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;class Foo&#123;public:    static std::size_t count() &#123; return ctr; &#125;    private:    static std::size_t ctr;&#125;;&#x2F;&#x2F; instantiates static members Foo&lt;string&gt;::ctr and Foo&lt;string&gt;::countFoo&lt;string&gt; fs;&#x2F;&#x2F; all three objects share the same Foo&lt;int&gt;::ctr and Foo&lt;int&gt;::count membersFoo&lt;int&gt; fi, fi2, fi3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板的每个实例都有一个独有的<code>static</code>对象，而每个<code>static</code>成员必须有且只有一个定义。因此与定义模板的成员函数类似，<code>static</code>成员也应该定义成模板。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;size_t Foo&lt;T&gt;::ctr &#x3D; 0;    &#x2F;&#x2F; define and initialize ctr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="模板参数（Template-Parameters）"><a href="#模板参数（Template-Parameters）" class="headerlink" title="模板参数（Template Parameters）"></a>模板参数（Template Parameters）</h3><p>模板参数遵循普通的作用域规则。与其他任何名字一样，模板参数会隐藏外层作用域中声明的相同名字。但是在模板内不能重用模板参数名。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef double A;template &lt;typename A, typename B&gt;void f(A a, B b)&#123;    A tmp &#x3D; a;   &#x2F;&#x2F; tmp has same type as the template parameter A, not double    double B;    &#x2F;&#x2F; error: redeclares template parameter B&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于模板参数名不能重用，所以一个名字在一个特定模板参数列表中只能出现一次。</p><p>与函数参数一样，声明中模板参数的名字不必与定义中的相同。</p><p>一个特定文件所需要的所有模板声明通常一起放置在文件开始位置，出现在任何使用这些模板的代码之前。</p><p>模板中的代码使用作用域运算符<code>::</code>时，编译器无法确定其访问的名字是类型还是<code>static</code>成员。</p><p>默认情况下，C++假定模板中通过作用域运算符访问的名字是<code>static</code>成员。因此，如果需要使用一个模板类型参数的类型成员，就必须使用关键字<code>typename</code>显式地告知编译器该名字是一个类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;typename T::value_type top(const T&amp; c)&#123;    if (!c.empty())        return c.back();    else        return typename T::value_type();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++11允许为函数和类模板提供默认实参。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; compare has a default template argument, less&lt;T&gt;&#x2F;&#x2F; and a default function argument, F()template &lt;typename T, typename F &#x3D; less&lt;T&gt;&gt;int compare(const T &amp;v1, const T &amp;v2, F f &#x3D; F())&#123;    if (f(v1, v2)) return -1;    if (f(v2, v1)) return 1;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个类模板为其所有模板参数都提供了默认实参，在使用这些默认实参时，必须在模板名后面跟一个空尖括号对<code>&lt;&gt;</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;class T &#x3D; int&gt;class Numbers&#123; &#x2F;&#x2F; by default T is intpublic:    Numbers(T v &#x3D; 0): val(v) &#123; &#125;    &#x2F;&#x2F; various operations on numbersprivate:    T val;&#125;;Numbers&lt;long double&gt; lots_of_precision;Numbers&lt;&gt; average_precision;    &#x2F;&#x2F; empty &lt;&gt; says we want the default type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员模板（Member-Templates）"><a href="#成员模板（Member-Templates）" class="headerlink" title="成员模板（Member Templates）"></a>成员模板（Member Templates）</h3><p>一个类（无论是普通类还是模板类）可以包含本身是模板的成员函数，这种成员被称为成员模板。成员模板不能是虚函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class DebugDelete&#123;public:    DebugDelete(std::ostream &amp;s &#x3D; std::cerr): os(s) &#123; &#125;    &#x2F;&#x2F; as with any function template, the type of T is deduced by the compiler    template &lt;typename T&gt;    void operator()(T *p) const    &#123;         os &lt;&lt; &quot;deleting unique_ptr&quot; &lt;&lt; std::endl;        delete p;    &#125;    private:    std::ostream &amp;os;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在类模板外定义一个成员模板时，必须同时为类模板和成员模板提供模板参数列表。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;class Blob&#123;    template &lt;typename It&gt;    Blob(It b, It e);&#125;;template &lt;typename T&gt;   &#x2F;&#x2F; type parameter for the classtemplate &lt;typename It&gt;  &#x2F;&#x2F; type parameter for the constructorBlob&lt;T&gt;::Blob(It b, It e):    data(std::make_shared&lt;std::vector&lt;T&gt;&gt;(b, e))    &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了实例化一个类模板的成员模板，必须同时提供类和函数模板的实参。</p><h3 id="控制实例化（Controlling-Instantiations）"><a href="#控制实例化（Controlling-Instantiations）" class="headerlink" title="控制实例化（Controlling Instantiations）"></a>控制实例化（Controlling Instantiations）</h3><p>因为模板在使用时才会进行实例化，所以相同的实例可能出现在多个对象文件中。当两个或多个独立编译的源文件使用了相同的模板，并提供了相同的模板参数时，每个文件中都会有该模板的一个实例。</p><p>在大型程序中，多个文件实例化相同模板的额外开销可能非常严重。C++11允许通过显式实例化（explicit instantiation）来避免这种开销。</p><p>显式实例化的形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">extern template declaration;    &#x2F;&#x2F; instantiation declarationtemplate declaration;           &#x2F;&#x2F; instantiation definition<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>declaration</em>是一个类或函数声明，其中所有模板参数已被替换为模板实参。当编译器遇到<code>extern</code>模板声明时，它不会在本文件中生成实例化代码。对于一个给定的实例化版本，可能有多个<code>extern</code>声明，但必须只有一个定义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; templateBuild.cc&#x2F;&#x2F; instantiation file must provide a (nonextern) definition for every&#x2F;&#x2F; type and function that other files declare as externtemplate int compare(const int&amp;, const int&amp;);template class Blob&lt;string&gt;;    &#x2F;&#x2F; instantiates all members of the class template&#x2F;&#x2F; Application.cc&#x2F;&#x2F; these template types must be instantiated elsewhere in the programextern template class Blob&lt;string&gt;;extern template int compare(const int&amp;, const int&amp;);Blob&lt;string&gt; sa1, sa2;    &#x2F;&#x2F; instantiation will appear elsewhere&#x2F;&#x2F; Blob&lt;int&gt; and its initializer_list constructor instantiated in this fileBlob&lt;int&gt; a1 &#x3D; &#123; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;Blob&lt;int&gt; a2(a1);    &#x2F;&#x2F; copy constructor instantiated in this fileint i &#x3D; compare(a1[0], a2[0]);    &#x2F;&#x2F; instantiation will appear elsewhere<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当编译器遇到类模板的实例化定义时，它不清楚程序会使用哪些成员函数。和处理类模板的普通实例化不同，编译器会实例化该模板的所有成员，包括内联的成员函数。因此，用来显式实例化类模板的类型必须能用于模板的所有成员。</p><h3 id="效率与灵活性（Efficiency-and-Flexibility）"><a href="#效率与灵活性（Efficiency-and-Flexibility）" class="headerlink" title="效率与灵活性（Efficiency and Flexibility）"></a>效率与灵活性（Efficiency and Flexibility）</h3><p><code>unique_ptr</code>在编译时绑定删除器，避免了间接调用删除器的运行时开销。<code>shared_ptr</code>在运行时绑定删除器，使用户重载删除器的操作更加简便。</p><h2 id="模板实参推断（Template-Argument-Deduction）"><a href="#模板实参推断（Template-Argument-Deduction）" class="headerlink" title="模板实参推断（Template Argument Deduction）"></a>模板实参推断（Template Argument Deduction）</h2><p>对于函数模板，编译器通过调用的函数实参来确定其模板参数。这个过程被称作模板实参推断。</p><h3 id="类型转换与模板类型参数（Conversions-and-Template-Type-Parameters）"><a href="#类型转换与模板类型参数（Conversions-and-Template-Type-Parameters）" class="headerlink" title="类型转换与模板类型参数（Conversions and Template Type Parameters）"></a>类型转换与模板类型参数（Conversions and Template Type Parameters）</h3><p>与非模板函数一样，调用函数模板时传递的实参被用来初始化函数的形参。如果一个函数形参的类型使用了模板类型参数，则会采用特殊的初始化规则，只有有限的几种类型转换会自动地应用于这些实参。编译器通常会生成新的模板实例而不是对实参进行类型转换。</p><p>有3种类型转换可以在调用中应用于函数模板：</p><ul><li>顶层<code>const</code>会被忽略。</li><li>可以将一个非<code>const</code>对象的引用或指针传递给一个<code>const</code>引用或指针形参。</li><li>如果函数形参不是引用类型，则可以对数组或函数类型的实参应用正常的指针转换。数组实参可以转换为指向其首元素的指针。函数实参可以转换为该函数类型的指针。</li></ul><p>其他的类型转换，如算术转换、派生类向基类的转换以及用户定义的转换，都不能应用于函数模板。</p><p> 一个模板类型参数可以作为多个函数形参的类型。由于允许的类型转换有限，因此传递给这些形参的实参必须具有相同的类型，否则调用失败。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">long lng;compare(lng, 1024);   &#x2F;&#x2F; error: cannot instantiate compare(long, int)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果想增强函数的兼容性，可以使用两个类型参数定义函数模板。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; argument types can differ but must be compatibletemplate &lt;typename A, typename B&gt;int flexibleCompare(const A&amp; v1, const B&amp; v2)&#123;    if (v1 &lt; v2) return -1;    if (v2 &lt; v1) return 1;    return 0;&#125;long lng;flexibleCompare(lng, 1024);   &#x2F;&#x2F; ok: calls flexibleCompare(long, int)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数模板中使用普通类型定义的参数可以进行正常的类型转换。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;ostream &amp;print(ostream &amp;os, const T &amp;obj)&#123;    return os &lt;&lt; obj;&#125;print(cout, 42);   &#x2F;&#x2F; instantiates print(ostream&amp;, int)ofstream f(&quot;output&quot;);print(f, 10);      &#x2F;&#x2F; uses print(ostream&amp;, int); converts f to ostream&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数模板显式实参（Function-Template-Explicit-Arguments）"><a href="#函数模板显式实参（Function-Template-Explicit-Arguments）" class="headerlink" title="函数模板显式实参（Function-Template Explicit Arguments）"></a>函数模板显式实参（Function-Template Explicit Arguments）</h3><p>某些情况下，编译器无法推断出模板实参的类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; T1 cannot be deduced: it doesn&#39;t appear in the function parameter listtemplate &lt;typename T1, typename T2, typename T3&gt;T1 sum(T2, T3);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显式模板实参（explicit template argument）可以让用户自己控制模板的实例化。提供显式模板实参的方式与定义类模板实例的方式相同。显式模板实参在尖括号<code>&lt;&gt;</code>中指定，位于函数名之后，实参列表之前。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; T1 is explicitly specified; T2 and T3 are inferred from the argument typesauto val3 &#x3D; sum&lt;long long&gt;(i, lng);   &#x2F;&#x2F; long long sum(int, long)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显式模板实参按照从左到右的顺序与对应的模板参数匹配，只有尾部参数的显式模板实参才可以忽略，而且前提是它们可以从函数参数推断出来。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; poor design: users must explicitly specify all three template parameterstemplate &lt;typename T1, typename T2, typename T3&gt;T3 alternative_sum(T2, T1);&#x2F;&#x2F; error: can&#39;t infer initial template parametersauto val3 &#x3D; alternative_sum&lt;long long&gt;(i, lng);&#x2F;&#x2F; ok: all three parameters are explicitly specifiedauto val2 &#x3D; alternative_sum&lt;long long, int, long&gt;(i, lng);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于模板类型参数已经显式指定了的函数实参，可以进行正常的类型转换。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">long lng;compare(lng, 1024);         &#x2F;&#x2F; error: template parameters don&#39;t matchcompare&lt;long&gt;(lng, 1024);   &#x2F;&#x2F; ok: instantiates compare(long, long)compare&lt;int&gt;(lng, 1024);    &#x2F;&#x2F; ok: instantiates compare(int, int)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尾置返回类型与类型转换（Trailing-Return-Types-and-Type-Transformation）"><a href="#尾置返回类型与类型转换（Trailing-Return-Types-and-Type-Transformation）" class="headerlink" title="尾置返回类型与类型转换（Trailing Return Types and Type Transformation）"></a>尾置返回类型与类型转换（Trailing Return Types and Type Transformation）</h3><p>由于尾置返回出现在函数列表之后，因此它可以使用函数参数来声明返回类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; a trailing return lets us declare the return type after the parameter list is seentemplate &lt;typename It&gt;auto fcn(It beg, It end) -&gt; decltype(*beg)&#123;    &#x2F;&#x2F; process the range    return *beg;   &#x2F;&#x2F; return a reference to an element from the range&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准库在头文件<em>type_traits</em>中定义了类型转换模板，这些模板常用于模板元程序设计。其中每个模板都有一个名为<code>type</code>的公有类型成员，表示一个类型。此类型与模板自身的模板类型参数相关。如果不可能（或不必要）转换模板参数，则<code>type</code>成员就是模板参数类型本身。</p><p><img src="Images/16-1.png" alt="16-1"></p><p>使用<code>remove_reference</code>可以获得引用对象的元素类型，如果用一个引用类型实例化<code>remove_reference</code>，则<code>type</code>表示被引用的类型。因为<code>type</code>是一个类的类型成员，所以在模板中必须使用关键字<code>typename</code>来告知编译器其表示一个类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; must use typename to use a type member of a template parametertemplate &lt;typename It&gt;auto fcn2(It beg, It end) -&gt; typename remove_reference&lt;decltype(*beg)&gt;::type&#123;    &#x2F;&#x2F; process the range    return *beg;  &#x2F;&#x2F; return a copy of an element from the range&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数指针和实参推断（Function-Pointers-and-Argument-Deduction）"><a href="#函数指针和实参推断（Function-Pointers-and-Argument-Deduction）" class="headerlink" title="函数指针和实参推断（Function Pointers and Argument Deduction）"></a>函数指针和实参推断（Function Pointers and Argument Deduction）</h3><p>使用函数模板初始化函数指针或为函数指针赋值时，编译器用指针的类型来推断模板实参。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt; int compare(const T&amp;, const T&amp;);&#x2F;&#x2F; pf1 points to the instantiation int compare(const int&amp;, const int&amp;)int (*pf1)(const int&amp;, const int&amp;) &#x3D; compare;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果编译器不能从函数指针类型确定模板实参，则会产生错误。使用显式模板实参可以消除调用歧义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; overloaded versions of func; each takes a different function pointer typevoid func(int(*)(const string&amp;, const string&amp;));void func(int(*)(const int&amp;, const int&amp;));func(compare);     &#x2F;&#x2F; error: which instantiation of compare?&#x2F;&#x2F; ok: explicitly specify which version of compare to instantiatefunc(compare&lt;int&gt;);    &#x2F;&#x2F; passing compare(const int&amp;, const int&amp;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板实参推断和引用（Template-Argument-Deduction-and-References）"><a href="#模板实参推断和引用（Template-Argument-Deduction-and-References）" class="headerlink" title="模板实参推断和引用（Template Argument Deduction and References）"></a>模板实参推断和引用（Template Argument Deduction and References）</h3><p>当一个函数参数是模板类型参数的普通（左值）引用（形如<code>T&amp;</code>）时，只能传递给它一个左值（如一个变量或一个返回引用类型的表达式）。<em>T</em>被推断为实参所引用的类型，如果实参是<code>const</code>的，则<em>T</em>也为<code>const</code>类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt; void f1(T&amp;);    &#x2F;&#x2F; argument must be an lvalue&#x2F;&#x2F; calls to f1 use the referred-to type of the argument as the template parameter typef1(i);     &#x2F;&#x2F; i is an int; template parameter T is intf1(ci);    &#x2F;&#x2F; ci is a const int; template parameter T is const intf1(5);     &#x2F;&#x2F; error: argument to a &amp; parameter must be an lvalue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一个函数参数是模板类型参数的常量引用（形如<code>const T&amp;</code>）时，可以传递给它任何类型的实参。函数参数本身是<code>const</code>时，<em>T</em>的类型推断结果不会是<code>const</code>类型。<code>const</code>已经是函数参数类型的一部分了，因此不会再是模板参数类型的一部分。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt; void f2(const T&amp;);    &#x2F;&#x2F; can take an rvalue&#x2F;&#x2F; parameter in f2 is const &amp;; const in the argument is irrelevant&#x2F;&#x2F; in each of these three calls, f2&#39;s function parameter is inferred as const int&amp;f2(i);     &#x2F;&#x2F; i is an int; template parameter T is intf2(ci);    &#x2F;&#x2F; ci is a const int, but template parameter T is intf2(5);     &#x2F;&#x2F; a const &amp; parameter can be bound to an rvalue; T is int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一个函数参数是模板类型参数的右值引用（形如<code>T&amp;&amp;</code>）时，如果传递给它一个右值，类型推断过程类似普通左值引用函数参数的推断过程，推断出的<em>T</em>类型是该右值实参的类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt; void f3(T&amp;&amp;);f3(42);    &#x2F;&#x2F; argument is an rvalue of type int; template parameter T is int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>模板参数绑定的两个例外规则：</p><ul><li><p>如果将一个左值传递给函数的右值引用参数，且此右值引用指向模板类型参数时，编译器推断模板类型参数为实参的左值引用类型。</p></li><li><p>如果间接创建了一个引用的引用（通过类型别名或者模板类型参数间接定义），则这些引用会被“折叠”。右值引用的右值引用会被折叠为右值引用。其他情况下，引用都被折叠为普通左值引用。</p><table><thead><tr><th align="center">折叠前</th><th align="center">折叠后</th></tr></thead><tbody><tr><td align="center"><code>T&amp; &amp;</code>、<code>T&amp; &amp;&amp;</code>、<code>T&amp;&amp; &amp;</code></td><td align="center"><code>T&amp;</code></td></tr><tr><td align="center"><code>T&amp;&amp; &amp;&amp;</code></td><td align="center"><code>T&amp;&amp;</code></td></tr></tbody></table></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">f3(i);    &#x2F;&#x2F; argument is an lvalue; template parameter T is int&amp;f3(ci);   &#x2F;&#x2F; argument is an lvalue; template parameter T is const int&amp;&#x2F;&#x2F; invalid code, for illustration purposes onlyvoid f3&lt;int&amp;&gt;(int&amp; &amp;&amp;);    &#x2F;&#x2F; when T is int&amp;, function parameter is int&amp; &amp;&amp;void f3&lt;int&amp;&gt;(int&amp;);       &#x2F;&#x2F; when T is int&amp;, function parameter collapses to int&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板参数绑定的两个例外规则导致了两个结果：</p><ul><li>如果一个函数参数是指向模板类型参数的右值引用，则可以传递给它任意类型的实参。</li><li>如果将一个左值传递给这样的参数，则函数参数被实例化为一个普通的左值引用。</li></ul><p>当代码中涉及的类型可能是普通（非引用）类型，也可能是引用类型时，编写正确的代码就变得异常困难。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;void f3(T&amp;&amp; val)&#123;    T t &#x3D; val;     &#x2F;&#x2F; copy or binding a reference?    t &#x3D; fcn(t);    &#x2F;&#x2F; does the assignment change only t or val and t?    if (val &#x3D;&#x3D; t) &#123; &#x2F;* ... *&#x2F; &#125;    &#x2F;&#x2F; always true if T is a reference type&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际编程中，模板的右值引用参数通常用于两种情况：模板转发其实参或者模板被重载。函数模板的常用重载形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt; void f(T&amp;&amp;);         &#x2F;&#x2F; binds to nonconst rvaluestemplate &lt;typename T&gt; void f(const T&amp;);    &#x2F;&#x2F; lvalues and const rvalues<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="理解std-move（Understanding-std-move）"><a href="#理解std-move（Understanding-std-move）" class="headerlink" title="理解std::move（Understanding std::move）"></a>理解std::move（Understanding std::move）</h3><p><code>std::move</code>的定义如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;typename remove_reference&lt;T&gt;::type&amp;&amp; move(T&amp;&amp; t)&#123;    return static_cast&lt;typename remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::move</code>的工作过程：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1(&quot;hi!&quot;), s2;s2 &#x3D; std::move(string(&quot;bye!&quot;));     &#x2F;&#x2F; ok: moving from an rvalues2 &#x3D; std::move(s1);     &#x2F;&#x2F; ok: but after the assigment s1 has indeterminate value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>在<code>std::move(string(&quot;bye!&quot;))</code>中传递的是右值。</p></li><li><ul><li>推断出的<em>T</em>类型为<code>string</code>。</li><li><code>remove_reference</code>用<code>string</code>进行实例化。</li><li><code>remove_reference&lt;string&gt;</code>的<code>type</code>成员是<code>string</code>。</li><li><code>move</code>的返回类型是<code>string&amp;&amp;</code>。</li><li><code>move</code>的函数参数<em>t</em>的类型为<code>string&amp;&amp;</code>。</li></ul></li><li><p>在<code>std::move(s1)</code>中传递的是左值。</p></li><li><ul><li>推断出的<em>T</em>类型为<code>string&amp;</code>。</li><li><code>remove_reference</code>用<code>string&amp;</code>进行实例化。</li><li><code>remove_reference&lt;string&amp;&gt;</code>的<code>type</code>成员是<code>string</code>。</li><li><code>move</code>的返回类型是<code>string&amp;&amp;</code>。</li><li><code>move</code>的函数参数t的类型为<code>string&amp; &amp;&amp;</code>，会折叠成<code>string&amp;</code>。</li></ul></li></ul><p>可以使用<code>static_cast</code>显式地将一个左值转换为一个右值引用。</p><h3 id="转发（Forwarding）"><a href="#转发（Forwarding）" class="headerlink" title="转发（Forwarding）"></a>转发（Forwarding）</h3><p>某些函数需要将其一个或多个实参连同类型不变地转发给其他函数。在这种情况下，需要保持被转发实参的所有性质，包括实参的<code>const</code>属性以及左值/右值属性。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; template that takes a callable and two parameters&#x2F;&#x2F; and calls the given callable with the parameters &#39;&#39;flipped&#39;&#39;&#x2F;&#x2F; flip1 is an incomplete implementation: top-level const and references are losttemplate &lt;typename F, typename T1, typename T2&gt;void flip1(F f, T1 t1, T2 t2)&#123;    f(t2, t1);&#125;void f(int v1, int &amp;v2)   &#x2F;&#x2F; note v2 is a reference&#123;    cout &lt;&lt; v1 &lt;&lt; &quot; &quot; &lt;&lt; ++v2 &lt;&lt; endl;&#125;f(42, i);   &#x2F;&#x2F; f changes its argument iflip1(f, j, 42);    &#x2F;&#x2F; f called through flip1 leaves j unchanged                    &#x2F;&#x2F; void flip1(void(*fcn)(int, int&amp;), int t1, int t2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中，<em>j</em>被传递给<code>flip1</code>的参数<em>t1</em>，该参数是一个普通（非引用）类型<code>int</code>，而非<code>int&amp;</code>，因此<code>flip1(f, j, 42)</code>调用会被实例化为<code>void flip1(void(*fcn)(int, int&amp;), int t1, int t2)</code>。<em>j</em>的值被拷贝至<em>t1</em>中，<code>f</code>中的引用参数被绑定至<em>t1</em>，而非<em>j</em>，因此<em>j</em>不会被修改。</p><p>将函数参数定义为指向模板类型参数的右值引用（形如<code>T&amp;&amp;</code>），通过引用折叠，可以保持翻转实参的左值/右值属性。并且引用参数（无论是左值还是右值）可以保持实参的<code>const</code>属性，因为在引用类型中的<code>const</code>是底层的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename F, typename T1, typename T2&gt;void flip2(F f, T1 &amp;&amp;t1, T2 &amp;&amp;t2)&#123;    f(t2, t1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于修改后的版本，若调用<code>flip2(f, j, 42)</code>，会传递给参数<em>t1</em>一个左值<em>j</em>，但此时推断出的<em>T1</em>类型为<code>int&amp;</code>，<em>t1</em>的类型会被折叠为<code>int&amp;</code>，从而解决了<code>flip1</code>的错误。</p><p>但<code>flip2</code>只能用于接受左值引用的函数，不能用于接受右值引用的函数。函数参数与其他变量一样，都是左值表达式。所以即使是指向模板类型的右值引用参数也只能传递给接受左值引用的函数，不能传递给接受右值引用的函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void g(int &amp;&amp;i, int&amp; j)&#123;    cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;&#125;&#x2F;&#x2F; error: can&#39;t initialize int&amp;&amp; from an lvalueflip2(g, i, 42);  &#x2F;&#x2F; flip2 passes an lvalue to g’s rvalue reference parameter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++11在头文件<em>utility</em>中定义了<code>forward</code>。与<code>move</code>不同，<code>forward</code>必须通过显式模板实参调用，返回该显式实参类型的右值引用。即<code>forward&lt;T&gt;</code>返回类型<code>T&amp;&amp;</code>。</p><p>通常情况下，可以使用<code>forward</code>传递定义为指向模板类型参数的右值引用函数参数。通过其返回类型上的引用折叠，<code>forward</code>可以保持给定实参的左值/右值属性。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename Type&gt;intermediary(Type &amp;&amp;arg)&#123;    finalFcn(std::forward&lt;Type&gt;(arg));    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果实参是一个右值，则<em>Type</em>是一个普通（非引用）类型，<code>forward&lt;Type&gt;</code>返回类型<code>Type&amp;&amp;</code>。</li><li>如果实参是一个左值，则通过引用折叠，<em>Type</em>也是一个左值引用类型，<code>forward&lt;Type&gt;</code>返回类型<code>Type&amp;&amp; &amp;</code>，对返回类型进行引用折叠，得到<code>Type&amp;</code>。</li></ul><p>使用<code>forward</code>编写完善的转发函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename F, typename T1, typename T2&gt;void flip(F f, T1 &amp;&amp;t1, T2 &amp;&amp;t2)&#123;    f(std::forward&lt;T2&gt;(t2), std::forward&lt;T1&gt;(t1));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与<code>std::move</code>一样，对<code>std::forward</code>也不应该使用<code>using</code>声明。</p><h2 id="重载与模板（Overloading-and-Templates）"><a href="#重载与模板（Overloading-and-Templates）" class="headerlink" title="重载与模板（Overloading and Templates）"></a>重载与模板（Overloading and Templates）</h2><p>函数模板可以被另一个模板或普通非模板函数重载。</p><p>如果重载涉及函数模板，则函数匹配规则会受到一些影响：</p><ul><li>对于一个调用，其候选函数包括所有模板实参推断成功的函数模板实例。</li><li>候选的函数模板都是可行的，因为模板实参推断会排除任何不可行的模板。</li><li>和往常一样，可行函数（模板与非模板）按照类型转换（如果需要的话）来排序。但是可以用于函数模板调用的类型转换非常有限。</li><li>和往常一样，如果恰有一个函数提供比其他任何函数都更好的匹配，则选择此函数。但是如果多个函数都提供相同级别的匹配，则：<ul><li>如果同级别的函数中只有一个是非模板函数，则选择此函数。</li><li>如果同级别的函数中没有非模板函数，而有多个函数模板，且其中一个模板比其他模板更特例化，则选择此模板。</li><li>否则该调用有歧义。</li></ul></li></ul><p>通常，如果使用了一个没有声明的函数，代码将无法编译。但对于重载函数模板的函数而言，如果编译器可以从模板实例化出与调用匹配的版本，则缺少的声明就不再重要了。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt; string debug_rep(const T &amp;t);template &lt;typename T&gt; string debug_rep(T *p);&#x2F;&#x2F; the following declaration must be in scope&#x2F;&#x2F; for the definition of debug_rep(char*) to do the right thingstring debug_rep(const string &amp;);string debug_rep(char *p)&#123;    &#x2F;&#x2F; if the declaration for the version that takes a const string&amp; is not in scope    &#x2F;&#x2F; the return will call debug_rep(const T&amp;) with T instantiated to string    return debug_rep(string(p));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在定义任何函数之前，应该声明所有重载的函数版本。这样编译器就不会因为未遇到你希望调用的函数而实例化一个并非你所需要的版本。</p><h2 id="可变参数模板（Variadic-Templates）"><a href="#可变参数模板（Variadic-Templates）" class="headerlink" title="可变参数模板（Variadic Templates）"></a>可变参数模板（Variadic Templates）</h2><p>可变参数模板指可以接受可变数量参数的模板函数或模板类。可变数量的参数被称为参数包（parameter pack），分为两种：</p><ul><li>模板参数包（template parameter pack），表示零个或多个模板参数。</li><li>函数参数包（function parameter pack），表示零个或多个函数参数。</li></ul><p>用一个省略号<code>…</code>来指出模板参数或函数参数表示一个包。在一个模板参数列表中，<code>class…</code>或<code>typename…</code>指出接下来的参数表示零个或多个类型的列表；一个类型名后面跟一个省略号表示零个或多个给定类型的非类型参数列表。在函数参数列表中，如果一个参数的类型是模板参数包，则此参数也是函数参数包。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; Args is a template parameter pack; rest is a function parameter pack&#x2F;&#x2F; Args represents zero or more template type parameters&#x2F;&#x2F; rest represents zero or more function parameterstemplate &lt;typename T, typename... Args&gt;void foo(const T &amp;t, const Args&amp; ... rest);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于一个可变参数模板，编译器会推断模板参数类型和参数数量。</p><p>可以使用<code>sizeof…</code>运算符获取参数包中的元素数量。类似<code>sizeof</code>，<code>sizeof…</code>也返回一个常量表达式，而且不会对其实参求值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename ... Args&gt;void g(Args ... args)&#123;    cout &lt;&lt; sizeof...(Args) &lt;&lt; endl;    &#x2F;&#x2F; number of type parameters    cout &lt;&lt; sizeof...(args) &lt;&lt; endl;    &#x2F;&#x2F; number of function parameters&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写可变参数函数模板（Writing-a-Variadic-Function-Template）"><a href="#编写可变参数函数模板（Writing-a-Variadic-Function-Template）" class="headerlink" title="编写可变参数函数模板（Writing a Variadic Function Template）"></a>编写可变参数函数模板（Writing a Variadic Function Template）</h3><p>可变参数函数通常是递归的，第一步调用参数包中的第一个实参，然后用剩余实参调用自身。为了终止递归，还需要定义一个非可变参数的函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; function to end the recursion and print the last element&#x2F;&#x2F; this function must be declared before the variadic version of print is definedtemplate&lt;typename T&gt;ostream &amp;print(ostream &amp;os, const T &amp;t)&#123;    return os &lt;&lt; t;   &#x2F;&#x2F; no separator after the last element in the pack&#125;&#x2F;&#x2F; this version of print will be called for all but the last element in the packtemplate &lt;typename T, typename... Args&gt;ostream &amp;print(ostream &amp;os, const T &amp;t, const Args&amp;... rest)&#123;    os &lt;&lt; t &lt;&lt; &quot;, &quot;;    &#x2F;&#x2F; print the first argument    return print(os, rest...);   &#x2F;&#x2F; recursive call; print the other arguments&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">Call</th><th align="center">t</th><th align="center">rest…</th></tr></thead><tbody><tr><td align="center"><code>print(cout, i, s, 42)</code></td><td align="center">i</td><td align="center">s, 42</td></tr><tr><td align="center"><code>print(cout, s, 42)</code></td><td align="center">s</td><td align="center">42</td></tr><tr><td align="center"><code>print(cout, 42)</code></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="包扩展（Pack-Expansion）"><a href="#包扩展（Pack-Expansion）" class="headerlink" title="包扩展（Pack Expansion）"></a>包扩展（Pack Expansion）</h3><p>对于一个参数包，除了获取其大小外，唯一能对它做的事情就是扩展。当扩展一个包时，需要提供用于每个扩展元素的模式（pattern）。扩展一个包就是将其分解为构成的元素，对每个元素应用模式，获得扩展后的列表。通过在模式右边添加一个省略号<code>…</code>来触发扩展操作。</p><p>包扩展工作过程：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T, typename... Args&gt;ostream&amp; print(ostream &amp;os, const T &amp;t, const Args&amp;... rest)   &#x2F;&#x2F; expand Args&#123;    os &lt;&lt; t &lt;&lt; &quot;, &quot;;    return print(os, rest...);   &#x2F;&#x2F; expand rest&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>第一个扩展操作扩展模板参数包，为<code>print</code>生成函数参数列表。编译器将模式<code>const Args&amp;</code>应用到模板参数包<em>Args</em>中的每个元素上。因此该模式的扩展结果是一个以逗号分隔的零个或多个类型的列表，每个类型都形如<code>const type&amp;</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">print(cout, i, s, 42);   &#x2F;&#x2F; two parameters in the packostream&amp; print(ostream&amp;, const int&amp;, const string&amp;, const int&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第二个扩展操作扩展函数参数包，模式是函数参数包的名字。扩展结果是一个由包中元素组成、以逗号分隔的列表。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">print(os, s, 42);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>扩展操作中的模式会独立地应用于包中的每个元素。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; call debug_rep on each argument in the call to printtemplate &lt;typename... Args&gt;ostream &amp;errorMsg(ostream &amp;os, const Args&amp;... rest)&#123;    &#x2F;&#x2F; print(os, debug_rep(a1), debug_rep(a2), ..., debug_rep(an)    return print(os, debug_rep(rest)...);&#125;&#x2F;&#x2F; passes the pack to debug_rep; print(os, debug_rep(a1, a2, ..., an))print(os, debug_rep(rest...));   &#x2F;&#x2F; error: no matching function to call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转发参数包（Forwarding-Parameter-Packs）"><a href="#转发参数包（Forwarding-Parameter-Packs）" class="headerlink" title="转发参数包（Forwarding Parameter Packs）"></a>转发参数包（Forwarding Parameter Packs）</h3><p>在C++11中，可以组合使用可变参数模板和<code>forward</code>机制来编写函数，实现将其实参不变地传递给其他函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; fun has zero or more parameters each of which is&#x2F;&#x2F; an rvalue reference to a template parameter typetemplate&lt;typename... Args&gt;void fun(Args&amp;&amp;... args)    &#x2F;&#x2F; expands Args as a list of rvalue references&#123;    &#x2F;&#x2F; the argument to work expands both Args and args    work(std::forward&lt;Args&gt;(args)...);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模板特例化（Template-Specializations）"><a href="#模板特例化（Template-Specializations）" class="headerlink" title="模板特例化（Template Specializations）"></a>模板特例化（Template Specializations）</h2><p>在某些情况下，通用模板的定义对特定类型是不合适的，可能编译失败或者操作不正确。如果不希望或不能使用模板版本时，可以定义类或函数模板的特例化版本。一个特例化版本就是模板的一个独立定义，其中的一个或多个模板参数被指定为特定类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; first version; can compare any two typestemplate &lt;typename T&gt; int compare(const T&amp;, const T&amp;);&#x2F;&#x2F; second version to handle string literalstemplate&lt;size_t N, size_t M&gt;int compare(const char (&amp;)[N], const char (&amp;)[M]);const char *p1 &#x3D; &quot;hi&quot;, *p2 &#x3D; &quot;mom&quot;;compare(p1, p2);        &#x2F;&#x2F; calls the first templatecompare(&quot;hi&quot;, &quot;mom&quot;);   &#x2F;&#x2F; calls the template with two nontype parameters&#x2F;&#x2F; special version of compare to handle pointers to character arraystemplate &lt;&gt;int compare(const char* const &amp;p1, const char* const &amp;p2)&#123;    return strcmp(p1, p2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特例化一个函数模板时，必须为模板中的每个模板参数都提供实参。为了指明我们正在实例化一个模板，应该在关键字<code>template</code>后面添加一个空尖括号对<code>&lt;&gt;</code>。</p><p>特例化版本的参数类型必须与一个先前声明的模板中对应的类型相匹配。</p><p>定义特例化函数版本本质上是接管编译器的工作，为模板的一个特殊实例提供了定义。特例化并非重载，因此不影响函数匹配。</p><p>将一个特殊版本的函数定义为特例化模板还是独立的非模板函数会影响到重载函数匹配。</p><p>模板特例化遵循普通作用域规则。为了特例化一个模板，原模板的声明必须在作用域中。而使用模板实例时，也必须先包含特例化版本的声明。</p><p>通常，模板及其特例化版本应该声明在同一个头文件中。所有同名模板的声明放在文件开头，后面是这些模板的特例化版本。</p><p>类模板也可以特例化。与函数模板不同，类模板的特例化不必为所有模板参数提供实参，可以只指定一部分模板参数。一个类模板的部分特例化（partial specialization）版本本身还是一个模板，用户使用时必须为那些未指定的模板参数提供实参。</p><p>只能部分特例化类模板，不能部分特例化函数模板。</p><p>由于类模板的部分特例化版本是一个模板，所以需要定义模板参数。对于每个未完全确定类型的模板参数，在特例化版本的模板参数列表中都有一项与之对应。在类名之后，需要为特例化的模板参数指定实参，这些实参位于模板名之后的尖括号中，与原始模板中的参数按位置相对应。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 通用版本template &lt;typename T&gt;struct remove_reference&#123;    typedef T type;&#125;;&#x2F;&#x2F; 部分特例化版本template &lt;typename T&gt;struct remove_reference&lt;T &amp;&gt;   &#x2F;&#x2F; 左值引用&#123;    typedef T type;&#125;;template &lt;typename T&gt;struct remove_reference&lt;T &amp;&amp;&gt;  &#x2F;&#x2F; 右值引用&#123;    typedef T type;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板部分特例化版本的模板参数列表是原始模板参数列表的一个子集或特例化版本。</p><p>可以只特例化类模板的指定成员函数，而不用特例化整个模板。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt;struct Foo&#123;    Foo(const T &amp;t &#x3D; T()): mem(t) &#123; &#125;    void Bar() &#123; &#x2F;* ... *&#x2F; &#125;    T mem;    &#x2F;&#x2F; other members of Foo&#125;;template&lt;&gt;      &#x2F;&#x2F; we&#39;re specializing a templatevoid Foo&lt;int&gt;::Bar()    &#x2F;&#x2F; we&#39;re specializing the Bar member of Foo&lt;int&gt;&#123;    &#x2F;&#x2F; do whatever specialized processing that applies to ints&#125;Foo&lt;string&gt; fs;     &#x2F;&#x2F; instantiates Foo&lt;string&gt;::Foo()fs.Bar();    &#x2F;&#x2F; instantiates Foo&lt;string&gt;::Bar()Foo&lt;int&gt; fi;    &#x2F;&#x2F; instantiates Foo&lt;int&gt;::Foo()fi.Bar();    &#x2F;&#x2F; uses our specialization of Foo&lt;int&gt;::Bar()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-15-object-oriented-programming/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-15-object-oriented-programming/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第15章-面向对象程序设计"><a href="#第15章-面向对象程序设计" class="headerlink" title="第15章 面向对象程序设计"></a>第15章 面向对象程序设计</h1><h2 id="OOP：概述（OOP：An-Overview）"><a href="#OOP：概述（OOP：An-Overview）" class="headerlink" title="OOP：概述（OOP：An Overview）"></a>OOP：概述（OOP：An Overview）</h2><p>面向对象程序设计（object-oriented programming）的核心思想是数据抽象（封装）、继承和动态绑定（多态）。</p><p>通过继承（inheritance）联系在一起的类构成一种层次关系。通常在层次关系的根部有一个基类（base class），其他类则直接或间接地从基类继承而来，这些继承得到的类叫做派生类（derived class）。基类负责定义在层次关系中所有类共同拥有的成员，而每个派生类定义各自特有的成员。</p><p>对于某些函数，基类希望它的派生类各自定义适合自身的版本，此时基类应该将这些函数声明为虚函数（virtual function）。方法是在函数名称前添加<code>virtual</code>关键字。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Quote&#123;public:    std::string isbn() const;    virtual double net_price(std::size_t n) const;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>派生类必须通过类派生列表（class derivation list）明确指出它是从哪个或哪些基类继承而来的。类派生列表的形式首先是一个冒号，后面紧跟以逗号分隔的基类列表，其中每个基类前面可以添加访问说明符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Bulk_quote : public Quote&#123; &#x2F;&#x2F; Bulk_quote inherits from Quotepublic:    double net_price(std::size_t) const override;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>派生类必须在其内部对所有重新定义的虚函数进行声明。</p><p>使用基类的引用或指针调用一个虚函数时将发生动态绑定（dynamic binding），也叫运行时绑定（run-time binding）。函数的运行版本将由实参决定。</p><h2 id="定义基类和派生类（Defining-Base-and-Derived-Classes）"><a href="#定义基类和派生类（Defining-Base-and-Derived-Classes）" class="headerlink" title="定义基类和派生类（Defining Base and Derived Classes）"></a>定义基类和派生类（Defining Base and Derived Classes）</h2><h3 id="定义基类（Defining-a-Base-Class）"><a href="#定义基类（Defining-a-Base-Class）" class="headerlink" title="定义基类（Defining a Base Class）"></a>定义基类（Defining a Base Class）</h3><p>基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。</p><p>除构造函数之外的任何非静态函数都能定义为虚函数。<code>virtual</code>关键字只能出现在类内部的声明语句之前而不能用于类外部的函数定义。如果基类把一个函数声明为虚函数，则该函数在派生类中隐式地也是虚函数。</p><p>成员函数如果没有被声明为虚函数，则其解析过程发生在编译阶段而非运行阶段。</p><p>派生类能访问基类的公有成员，不能访问私有成员。如果基类希望定义外部代码无法访问，但是派生类对象可以访问的成员，可以使用受保护的（protected）访问运算符进行说明。</p><h3 id="定义派生类（Defining-a-Derived-Class）"><a href="#定义派生类（Defining-a-Derived-Class）" class="headerlink" title="定义派生类（Defining a Derived Class）"></a>定义派生类（Defining a Derived Class）</h3><p>类派生列表中的访问说明符用于控制派生类从基类继承而来的成员是否对派生类的用户可见。</p><p>如果派生类没有覆盖其基类的某个虚函数，则该虚函数的行为类似于其他的普通函数，派生类会直接继承其在基类中的版本。</p><p>C++标准并没有明确规定派生类的对象在内存中如何分布，一个对象中继承自基类的部分和派生类自定义的部分不一定是连续存储的。</p><p>因为在派生类对象中含有与其基类对应的组成部分，所以能把派生类的对象当作基类对象来使用，也能将基类的指针或引用绑定到派生类对象中的基类部分上。这种转换通常称为派生类到基类的（derived-to-base）类型转换，编译器会隐式执行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Quote item;         &#x2F;&#x2F; object of base typeBulk_quote bulk;    &#x2F;&#x2F; object of derived typeQuote *p &#x3D; &amp;item;   &#x2F;&#x2F; p points to a Quote objectp &#x3D; &amp;bulk;          &#x2F;&#x2F; p points to the Quote part of bulkQuote &amp;r &#x3D; bulk;    &#x2F;&#x2F; r bound to the Quote part of bulk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个类控制它自己的成员初始化过程，派生类必须使用基类的构造函数来初始化它的基类部分。派生类的构造函数通过构造函数初始化列表来将实参传递给基类构造函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Bulk_quote(const std::string&amp; book, double p,             std::size_t qty, double disc) :    Quote(book, p), min_qty(qty), discount(disc) &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除非特别指出，否则派生类对象的基类部分会像数据成员一样执行默认初始化。</p><p>派生类初始化时首先初始化基类部分，然后按照声明的顺序依次初始化派生类成员。</p><p>派生类可以访问基类的公有成员和受保护成员。</p><p>如果基类定义了一个静态成员，则在整个继承体系中只存在该成员的唯一定义。如果某静态成员是可访问的，则既能通过基类也能通过派生类使用它。</p><p>已经完整定义的类才能被用作基类。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base &#123; &#x2F;* ... *&#x2F; &#125; ;class D1: public Base &#123; &#x2F;* ... *&#x2F; &#125;;class D2: public D1 &#123; &#x2F;* ... *&#x2F; &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>Base</em>是<em>D1</em>的直接基类（direct base），是<em>D2</em>的间接基类（indirect base）。最终的派生类将包含它直接基类的子对象以及每个间接基类的子对象。</p><p>C++11中，在类名后面添加<code>final</code>关键字可以禁止其他类继承它。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class NoDerived final &#123; &#x2F;* *&#x2F; &#125;;    &#x2F;&#x2F; NoDerived can&#39;t be a base classclass Base &#123; &#x2F;* *&#x2F; &#125;;&#x2F;&#x2F; Last is final; we cannot inherit from Lastclass Last final : Base &#123; &#x2F;* *&#x2F; &#125;;  &#x2F;&#x2F; Last can&#39;t be a base classclass Bad : NoDerived &#123; &#x2F;* *&#x2F; &#125;;    &#x2F;&#x2F; error: NoDerived is finalclass Bad2 : Last &#123; &#x2F;* *&#x2F; &#125;;        &#x2F;&#x2F; error: Last is final<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换与继承（Conversions-and-Inheritance）"><a href="#类型转换与继承（Conversions-and-Inheritance）" class="headerlink" title="类型转换与继承（Conversions and Inheritance）"></a>类型转换与继承（Conversions and Inheritance）</h3><p>和内置指针一样，智能指针类也支持派生类到基类的类型转换，所以可以将一个派生类对象的指针存储在一个基类的智能指针内。</p><p>表达式的静态类型（static type）在编译时总是已知的，它是变量声明时的类型或表达式生成的类型；动态类型（dynamic type）则是变量或表达式表示的内存中对象的类型，只有运行时才可知。</p><p>如果表达式既不是引用也不是指针，则它的动态类型永远与静态类型一致。</p><p>不存在从基类到派生类的隐式类型转换，即使一个基类指针或引用绑定在一个派生类对象上也不行，因为编译器只能通过检查指针或引用的静态类型来判断转换是否合法。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Quote base;Bulk_quote* bulkP &#x3D; &amp;base;   &#x2F;&#x2F; error: can&#39;t convert base to derivedBulk_quote&amp; bulkRef &#x3D; base;  &#x2F;&#x2F; error: can&#39;t convert base to derived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在基类中含有一个或多个虚函数，可以使用<code>dynamic_cast</code>运算符，用于将基类的指针或引用安全地转换成派生类的指针或引用，该转换的安全检查将在运行期间执行。</p><p>如果已知某个基类到派生类的转换是安全的，可以使用<code>static_cast</code>强制覆盖掉编译器的检查工作。</p><p>派生类到基类的自动类型转换只对指针或引用有效，在派生类类型和基类类型之间不存在这种转换。</p><p>派生类到基类的转换允许我们给基类的拷贝/移动操作传递一个派生类的对象，这些操作是基类定义的，只会处理基类自己的成员，派生类的部分被切掉（sliced down）了。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Bulk_quote bulk;    &#x2F;&#x2F; object of derived typeQuote item(bulk);   &#x2F;&#x2F; uses the Quote::Quote(const Quote&amp;) constructoritem &#x3D; bulk;        &#x2F;&#x2F; calls Quote::operator&#x3D;(const Quote&amp;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用一个派生类对象为一个基类对象初始化或赋值时，只有该对象中的基类部分会被拷贝、移动或赋值，它的派生类部分会被忽略掉。</p><h2 id="虚函数（Virtual-Functions）"><a href="#虚函数（Virtual-Functions）" class="headerlink" title="虚函数（Virtual Functions）"></a>虚函数（Virtual Functions）</h2><p>当且仅当通过指针或引用调用虚函数时，才会在运行过程解析该调用，也只有在这种情况下对象的动态类型有可能与静态类型不同。</p><p>在派生类中覆盖某个虚函数时，可以再次使用<code>virtual</code>关键字说明函数性质，但这并非强制要求。因为一旦某个函数被声明为虚函数，则在所有派生类中它都是虚函数。</p><p>在派生类中覆盖某个虚函数时，该函数在基类中的形参必须与派生类中的形参严格匹配。</p><p>派生类可以定义一个与基类中的虚函数名字相同但形参列表不同的函数，但编译器会认为该函数与基类中原有的函数是相互独立的，此时派生类的函数并没有覆盖掉基类中的版本。</p><p>C++11允许派生类使用<code>override</code>关键字显式地注明虚函数。如果<code>override</code>标记了某个函数，但该函数并没有覆盖已存在的虚函数，编译器将报告错误。<code>override</code>位于函数参数列表之后。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct B&#123;    virtual void f1(int) const;    virtual void f2();    void f3();&#125;;struct D1 : B &#123;    void f1(int) const override;    &#x2F;&#x2F; ok: f1 matches f1 in the base    void f2(int) override;      &#x2F;&#x2F; error: B has no f2(int) function    void f3() override;     &#x2F;&#x2F; error: f3 not virtual    void f4() override;     &#x2F;&#x2F; error: B doesn&#39;t have a function named f4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与禁止类继承类似，函数也可以通过添加<code>final</code>关键字来禁止覆盖操作。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct D2 : B&#123;    &#x2F;&#x2F; inherits f2() and f3() from B and overrides f1(int)    void f1(int) const final;   &#x2F;&#x2F; subsequent classes can&#39;t override f1(int)&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>final</code>和<code>override</code>关键字出现在形参列表（包括任何<code>const</code>或引用修饰符）以及尾置返回类型之后。</p><p>虚函数也可以有默认实参，每次函数调用的默认实参值由本次调用的静态类型决定。如果通过基类的指针或引用调用函数，则使用基类中定义的默认实参，即使实际运行的是派生类中的函数版本也是如此。</p><p>如果虚函数使用默认实参，则基类和派生类中定义的默认实参值最好一致。</p><p>使用作用域运算符<code>::</code>可以强制执行虚函数的某个版本，不进行动态绑定。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; calls the version from the base class regardless of the dynamic type of basePdouble undiscounted &#x3D; baseP-&gt;Quote::net_price(42);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常情况下，只有成员函数或友元中的代码才需要使用作用域运算符来回避虚函数的动态绑定机制。</p><p>如果一个派生类虚函数需要调用它的基类版本，但没有使用作用域运算符，则在运行时该调用会被解析为对派生类版本自身的调用，从而导致无限递归。</p><h2 id="抽象基类（Abstract-Base-Classes）"><a href="#抽象基类（Abstract-Base-Classes）" class="headerlink" title="抽象基类（Abstract Base Classes）"></a>抽象基类（Abstract Base Classes）</h2><p>在类内部虚函数声明语句的分号前添加<code>=0</code>可以将一个虚函数声明为纯虚（pure virtual）函数。一个纯虚函数无须定义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double net_price(std::size_t) const &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以为纯虚函数提供定义，但函数体必须定义在类的外部。</p><p>含有（或未经覆盖直接继承）纯虚函数的类是抽象基类。抽象基类负责定义接口，而后续的其他类可以覆盖该接口。</p><p>不能创建抽象基类的对象。</p><p>派生类构造函数只初始化它的直接基类。</p><p>重构（refactoring）负责重新设计类的体系以便将操作或数据从一个类移动到另一个类中。</p><h2 id="访问控制与继承（Access-Control-and-Inheritance）"><a href="#访问控制与继承（Access-Control-and-Inheritance）" class="headerlink" title="访问控制与继承（Access Control and Inheritance）"></a>访问控制与继承（Access Control and Inheritance）</h2><p>一个类可以使用<code>protected</code>关键字来声明外部代码无法访问，但是派生类对象可以访问的成员。</p><p>派生类的成员或友元只能通过派生类对象来访问基类的<code>protected</code>成员。派生类对于一个基类对象中的<code>protected</code>成员没有任何访问权限。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base&#123;protected:    int prot_mem;   &#x2F;&#x2F; protected member&#125;;class Sneaky : public Base&#123;    friend void clobber(Sneaky&amp;);   &#x2F;&#x2F; can access Sneaky::prot_mem    friend void clobber(Base&amp;);     &#x2F;&#x2F; can&#39;t access Base::prot_mem    int j;   &#x2F;&#x2F; j is private by default&#125;;&#x2F;&#x2F; ok: clobber can access the private and protected members in Sneaky objectsvoid clobber(Sneaky &amp;s) &#123; s.j &#x3D; s.prot_mem &#x3D; 0; &#125;&#x2F;&#x2F; error: clobber can&#39;t access the protected members in Basevoid clobber(Base &amp;b) &#123; b.prot_mem &#x3D; 0; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基类中成员的访问说明符和派生列表中的访问说明符都会影响某个类对其继承成员的访问权限。</p><p>派生访问说明符对于派生类的成员及友元能否访问其直接基类的成员没有影响，对基类成员的访问权限只与基类中的访问说明符有关。</p><p>派生访问说明符的作用是控制派生类（包括派生类的派生类）用户对于基类成员的访问权限。</p><ul><li>如果使用公有继承，则基类的公有成员和受保护成员在派生类中属性不发生改变。</li><li>如果使用受保护继承，则基类的公有成员和受保护成员在派生类中变为受保护成员。</li><li>如果使用私有继承，则基类的公有成员和受保护成员在派生类中变为私有成员。</li></ul><p>派生类到基类转换的可访问性（假定<em>D</em>继承自<em>B</em>）：</p><ul><li>只有当<em>D</em>公有地继承<em>B</em>时，用户代码才能使用派生类到基类的转换。</li><li>不论<em>D</em>以什么方式继承<em>B</em>，<em>D</em>的成员函数和友元都能使用派生类到基类的转换。</li><li>如果<em>D</em>继承<em>B</em>的方式是公有的或者受保护的，则<em>D</em>的派生类的成员函数和友元可以使用<em>D</em>到<em>B</em>的类型转换；反之，如果<em>D</em>继承<em>B</em>的方式是私有的，则不能使用。</li></ul><p>对于代码中的某个给定节点来说，如果基类的公有成员是可访问的，则派生类到基类的类型转换也是可访问的。</p><p>友元对基类的访问权限由基类自身控制，即使对于派生类中的基类部分也是如此。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base&#123;    &#x2F;&#x2F; added friend declaration; other members as before    friend class Pal;   &#x2F;&#x2F; Pal has no access to classes derived from Base&#125;;class Pal&#123;public:    int f(Base b) &#123; return b.prot_mem; &#125;     &#x2F;&#x2F; ok: Pal is a friend of Base    int f2(Sneaky s) &#123; return s.j; &#125;         &#x2F;&#x2F; error: Pal not friend of Sneaky    &#x2F;&#x2F; access to a base class is controlled by the base class, even inside a derived object    int f3(Sneaky s) &#123; return s.prot_mem; &#125;  &#x2F;&#x2F; ok: Pal is a friend&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>友元关系不能继承，每个类负责控制各自成员的访问权限。</p><p>使用<code>using</code>声明可以改变派生类继承的某个名字的访问级别。新的访问级别由该<code>using</code>声明之前的访问说明符决定。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base&#123;public:    std::size_t size() const &#123; return n; &#125;protected:    std::size_t n;&#125;;class Derived : private Base&#123; &#x2F;&#x2F; note: private inheritancepublic:    &#x2F;&#x2F; maintain access levels for members related to the size of the object    using Base::size;protected:    using Base::n;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>派生类只能为那些它可以访问的名字提供<code>using</code>声明。</p><p>默认情况下，使用<code>class</code>关键字定义的派生类是私有继承的，而使用<code>struct</code>关键字定义的派生类是公有继承的。</p><p>建议显式地声明派生类的继承方式，不要仅仅依赖于默认设置。</p><h2 id="继承中的类作用域（Class-Scope-under-Inheritance）"><a href="#继承中的类作用域（Class-Scope-under-Inheritance）" class="headerlink" title="继承中的类作用域（Class Scope under Inheritance）"></a>继承中的类作用域（Class Scope under Inheritance）</h2><p>当存在继承关系时，派生类的作用域嵌套在其基类的作用域之内。</p><p>一个对象、引用或指针的静态类型决定了该对象的哪些成员是可见的。</p><p>派生类定义的成员会隐藏同名的基类成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Base&#123;protected:    int mem;&#125;;struct Derived : Base&#123;    int get_mem() &#123; return mem; &#125;   &#x2F;&#x2F; returns Derived::mem  protected:    int mem;    &#x2F;&#x2F; hides mem in the base&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过作用域运算符<code>::</code>来使用被隐藏的基类成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Derived : Base&#123;    int get_base_mem() &#123; return Base::mem; &#125;    &#x2F;&#x2F; ...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了覆盖继承而来的虚函数之外，派生类最好不要重用其他定义在基类中的名字。</p><p>和其他函数一样，成员函数无论是否是虚函数都能被重载。</p><p>派生类可以覆盖重载函数的0个或多个实例。如果派生类希望所有的重载版本对它来说都是可见的，那么它就需要覆盖所有版本，或者一个也不覆盖。</p><p>有时一个类仅需覆盖重载集合中的一些而非全部函数，此时如果我们不得不覆盖基类中的每一个版本的话，操作会极其繁琐。为了简化操作，可以为重载成员提供<code>using</code>声明。<code>using</code>声明指定了一个函数名字但不指定形参列表，所以一条基类成员函数的<code>using</code>声明语句就可以把该函数的所有重载实例添加到派生类作用域中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base&#123;private:    int x;    public:    virtual void mf1() &#x3D; 0;    virtual void mf1(int);    virtual void mf2();    void fm3();    void fm3(double);&#125;;class Derived : public Base&#123;public:    &#x2F;&#x2F; 让Base内名为mf1和mf3的所有定义    &#x2F;&#x2F; 在Derived作用域内可见    using Base::mf1;    using Base::mf3;    virtual void mf1();    void fm3();    void fm4();&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Images/15-1.png" alt="15-1"></p><p>类内使用<code>using</code>声明改变访问级别的规则同样适用于重载函数的名字。</p><h2 id="构造函数与拷贝控制（Constructors-and-Copy-Control）"><a href="#构造函数与拷贝控制（Constructors-and-Copy-Control）" class="headerlink" title="构造函数与拷贝控制（Constructors and Copy Control）"></a>构造函数与拷贝控制（Constructors and Copy Control）</h2><h3 id="虚析构函数（Virtual-Destructors）"><a href="#虚析构函数（Virtual-Destructors）" class="headerlink" title="虚析构函数（Virtual Destructors）"></a>虚析构函数（Virtual Destructors）</h3><p>一般来说，如果一个类需要析构函数，那么它也需要拷贝和赋值操作。但基类的析构函数不遵循该规则。</p><p>基类通常应该定义一个虚析构函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Quote&#123;public:    &#x2F;&#x2F; virtual destructor needed if a base pointer pointing to a derived object is deleted    virtual ~Quote() &#x3D; default;   &#x2F;&#x2F; dynamic binding for the destructor&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果基类的析构函数不是虚函数，则<code>delete</code>一个指向派生类对象的基类指针会产生未定义的结果。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Quote *itemP &#x3D; new Quote;   &#x2F;&#x2F; same static and dynamic typedelete itemP;     &#x2F;&#x2F; destructor for Quote calleditemP &#x3D; new Bulk_quote;     &#x2F;&#x2F; static and dynamic types differdelete itemP;     &#x2F;&#x2F; destructor for Bulk_quote called<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虚析构函数会阻止编译器为类合成移动操作。</p><h3 id="合成拷贝控制与继承（Synthesized-Copy-Control-and-Inheritance）"><a href="#合成拷贝控制与继承（Synthesized-Copy-Control-and-Inheritance）" class="headerlink" title="合成拷贝控制与继承（Synthesized Copy Control and Inheritance）"></a>合成拷贝控制与继承（Synthesized Copy Control and Inheritance）</h3><p>对于派生类的析构函数来说，它除了销毁派生类自己的成员外，还负责销毁派生类直接基类的成员。</p><p>派生类中删除的拷贝控制与基类的关系：</p><ul><li>如果基类中的默认构造函数、拷贝构造函数、拷贝赋值运算符或析构函数是被删除的或者不可访问的函数，则派生类中对应的成员也会是被删除的。因为编译器不能使用基类成员来执行派生类对象中基类部分的构造、赋值或销毁操作。</li><li>如果基类的析构函数是被删除的或者不可访问的，则派生类中合成的默认和拷贝构造函数也会是被删除的。因为编译器无法销毁派生类对象中的基类部分。</li><li>编译器不会合成一个被删除的移动操作。当我们使用<code>=default</code>请求一个移动操作时，如果基类中对应的操作是被删除的或者不可访问的，则派生类中的操作也会是被删除的。因为派生类对象中的基类部分不能移动。同样，如果基类的析构函数是被删除的或者不可访问的，则派生类的移动构造函数也会是被删除的。</li></ul><p>在实际编程中，如果基类没有默认、拷贝或移动构造函数，则一般情况下派生类也不会定义相应的操作。</p><p>因为基类缺少移动操作会阻止编译器为派生类合成自己的移动操作，所以当我们确实需要执行移动操作时，应该首先在基类中进行定义。</p><h3 id="派生类的拷贝控制成员（Derived-Class-Copy-Control-Members）"><a href="#派生类的拷贝控制成员（Derived-Class-Copy-Control-Members）" class="headerlink" title="派生类的拷贝控制成员（Derived-Class Copy-Control Members）"></a>派生类的拷贝控制成员（Derived-Class Copy-Control Members）</h3><p>当派生类定义了拷贝或移动操作时，该操作负责拷贝或移动包括基类成员在内的整个对象。</p><p>当为派生类定义拷贝或移动构造函数时，通常使用对应的基类构造函数初始化对象的基类部分。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base &#123; &#x2F;* ... *&#x2F; &#125; ;class D: public Base&#123;public:    &#x2F;&#x2F; by default, the base class default constructor initializes the base part of an object    &#x2F;&#x2F; to use the copy or move constructor, we must explicitly call that    &#x2F;&#x2F; constructor in the constructor initializer list    D(const D&amp; d): Base(d)   &#x2F;&#x2F; copy the base members    &#x2F;* initializers for members of D *&#x2F; &#123; &#x2F;* ... *&#x2F; &#125;    D(D&amp;&amp; d): Base(std::move(d))    &#x2F;&#x2F; move the base members    &#x2F;* initializers for members of D *&#x2F; &#123; &#x2F;* ... *&#x2F; &#125;&#125;;&#x2F;&#x2F; probably incorrect definition of the D copy constructor&#x2F;&#x2F; base-class part is default initialized, not copiedD(const D&amp; d)   &#x2F;* member initializers, but no base-class initializer *&#x2F;&#123; &#x2F;* ... *&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在默认情况下，基类默认构造函数初始化派生类对象的基类部分。如果想拷贝或移动基类部分，则必须在派生类的构造函数初始化列表中显式地使用基类的拷贝或移动构造函数。</p><p>派生类的赋值运算符必须显式地为其基类部分赋值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; Base::operator&#x3D;(const Base&amp;) is not invoked automaticallyD &amp;D::operator&#x3D;(const D &amp;rhs)&#123;    Base::operator&#x3D;(rhs);   &#x2F;&#x2F; assigns the base part    &#x2F;&#x2F; assign the members in the derived class, as usual,    &#x2F;&#x2F; handling self-assignment and freeing existing resources as appropriate    return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>派生类的析构函数只负责销毁派生类自己分配的资源。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class D: public Base&#123;public:    &#x2F;&#x2F; Base::~Base invoked automatically    ~D() &#123; &#x2F;* do what it takes to clean up derived members *&#x2F; &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果构造函数或析构函数调用了某个虚函数，则应该执行与构造函数或析构函数所属类型相对应的虚函数版本。</p><h3 id="继承的构造函数（Inherited-Constructors）"><a href="#继承的构造函数（Inherited-Constructors）" class="headerlink" title="继承的构造函数（Inherited Constructors）"></a>继承的构造函数（Inherited Constructors）</h3><p>C++11新标准允许派生类重用（非常规方式继承）其直接基类定义的构造函数。继承方式是提供一条注明了直接基类名的<code>using</code>声明语句。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Bulk_quote : public Disc_quote&#123;public:    using Disc_quote::Disc_quote;   &#x2F;&#x2F; inherit Disc_quote&#39;s constructors    double net_price(std::size_t) const;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常情况下，<code>using</code>声明语句只是令某个名字在当前作用域内可见。而作用于构造函数时，<code>using</code>声明将令编译器产生代码。对于基类的每个构造函数，编译器都会生成一个与其形参列表完全相同的派生类构造函数。如果派生类含有自己的数据成员，则这些成员会被默认初始化。</p><p>构造函数的<code>using</code>声明不会改变该函数的访问级别，不能指定<code>explicit</code>或<code>constexpr</code>属性。</p><p>定义在派生类中的构造函数会替换继承而来的具有相同形参列表的构造函数。</p><p>派生类不能继承默认、拷贝和移动构造函数。如果派生类没有直接定义这些构造函数，则编译器会为其合成它们。</p><p>当一个基类构造函数含有默认实参时，这些默认值不会被继承。相反，派生类会获得多个继承的构造函数，其中每个构造函数分别省略掉一个含有默认值的形参。</p><h2 id="容器与继承（Containers-and-Inheritance）"><a href="#容器与继承（Containers-and-Inheritance）" class="headerlink" title="容器与继承（Containers and Inheritance）"></a>容器与继承（Containers and Inheritance）</h2><p>因为容器中不能保存不同类型的元素，所以不能把具有继承关系的多种类型的对象直接存储在容器中。</p><p>容器不能和存在继承关系的类型兼容。</p><p>如果想在容器中存储具有继承关系的对象，则应该存放基类的指针。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-14-overloaded-operations-and-conversions/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-14-overloaded-operations-and-conversions/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第14章-重载运算与类型转换"><a href="#第14章-重载运算与类型转换" class="headerlink" title="第14章 重载运算与类型转换"></a>第14章 重载运算与类型转换</h1><h2 id="基本概念（Basic-Concepts）"><a href="#基本概念（Basic-Concepts）" class="headerlink" title="基本概念（Basic Concepts）"></a>基本概念（Basic Concepts）</h2><p>重载的运算符是具有特殊名字的函数，它们的名字由关键字<code>operator</code>和其后要定义的运算符号组成。</p><p>重载运算符函数的参数数量和该运算符作用的运算对象数量一样多。对于二元运算符来说，左侧运算对象传递给第一个参数，右侧运算对象传递给第二个参数。除了重载的函数调用运算符<code>operator()</code>之外，其他重载运算符不能含有默认实参。</p><p>如果一个运算符函数是类的成员函数，则它的第一个运算对象会绑定到隐式的<code>this</code>指针上。因此成员运算符函数的显式参数数量比运算对象的数量少一个。</p><p>当运算符作用于内置类型的运算对象时，无法改变该运算符的含义。</p><p>只能重载大多数已有的运算符，无权声明新的运算符号。</p><p><img src="Images/14-1.png" alt="14-1"></p><p>重载运算符的优先级和结合律与对应的内置运算符一致。</p><p>可以像调用普通函数一样直接调用运算符函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; equivalent calls to a nonmember operator functiondata1 + data2;              &#x2F;&#x2F; normal expressionoperator+(data1, data2);    &#x2F;&#x2F; equivalent function calldata1 +&#x3D; data2;             &#x2F;&#x2F; expression-based &#39;&#39;call&#39;&#39;data1.operator+&#x3D;(data2);    &#x2F;&#x2F; equivalent call to a member operator function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常情况下，不应该重载逗号<code>,</code>、取地址<code>&amp;</code>、逻辑与<code>&amp;&amp;</code>和逻辑或<code>||</code>运算符。</p><p>建议只有当操作的含义对于用户来说清晰明了时才使用重载运算符，重载运算符的返回类型也应该与其内置版本的返回类型兼容。</p><p>如果类中含有算术运算符或位运算符，则最好也提供对应的复合赋值运算符。</p><p>把运算符定义为成员函数时，它的左侧运算对象必须是运算符所属类型的对象。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">string s &#x3D; &quot;world&quot;;string t &#x3D; s + &quot;!&quot;;     &#x2F;&#x2F; ok: we can add a const char* to a stringstring u &#x3D; &quot;hi&quot; + s;    &#x2F;&#x2F; would be an error if + were a member of string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如何选择将运算符定义为成员函数还是普通函数：</p><ul><li>赋值<code>=</code>、下标<code>[]</code>、调用<code>()</code>和成员访问箭头<code>-&gt;</code>运算符必须是成员函数。</li><li>复合赋值运算符一般是成员函数，但并非必须。</li><li>改变对象状态或者与给定类型密切相关的运算符，如递增、递减、解引用运算符，通常是成员函数。</li><li>具有对称性的运算符可能转换任意一端的运算对象，如算术、相等性、关系和位运算符，通常是普通函数。</li></ul><h2 id="输入和输出运算符（Input-and-Output-Operators）"><a href="#输入和输出运算符（Input-and-Output-Operators）" class="headerlink" title="输入和输出运算符（Input and Output Operators）"></a>输入和输出运算符（Input and Output Operators）</h2><h3 id="重载输出运算符-lt-lt-（Overloading-the-Output-Operator-lt-lt-）"><a href="#重载输出运算符-lt-lt-（Overloading-the-Output-Operator-lt-lt-）" class="headerlink" title="重载输出运算符&lt;&lt;（Overloading the Output Operator &lt;&lt;）"></a>重载输出运算符&lt;&lt;（Overloading the Output Operator &lt;&lt;）</h3><p>通常情况下，输出运算符的第一个形参是<code>ostream</code>类型的普通引用，第二个形参是要打印类型的常量引用，返回值是它的<code>ostream</code>形参。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ostream &amp;operator&lt;&lt;(ostream &amp;os, const Sales_data &amp;item)&#123;    os &lt;&lt; item.isbn() &lt;&lt; &quot; &quot; &lt;&lt; item.units_sold &lt;&lt; &quot; &quot;        &lt;&lt; item.revenue &lt;&lt; &quot; &quot; &lt;&lt; item.avg_price();    return os;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出运算符应该尽量减少格式化操作。</p><p>输入输出运算符必须是非成员函数。而由于IO操作通常需要读写类的非公有数据，所以输入输出运算符一般被声明为友元。</p><h3 id="重载输入运算符-gt-gt-（Overloading-the-Input-Operator-gt-gt-）"><a href="#重载输入运算符-gt-gt-（Overloading-the-Input-Operator-gt-gt-）" class="headerlink" title="重载输入运算符&gt;&gt;（Overloading the Input Operator &gt;&gt;）"></a>重载输入运算符&gt;&gt;（Overloading the Input Operator &gt;&gt;）</h3><p>通常情况下，输入运算符的第一个形参是要读取的流的普通引用，第二个形参是要读入的目的对象的普通引用，返回值是它的第一个形参。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">istream &amp;operator&gt;&gt;(istream &amp;is, Sales_data &amp;item)&#123;    double price;   &#x2F;&#x2F; no need to initialize; we&#39;ll read into price before we use it    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;    if (is)    &#x2F;&#x2F; check that the inputs succeeded        item.revenue &#x3D; item.units_sold * price;    else        item &#x3D; Sales_data();    &#x2F;&#x2F; input failed: give the object the default state    return is;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入运算符必须处理输入失败的情况，而输出运算符不需要。</p><p>以下情况可能导致读取操作失败：</p><ul><li>读取了错误类型的数据。</li><li>读取操作到达文件末尾。</li><li>遇到输入流的其他错误。</li></ul><p>当读取操作发生错误时，输入操作符应该负责从错误状态中恢复。</p><p>如果输入的数据不符合规定的格式，即使从技术上看IO操作是成功的，输入运算符也应该设置流的条件状态以标示出失败信息。通常情况下，输入运算符只设置<code>failbit</code>状态。<code>eofbit</code>、<code>badbit</code>等错误最好由IO标准库自己标示。</p><h2 id="算术和关系运算符（Arithmetic-and-Relational-Operators）"><a href="#算术和关系运算符（Arithmetic-and-Relational-Operators）" class="headerlink" title="算术和关系运算符（Arithmetic and Relational Operators）"></a>算术和关系运算符（Arithmetic and Relational Operators）</h2><p>通常情况下，算术和关系运算符应该定义为非成员函数，以便两侧的运算对象进行转换。其次，由于这些运算符一般不会改变运算对象的状态，所以形参都是常量引用。</p><p>算术运算符通常会计算它的两个运算对象并得到一个新值，这个值通常存储在一个局部变量内，操作完成后返回该局部变量的副本作为结果（返回类型建议设置为原对象的<code>const</code>类型）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; assumes that both objects refer to the same bookSales_data operator+(const Sales_data &amp;lhs, const Sales_data &amp;rhs)&#123;    Sales_data sum &#x3D; lhs;   &#x2F;&#x2F; copy data members from lhs into sum    sum +&#x3D; rhs;     &#x2F;&#x2F; add rhs into sum    return sum;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果类定义了算术运算符，则通常也会定义对应的复合赋值运算符，此时最有效的方式是使用复合赋值来实现算术运算符。</p><h3 id="相等运算符（Equality-Operators）"><a href="#相等运算符（Equality-Operators）" class="headerlink" title="相等运算符（Equality Operators）"></a>相等运算符（Equality Operators）</h3><p>相等运算符设计准则：</p><ul><li><p>如果类在逻辑上有相等性的含义，则应该定义<code>operator==</code>而非一个普通的命名函数。这样做便于使用标准库容器和算法，也更容易记忆。</p></li><li><p>通常情况下，<code>operator==</code>应该具有传递性。</p></li><li><p>如果类定义了<code>operator==</code>，则也应该定义<code>operator!=</code>。</p></li><li><p><code>operator==</code>和<code>operator!=</code>中的一个应该把具体工作委托给另一个。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool operator&#x3D;&#x3D;(const Sales_data &amp;lhs, const Sales_data &amp;rhs)&#123;    return lhs.isbn() &#x3D;&#x3D; rhs.isbn() &amp;&amp;        lhs.units_sold &#x3D;&#x3D; rhs.units_sold &amp;&amp;        lhs.revenue &#x3D;&#x3D; rhs.revenue;&#125;bool operator!&#x3D;(const Sales_data &amp;lhs, const Sales_data &amp;rhs)&#123;    return !(lhs &#x3D;&#x3D; rhs);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="关系运算符（Relational-Operators）"><a href="#关系运算符（Relational-Operators）" class="headerlink" title="关系运算符（Relational Operators）"></a>关系运算符（Relational Operators）</h3><p>定义了相等运算符的类通常也会定义关系运算符。因为关联容器和一些算法要用到小于运算符，所以定义<code>operator&lt;</code>会比较实用。</p><p>关系运算符设计准则：</p><ul><li>定义顺序关系，令其与关联容器中对关键字的要求保持一致。</li><li>如果类定义了<code>operator==</code>，则关系运算符的定义应该与<code>operator==</code>保持一致。特别是，如果两个对象是不相等的，那么其中一个对象应该小于另一个对象。</li><li>只有存在唯一一种逻辑可靠的小于关系时，才应该考虑为类定义<code>operator&lt;</code>。</li></ul><h2 id="赋值运算符（Assignment-Operators）"><a href="#赋值运算符（Assignment-Operators）" class="headerlink" title="赋值运算符（Assignment Operators）"></a>赋值运算符（Assignment Operators）</h2><p>赋值运算符必须定义为成员函数，复合赋值运算符通常也是如此。这两类运算符都应该返回其左侧运算对象的引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StrVec &amp;StrVec::operator&#x3D;(initializer_list&lt;string&gt; il)&#123;    &#x2F;&#x2F; alloc_n_copy allocates space and copies elements from the given range    auto data &#x3D; alloc_n_copy(il.begin(), il.end());    free();     &#x2F;&#x2F; destroy the elements in this object and free the space    elements &#x3D; data.first;      &#x2F;&#x2F; update data members to point to the new    space    first_free &#x3D; cap &#x3D; data.second;    return *this;&#125;&#x2F;&#x2F; member binary operator: left-hand operand is bound to the implicit this pointer&#x2F;&#x2F; assumes that both objects refer to the same bookSales_data&amp; Sales_data::operator+&#x3D;(const Sales_data &amp;rhs)&#123;    units_sold +&#x3D; rhs.units_sold;    revenue +&#x3D; rhs.revenue;    return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下标运算符（Subscript-Operator）"><a href="#下标运算符（Subscript-Operator）" class="headerlink" title="下标运算符（Subscript Operator）"></a>下标运算符（Subscript Operator）</h2><p>下标运算符必须定义为成员函数。</p><p>类通常会定义两个版本的下标运算符：一个返回普通引用，另一个是类的常量成员并返回常量引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class StrVec&#123;public:    std::string&amp; operator[](std::size_t n)    &#123; return elements[n]; &#125;    const std::string&amp; operator[](std::size_t n) const    &#123; return elements[n]; &#125;private:    std::string *elements;  &#x2F;&#x2F; pointer to the first element in the array&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递增和递减运算符（Increment-and-Decrement-Operators）"><a href="#递增和递减运算符（Increment-and-Decrement-Operators）" class="headerlink" title="递增和递减运算符（Increment and Decrement Operators）"></a>递增和递减运算符（Increment and Decrement Operators）</h2><p>定义递增和递减运算符的类应该同时定义前置和后置版本，这些运算符通常定义为成员函数。</p><p>为了与内置操作保持一致，前置递增或递减运算符应该返回运算后对象的引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; prefix: return a reference to the incremented&#x2F;decremented objectStrBlobPtr&amp; StrBlobPtr::operator++()&#123;    ++curr;     &#x2F;&#x2F; advance the current state    return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后置递增或递减运算符接受一个额外的（不被使用）<code>int</code>类型形参，该形参的唯一作用就是区分运算符的前置和后置版本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class StrBlobPtr&#123;public:    &#x2F;&#x2F; increment and decrement    StrBlobPtr&amp; operator++();    &#x2F;&#x2F; prefix operators    StrBlobPtr&amp; operator--();    StrBlobPtr operator++(int);  &#x2F;&#x2F; postfix operators    StrBlobPtr operator--(int);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了与内置操作保持一致，后置递增或递减运算符应该返回运算前对象的原值（返回类型建议设置为原对象的<code>const</code>类型）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StrBlobPtr StrBlobPtr::operator++(int)&#123;    StrBlobPtr ret &#x3D; *this;    &#x2F;&#x2F; save the current value    ++*this;      &#x2F;&#x2F; advance one element; prefix ++ checks the increment    return ret;   &#x2F;&#x2F; return the saved state&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想通过函数调用的方式使用后置递增或递减运算符，则必须为它的整型参数传递一个值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StrBlobPtr p(a1);   &#x2F;&#x2F; p points to the vector inside a1p.operator++(0);    &#x2F;&#x2F; call postfix operator++p.operator++();     &#x2F;&#x2F; call prefix operator++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="成员访问运算符（Member-Access-Operators）"><a href="#成员访问运算符（Member-Access-Operators）" class="headerlink" title="成员访问运算符（Member Access Operators）"></a>成员访问运算符（Member Access Operators）</h2><p>箭头运算符必须定义为成员函数，解引用运算符通常也是如此。</p><p>重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的类的对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class StrBlobPtr&#123;public:    std::string&amp; operator*() const    &#123;        return (*p)[curr];   &#x2F;&#x2F; (*p) is the vector to which this object points    &#125;    std::string* operator-&gt;() const    &#123;   &#x2F;&#x2F; delegate the real work to the dereference operator        return &amp; this-&gt;operator*();    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于形如<code>point-&gt;mem</code>的表达式来说，<em>point</em>必须是指向类对象的指针或者是一个重载了<code>operator-&gt;</code>的类的对象。<em>point</em>类型不同，<code>point-&gt;mem</code>的含义也不同。</p><ul><li>如果<em>point</em>是指针，则调用内置箭头运算符，表达式等价于<code>(*point).mem</code>。</li><li>如果<em>point</em>是重载了<code>operator-&gt;</code>的类的对象，则使用<code>point.operator-&gt;()</code>的结果来获取<em>mem</em>，表达式等价于<code>(point.operator-&gt;())-&gt;mem</code>。其中，如果该结果是一个指针，则执行内置操作，否则重复调用当前操作。</li></ul><h2 id="函数调用运算符（Function-Call-Operator）"><a href="#函数调用运算符（Function-Call-Operator）" class="headerlink" title="函数调用运算符（Function-Call Operator）"></a>函数调用运算符（Function-Call Operator）</h2><p>函数调用运算符必须定义为成员函数。一个类可以定义多个不同版本的调用运算符，相互之间必须在参数数量或类型上有所区别。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class PrintString&#123;public:    PrintString(ostream &amp;o &#x3D; cout, char c &#x3D; &#39; &#39;):        os(o), sep(c) &#123; &#125;    void operator()(const string &amp;s) const    &#123;        os &lt;&lt; s &lt;&lt; sep;    &#125;private:    ostream &amp;os;   &#x2F;&#x2F; stream on which to write    char sep;      &#x2F;&#x2F; character to print after each output&#125;;PrintString printer;  &#x2F;&#x2F; uses the defaults; prints to coutprinter(s);     &#x2F;&#x2F; prints s followed by a space on cout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果类定义了调用运算符，则该类的对象被称作函数对象（function object），函数对象常常作为泛型算法的实参。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for_each(vs.begin(), vs.end(), PrintString(cerr, &#39;\n&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="lambda是函数对象（Lambdas-Are-Function-Objects）"><a href="#lambda是函数对象（Lambdas-Are-Function-Objects）" class="headerlink" title="lambda是函数对象（Lambdas Are Function Objects）"></a>lambda是函数对象（Lambdas Are Function Objects）</h3><p>编写一个<code>lambda</code>后，编译器会将该表达式转换成一个未命名类的未命名对象，类中含有一个重载的函数调用运算符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; sort words by size, but maintain alphabetical order for words of the same sizestable_sort(words.begin(), words.end(),    [](const string &amp;a, const string &amp;b) &#123; return a.size() &lt; b.size(); &#125;);&#x2F;&#x2F; acts like an unnamed object of a class that would look something likeclass ShorterString&#123;public:    bool operator()(const string &amp;s1, const string &amp;s2) const    &#123;        return s1.size() &lt; s2.size();    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lambda</code>默认不能改变它捕获的变量。因此在默认情况下，由<code>lambda</code>产生的类中的函数调用运算符是一个<code>const</code>成员函数。如果<code>lambda</code>被声明为可变的，则调用运算符就不再是<code>const</code>函数了。</p><p><code>lambda</code>通过引用捕获变量时，由程序负责确保<code>lambda</code>执行时该引用所绑定的对象确实存在。因此编译器可以直接使用该引用而无须在<code>lambda</code>产生的类中将其存储为数据成员。相反，通过值捕获的变量被拷贝到<code>lambda</code>中，此时<code>lambda</code>产生的类必须为每个值捕获的变量建立对应的数据成员，并创建构造函数，用捕获变量的值来初始化数据成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; get an iterator to the first element whose size() is &gt;&#x3D; szauto wc &#x3D; find_if(words.begin(), words.end(),            [sz](const string &amp;a) &#123; return a.size() &gt;&#x3D; sz; &#125;);&#x2F;&#x2F; would generate a class that looks something likeclass SizeComp&#123;public:    SizeComp(size_t n): sz(n) &#123; &#125;   &#x2F;&#x2F; parameter for each captured variable    &#x2F;&#x2F; call operator with the same return type, parameters, and body as the lambda    bool operator()(const string &amp;s) const    &#123;        return s.size() &gt;&#x3D; sz;    &#125;private:    size_t sz;   &#x2F;&#x2F; a data member for each variable captured by value&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lambda</code>产生的类不包含默认构造函数、赋值运算符和默认析构函数，它是否包含默认拷贝/移动构造函数则通常要视捕获的变量类型而定。</p><h3 id="标准库定义的函数对象（Library-Defined-Function-Objects）"><a href="#标准库定义的函数对象（Library-Defined-Function-Objects）" class="headerlink" title="标准库定义的函数对象（Library-Defined Function Objects）"></a>标准库定义的函数对象（Library-Defined Function Objects）</h3><p>标准库在头文件<em>functional</em>中定义了一组表示算术运算符、关系运算符和逻辑运算符的类，每个类分别定义了一个执行命名操作的调用运算符。这些类都被定义为模板的形式，可以为其指定具体的应用类型（即调用运算符的形参类型）。</p><p><img src="Images/14-2.png" alt="14-2"></p><p>关系运算符的函数对象类通常被用来替换算法中的默认运算符，这些类对于指针同样适用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;string *&gt; nameTable;    &#x2F;&#x2F; vector of pointers&#x2F;&#x2F; error: the pointers in nameTable are unrelated, so &lt; is undefinedsort(nameTable.begin(), nameTable.end(),        [](string *a, string *b) &#123; return a &lt; b; &#125;);&#x2F;&#x2F; ok: library guarantees that less on pointer types is well definedsort(nameTable.begin(), nameTable.end(), less&lt;string*&gt;());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可调用对象与function（Callable-Objects-and-function）"><a href="#可调用对象与function（Callable-Objects-and-function）" class="headerlink" title="可调用对象与function（Callable Objects and function）"></a>可调用对象与function（Callable Objects and function）</h3><p>调用形式指明了调用返回的类型以及传递给调用的实参类型。不同的可调用对象可能具有相同的调用形式。</p><p>标准库<code>function</code>类型是一个模板，定义在头文件<em>functional</em>中，用来表示对象的调用形式。</p><p><img src="Images/14-3.png" alt="14-3"></p><p>创建一个具体的<code>function</code>类型时必须提供其所表示的对象的调用形式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ordinary functionint add(int i, int j) &#123; return i + j; &#125;&#x2F;&#x2F; function-object classstruct div&#123;    int operator()(int denominator, int divisor)    &#123;        return denominator &#x2F; divisor;    &#125;&#125;;function&lt;int(int, int)&gt; f1 &#x3D; add;      &#x2F;&#x2F; function pointerfunction&lt;int(int, int)&gt; f2 &#x3D; div();    &#x2F;&#x2F; object of a function-object classfunction&lt;int(int, int)&gt; f3 &#x3D; [](int i, int j) &#123; return i * j; &#125;;  &#x2F;&#x2F; lambda                                   cout &lt;&lt; f1(4,2) &lt;&lt; endl;   &#x2F;&#x2F; prints 6cout &lt;&lt; f2(4,2) &lt;&lt; endl;   &#x2F;&#x2F; prints 2cout &lt;&lt; f3(4,2) &lt;&lt; endl;   &#x2F;&#x2F; prints 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能直接将重载函数的名字存入<code>function</code>类型的对象中，这样做会产生二义性错误。消除二义性的方法是使用<code>lambda</code>或者存储函数指针而非函数名字。</p><p>C++11新标准库中的<code>function</code>类与旧版本中的<code>unary_function</code>和<code>binary_function</code>没有关系，后两个类已经被<code>bind</code>函数代替。</p><h2 id="重载、类型转换与运算符（Overloading，Conversions，and-Operators）"><a href="#重载、类型转换与运算符（Overloading，Conversions，and-Operators）" class="headerlink" title="重载、类型转换与运算符（Overloading，Conversions，and Operators）"></a>重载、类型转换与运算符（Overloading，Conversions，and Operators）</h2><p>转换构造函数和类型转换运算符共同定义了类类型转换（class-type conversion）。</p><h3 id="类型转换运算符（Conversion-Operators）"><a href="#类型转换运算符（Conversion-Operators）" class="headerlink" title="类型转换运算符（Conversion Operators）"></a>类型转换运算符（Conversion Operators）</h3><p>类型转换运算符是类的一种特殊成员函数，负责将一个类类型的值转换成其他类型。它不能声明返回类型，形参列表也必须为空，一般形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">operator type() const;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类型转换运算符可以面向除了<code>void</code>以外的任意类型（该类型要能作为函数的返回类型）进行定义。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class SmallInt&#123;public:    SmallInt(int i &#x3D; 0): val(i)    &#123;        if (i &lt; 0 || i &gt; 255)            throw std::out_of_range(&quot;Bad SmallInt value&quot;);    &#125;       operator int() const &#123; return val; &#125;    private:    std::size_t val;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隐式的用户定义类型转换可以置于一个标准（内置）类型转换之前或之后，并与其一起使用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; the double argument is converted to int using the built-in conversionSmallInt si &#x3D; 3.14;     &#x2F;&#x2F; calls the SmallInt(int) constructor&#x2F;&#x2F; the SmallInt conversion operator converts si to int;si + 3.14;     &#x2F;&#x2F; that int is converted to double using the built-in conversion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应该避免过度使用类型转换函数。如果在类类型和转换类型之间不存在明显的映射关系，则这样的类型转换可能具有误导性。</p><p>C++11引入了显示的类型转换运算符（explicit conversion operator）。和显式构造函数一样，编译器通常不会将显式类型转换运算符用于隐式类型转换。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class SmallInt&#123;public:    &#x2F;&#x2F; the compiler won&#39;t automatically apply this conversion    explicit operator int() const &#123; return val; &#125;    &#x2F;&#x2F; other members as before&#125;;SmallInt si &#x3D; 3;    &#x2F;&#x2F; ok: the SmallInt constructor is not explicitsi + 3;     &#x2F;&#x2F; error: implicit is conversion required, but operator int is explicitstatic_cast&lt;int&gt;(si) + 3;    &#x2F;&#x2F; ok: explicitly request the conversion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果表达式被用作条件，则编译器会隐式地执行显式类型转换。</p><ul><li><code>if</code>、<code>while</code>、<code>do-while</code>语句的条件部分。</li><li><code>for</code>语句头的条件表达式。</li><li>条件运算符<code>? :</code>的条件表达式。</li><li>逻辑非运算符<code>!</code>、逻辑或运算符<code>||</code>、逻辑与运算符<code>&amp;&amp;</code>的运算对象。</li></ul><p>类类型向<code>bool</code>的类型转换通常用在条件部分，因此<code>operator bool</code>一般被定义为显式的。</p><h3 id="避免有二义性的类型转换（Avoiding-Ambiguous-Conversions）"><a href="#避免有二义性的类型转换（Avoiding-Ambiguous-Conversions）" class="headerlink" title="避免有二义性的类型转换（Avoiding Ambiguous Conversions）"></a>避免有二义性的类型转换（Avoiding Ambiguous Conversions）</h3><p>在两种情况下可能产生多重转换路径：</p><ul><li><p><em>A</em>类定义了一个接受<em>B</em>类对象的转换构造函数，同时<em>B</em>类定义了一个转换目标是<em>A</em>类的类型转换运算符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; usually a bad idea to have mutual conversions between two class typesstruct B;struct A&#123;    A() &#x3D; default;    A(const B&amp;); &#x2F;&#x2F; converts a B to an A    &#x2F;&#x2F; other members&#125;;struct B&#123;    operator A() const; &#x2F;&#x2F; also converts a B to an A    &#x2F;&#x2F; other members&#125;;A f(const A&amp;);B b;A a &#x3D; f(b);    &#x2F;&#x2F; error ambiguous: f(B::operator A())               &#x2F;&#x2F; or f(A::A(const B&amp;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类定义了多个类型转换规则，而这些转换涉及的类型本身可以通过其他类型转换联系在一起。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct A&#123;    A(int &#x3D; 0);     &#x2F;&#x2F; usually a bad idea to have two    A(double);      &#x2F;&#x2F; conversions from arithmetic types    operator int() const;       &#x2F;&#x2F; usually a bad idea to have two    operator double() const;    &#x2F;&#x2F; conversions to arithmetic types    &#x2F;&#x2F; other members&#125;;void f2(long double);A a;f2(a);    &#x2F;&#x2F; error ambiguous: f(A::operator int())          &#x2F;&#x2F; or f(A::operator double())long lg;A a2(lg);   &#x2F;&#x2F; error ambiguous: A::A(int) or A::A(double)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>可以通过显式调用类型转换运算符或转换构造函数解决二义性问题，但不能使用强制类型转换，因为强制类型转换本身也存在二义性。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">A a1 &#x3D; f(b.operator A());    &#x2F;&#x2F; ok: use B&#39;s conversion operatorA a2 &#x3D; f(A(b));     &#x2F;&#x2F; ok: use A&#39;s constructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常情况下，不要为类定义相同的类型转换，也不要在类中定义两个及两个以上转换源或转换目标都是算术类型的转换。</p><p>使用两个用户定义的类型转换时，如果转换前后存在标准类型转换，则由标准类型转换决定最佳匹配。</p><p>如果在调用重载函数时需要使用构造函数或者强制类型转换来改变实参的类型，通常意味着程序设计存在不足。</p><p>调用重载函数时，如果需要额外的标准类型转换，则该转换只有在所有可行函数都请求同一个用户定义类型转换时才有用。如果所需的用户定义类型转换不止一个，即使其中一个调用能精确匹配而另一个调用需要额外的标准类型转换，也会产生二义性错误。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct C&#123;    C(int);    &#x2F;&#x2F; other members&#125;;struct E&#123;    E(double);    &#x2F;&#x2F; other members&#125;;void manip2(const C&amp;);void manip2(const E&amp;);&#x2F;&#x2F; error ambiguous: two different user-defined conversions could be usedmanip2(10);    &#x2F;&#x2F; manip2(C(10) or manip2(E(double(10)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数匹配与重载运算符（Function-Matching-and-Overloaded-Operators）"><a href="#函数匹配与重载运算符（Function-Matching-and-Overloaded-Operators）" class="headerlink" title="函数匹配与重载运算符（Function Matching and Overloaded Operators）"></a>函数匹配与重载运算符（Function Matching and Overloaded Operators）</h3><p>表达式中运算符的候选函数集既包括成员函数，也包括非成员函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class SmallInt&#123;    friend SmallInt operator+(const SmallInt&amp;, const SmallInt&amp;);    public:    SmallInt(int &#x3D; 0);    &#x2F;&#x2F; conversion from int    operator int() const &#123; return val; &#125;    &#x2F;&#x2F; conversion to int    private:    std::size_t val;&#125;;SmallInt s1, s2;SmallInt s3 &#x3D; s1 + s2;    &#x2F;&#x2F; uses overloaded operator+int i &#x3D; s3 + 0;    &#x2F;&#x2F; error: ambiguous<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果类既定义了转换目标是算术类型的类型转换，也定义了重载的运算符，则会遇到重载运算符与内置运算符的二义性问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-13-copy-control/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-13-copy-control/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第13章-拷贝控制"><a href="#第13章-拷贝控制" class="headerlink" title="第13章 拷贝控制"></a>第13章 拷贝控制</h1><p>一个类通过定义五种特殊的成员函数来控制对象的拷贝、移动、赋值和销毁操作。</p><ul><li>拷贝构造函数（copy constructor）</li><li>拷贝赋值运算符（copy-assignment operator）</li><li>移动构造函数（move constructor）</li><li>移动赋值运算符（move-assignment operator）</li><li>析构函数（destructor）</li></ul><p>这些操作统称为拷贝控制操作（copy control）。</p><p>在定义任何类时，拷贝控制操作都是必要部分。</p><h2 id="拷贝、赋值与销毁（Copy，Assign，and-Destroy）"><a href="#拷贝、赋值与销毁（Copy，Assign，and-Destroy）" class="headerlink" title="拷贝、赋值与销毁（Copy，Assign，and Destroy）"></a>拷贝、赋值与销毁（Copy，Assign，and Destroy）</h2><h3 id="拷贝构造函数（The-Copy-Constructor）"><a href="#拷贝构造函数（The-Copy-Constructor）" class="headerlink" title="拷贝构造函数（The Copy Constructor）"></a>拷贝构造函数（The Copy Constructor）</h3><p>如果一个构造函数的第一个参数是自身类类型的引用（几乎总是<code>const</code>引用），且任何额外参数都有默认值，则此构造函数是拷贝构造函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo();   &#x2F;&#x2F; default constructor    Foo(const Foo&amp;);   &#x2F;&#x2F; copy constructor    &#x2F;&#x2F; ...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于拷贝构造函数在一些情况下会被隐式使用，因此通常不会声明为<code>explicit</code>的。</p><p>如果类未定义自己的拷贝构造函数，编译器会为类合成一个。一般情况下，合成拷贝构造函数（synthesized copy constructor）会将其参数的非<code>static</code>成员逐个拷贝到正在创建的对象中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Sales_data&#123;public:    &#x2F;&#x2F; other members and constructors as before    &#x2F;&#x2F; declaration equivalent to the synthesized copy constructor    Sales_data(const Sales_data&amp;);private:    std::string bookNo;    int units_sold &#x3D; 0;    double revenue &#x3D; 0.0;&#125;;&#x2F;&#x2F; equivalent to the copy constructor that would be synthesized for Sales_dataSales_data::Sales_data(const Sales_data &amp;orig):    bookNo(orig.bookNo),    &#x2F;&#x2F; uses the string copy constructor    units_sold(orig.units_sold),    &#x2F;&#x2F; copies orig.units_sold    revenue(orig.revenue)   &#x2F;&#x2F; copies orig.revenue    &#123; &#125; &#x2F;&#x2F; empty bod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用直接初始化时，实际上是要求编译器按照函数匹配规则来选择与实参最匹配的构造函数。使用拷贝初始化时，是要求编译器将右侧运算对象拷贝到正在创建的对象中，如果需要的话还要进行类型转换。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string dots(10, &#39;.&#39;);   &#x2F;&#x2F; direct initializationstring s(dots);         &#x2F;&#x2F; direct initializationstring s2 &#x3D; dots;       &#x2F;&#x2F; copy initializationstring null_book &#x3D; &quot;9-999-99999-9&quot;;    &#x2F;&#x2F; copy initializationstring nines &#x3D; string(100, &#39;9&#39;);       &#x2F;&#x2F; copy initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝初始化通常使用拷贝构造函数来完成。但如果一个类拥有移动构造函数，则拷贝初始化有时会使用移动构造函数而非拷贝构造函数来完成。</p><p>发生拷贝初始化的情况：</p><ul><li>用<code>=</code>定义变量。</li><li>将对象作为实参传递给非引用类型的形参。</li><li>从返回类型为非引用类型的函数返回对象。</li><li>用花括号列表初始化数组中的元素或聚合类中的成员。</li></ul><p>当传递一个实参或者从函数返回一个值时，不能隐式使用<code>explicit</code>构造函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v1(10);     &#x2F;&#x2F; ok: direct initializationvector&lt;int&gt; v2 &#x3D; 10;    &#x2F;&#x2F; error: constructor that takes a size is explicitvoid f(vector&lt;int&gt;);    &#x2F;&#x2F; f&#39;s parameter is copy initializedf(10);      &#x2F;&#x2F; error: can&#39;t use an explicit constructor to copy an argumentf(vector&lt;int&gt;(10));     &#x2F;&#x2F; ok: directly construct a temporary vector from an int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拷贝赋值运算符（The-Copy-Assignment-Operator）"><a href="#拷贝赋值运算符（The-Copy-Assignment-Operator）" class="headerlink" title="拷贝赋值运算符（The Copy-Assignment Operator）"></a>拷贝赋值运算符（The Copy-Assignment Operator）</h3><p>重载运算符（overloaded operator）的参数表示运算符的运算对象。</p><p>如果一个运算符是成员函数，则其左侧运算对象会绑定到隐式的<code>this</code>参数上。</p><p>赋值运算符通常应该返回一个指向其左侧运算对象的引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo&amp; operator&#x3D;(const Foo&amp;);  &#x2F;&#x2F; assignment operator    &#x2F;&#x2F; ...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准库通常要求保存在容器中的类型要具有赋值运算符，且其返回值是左侧运算对象的引用。</p><p>如果类未定义自己的拷贝赋值运算符，编译器会为类合成一个。一般情况下，合成拷贝赋值运算符（synthesized copy-assignment operator）会将其右侧运算对象的非<code>static</code>成员逐个赋值给左侧运算对象的对应成员，之后返回左侧运算对象的引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; equivalent to the synthesized copy-assignment operatorSales_data&amp; Sales_data::operator&#x3D;(const Sales_data &amp;rhs)&#123;    bookNo &#x3D; rhs.bookNo;    &#x2F;&#x2F; calls the string::operator&#x3D;    units_sold &#x3D; rhs.units_sold;    &#x2F;&#x2F; uses the built-in int assignment    revenue &#x3D; rhs.revenue;  &#x2F;&#x2F; uses the built-in double assignment    return *this;   &#x2F;&#x2F; return a reference to this object&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="析构函数（The-Destructor）"><a href="#析构函数（The-Destructor）" class="headerlink" title="析构函数（The Destructor）"></a>析构函数（The Destructor）</h3><p>析构函数负责释放对象使用的资源，并销毁对象的非<code>static</code>数据成员。</p><p>析构函数的名字由波浪号<code>~</code>接类名构成，它没有返回值，也不接受参数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    ~Foo(); &#x2F;&#x2F; destructor    &#x2F;&#x2F; ...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于析构函数不接受参数，所以它不能被重载。</p><p>如果类未定义自己的析构函数，编译器会为类合成一个。合成析构函数（synthesized destructor）的函数体为空。</p><p>析构函数首先执行函数体，然后再销毁数据成员。在整个对象销毁过程中，析构函数体是作为成员销毁步骤之外的另一部分而进行的。成员按照初始化顺序的逆序销毁。</p><p>隐式销毁一个内置指针类型的成员不会<code>delete</code>它所指向的对象。</p><p>无论何时一个对象被销毁，都会自动调用其析构函数。</p><p>当指向一个对象的引用或指针离开作用域时，该对象的析构函数不会执行。</p><h3 id="三-五法则（The-Rule-of-Three-Five）"><a href="#三-五法则（The-Rule-of-Three-Five）" class="headerlink" title="三/五法则（The Rule of Three/Five）"></a>三/五法则（The Rule of Three/Five）</h3><p>需要析构函数的类一般也需要拷贝和赋值操作。</p><p>需要拷贝操作的类一般也需要赋值操作，反之亦然。</p><h3 id="使用-default（Using-default）"><a href="#使用-default（Using-default）" class="headerlink" title="使用=default（Using =default）"></a>使用=default（Using =default）</h3><p>可以通过将拷贝控制成员定义为<code>=default</code>来显式地要求编译器生成合成版本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Sales_data&#123;public:    &#x2F;&#x2F; copy control; use defaults    Sales_data() &#x3D; default;    Sales_data(const Sales_data&amp;) &#x3D; default;    ~Sales_data() &#x3D; default;    &#x2F;&#x2F; other members as before&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在类内使用<code>=default</code>修饰成员声明时，合成的函数是隐式内联的。如果不希望合成的是内联函数，应该只对成员的类外定义使用<code>=default</code>。</p><p>只能对具有合成版本的成员函数使用<code>=default</code>。</p><h3 id="阻止拷贝（Preventing-Copies）"><a href="#阻止拷贝（Preventing-Copies）" class="headerlink" title="阻止拷贝（Preventing Copies）"></a>阻止拷贝（Preventing Copies）</h3><p>大多数类应该定义默认构造函数、拷贝构造函数和拷贝赋值运算符，无论是显式地还是隐式地。</p><p>在C++11新标准中，将拷贝构造函数和拷贝赋值运算符定义为删除的函数（deleted function）可以阻止类对象的拷贝。删除的函数是一种虽然进行了声明，但是却不能以任何方式使用的函数。定义删除函数的方式是在函数的形参列表后面添加<code>=delete</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct NoCopy&#123;    NoCopy() &#x3D; default; &#x2F;&#x2F; use the synthesized default constructor    NoCopy(const NoCopy&amp;) &#x3D; delete; &#x2F;&#x2F; no copy    NoCopy &amp;operator&#x3D;(const NoCopy&amp;) &#x3D; delete; &#x2F;&#x2F; no assignment    ~NoCopy() &#x3D; default; &#x2F;&#x2F; use the synthesized destructor    &#x2F;&#x2F; other members&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>=delete</code>和<code>=default</code>有两点不同：</p><ul><li><code>=delete</code>可以对任何函数使用；<code>=default</code>只能对具有合成版本的函数使用。</li><li><code>=delete</code>必须出现在函数第一次声明的地方；<code>=default</code>既能出现在类内，也能出现在类外。</li></ul><p>析构函数不能是删除的函数。对于析构函数被删除的类型，不能定义该类型的变量或者释放指向该类型动态分配对象的指针。</p><p>如果一个类中有数据成员不能默认构造、拷贝或销毁，则对应的合成拷贝控制成员将被定义为删除的。</p><p>在旧版本的C++标准中，类通过将拷贝构造函数和拷贝赋值运算符声明为<code>private</code>成员来阻止类对象的拷贝。在新标准中建议使用<code>=delete</code>而非<code>private</code>。</p><h2 id="拷贝控制和资源管理（Copy-Control-and-Resource-Management）"><a href="#拷贝控制和资源管理（Copy-Control-and-Resource-Management）" class="headerlink" title="拷贝控制和资源管理（Copy Control and Resource Management）"></a>拷贝控制和资源管理（Copy Control and Resource Management）</h2><p>通常，管理类外资源的类必须定义拷贝控制成员。</p><h3 id="行为像值的类（Classes-That-Act-Like-Values）"><a href="#行为像值的类（Classes-That-Act-Like-Values）" class="headerlink" title="行为像值的类（Classes That Act Like Values）"></a>行为像值的类（Classes That Act Like Values）</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class HasPtr&#123;public:    HasPtr(const std::string &amp;s &#x3D; std::string()):        ps(new std::string(s)), i(0) &#123; &#125;    &#x2F;&#x2F; each HasPtr has its own copy of the string to which ps points    HasPtr(const HasPtr &amp;p):        ps(new std::string(*p.ps)), i(p.i) &#123; &#125;    HasPtr&amp; operator&#x3D;(const HasPtr &amp;);    ~HasPtr() &#123; delete ps; &#125;private:    std::string *ps;    int i;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写赋值运算符时有两点需要注意：</p><ul><li><p>即使将一个对象赋予它自身，赋值运算符也能正确工作。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; WRONG way to write an assignment operator!HasPtr&amp; HasPtr::operator&#x3D;(const HasPtr &amp;rhs)&#123;    delete ps;   &#x2F;&#x2F; frees the string to which this object points    &#x2F;&#x2F; if rhs and *this are the same object, we&#39;re copying from deleted memory!    ps &#x3D; new string(*(rhs.ps));    i &#x3D; rhs.i;    return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>赋值运算符通常结合了拷贝构造函数和析构函数的工作。</p><p>编写赋值运算符时，一个好的方法是先将右侧运算对象拷贝到一个局部临时对象中。拷贝完成后，就可以安全地销毁左侧运算对象的现有成员了。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">HasPtr&amp; HasPtr::operator&#x3D;(const HasPtr &amp;rhs)&#123;    auto newp &#x3D; new string(*rhs.ps);    &#x2F;&#x2F; copy the underlying string    delete ps;   &#x2F;&#x2F; free the old memory    ps &#x3D; newp;   &#x2F;&#x2F; copy data from rhs into this object    i &#x3D; rhs.i;    return *this;   &#x2F;&#x2F; return this object&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="定义行为像指针的类（Defining-Classes-That-Act-Like-Pointers）"><a href="#定义行为像指针的类（Defining-Classes-That-Act-Like-Pointers）" class="headerlink" title="定义行为像指针的类（Defining Classes That Act Like Pointers）"></a>定义行为像指针的类（Defining Classes That Act Like Pointers）</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class HasPtr&#123;public:    &#x2F;&#x2F; constructor allocates a new string and a new counter, which it sets to 1    HasPtr(const std::string &amp;s &#x3D; std::string()):        ps(new std::string(s)), i(0), use(new std::size_t(1)) &#123;&#125;    &#x2F;&#x2F; copy constructor copies all three data members and increments the counter    HasPtr(const HasPtr &amp;p):        ps(p.ps), i(p.i), use(p.use) &#123; ++*use; &#125;    HasPtr&amp; operator&#x3D;(const HasPtr&amp;);    ~HasPtr();private:    std::string *ps;    int i;    std::size_t *use; &#x2F;&#x2F; member to keep track of how many objects share *ps&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>析构函数释放内存前应该判断是否还有其他对象指向这块内存。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">HasPtr::~HasPtr()&#123;    if (--*use &#x3D;&#x3D; 0)    &#123;   &#x2F;&#x2F; if the reference count goes to 0        delete ps;   &#x2F;&#x2F; delete the string        delete use;  &#x2F;&#x2F; and the counter    &#125;&#125;HasPtr&amp; HasPtr::operator&#x3D;(const HasPtr &amp;rhs)&#123;    ++*rhs.use;    &#x2F;&#x2F; increment the use count of the right-hand operand    if (--*use &#x3D;&#x3D; 0)    &#123;   &#x2F;&#x2F; then decrement this object&#39;s counter        delete ps; &#x2F;&#x2F; if no other users        delete use; &#x2F;&#x2F; free this object&#39;s allocated members    &#125;    ps &#x3D; rhs.ps;    &#x2F;&#x2F; copy data from rhs into this object    i &#x3D; rhs.i;    use &#x3D; rhs.use;    return *this;   &#x2F;&#x2F; return this object&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交换操作（Swap）"><a href="#交换操作（Swap）" class="headerlink" title="交换操作（Swap）"></a>交换操作（Swap）</h2><p>通常，管理类外资源的类会定义<code>swap</code>函数。如果一个类定义了自己的<code>swap</code>函数，算法将使用自定义版本，否则将使用标准库定义的<code>swap</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class HasPtr&#123;    friend void swap(HasPtr&amp;, HasPtr&amp;);    &#x2F;&#x2F; other members as in § 13.2.1 (p. 511)&#125;;inline void swap(HasPtr &amp;lhs, HasPtr &amp;rhs)&#123;    using std::swap;    swap(lhs.ps, rhs.ps);   &#x2F;&#x2F; swap the pointers, not the string data    swap(lhs.i, rhs.i);     &#x2F;&#x2F; swap the int members&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些算法在交换两个元素时会调用<code>swap</code>函数，其中每个<code>swap</code>调用都应该是未加限定的。如果存在类型特定的<code>swap</code>版本，其匹配程度会优于<em>std</em>中定义的版本（假定作用域中有<code>using</code>声明）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void swap(Foo &amp;lhs, Foo &amp;rhs)&#123;    &#x2F;&#x2F; WRONG: this function uses the library version of swap, not the HasPtr version    std::swap(lhs.h, rhs.h);    &#x2F;&#x2F; swap other members of type Foo&#125;void swap(Foo &amp;lhs, Foo &amp;rhs)&#123;    using std::swap;    swap(lhs.h, rhs.h);  &#x2F;&#x2F; uses the HasPtr version of swap    &#x2F;&#x2F; swap other members of type Foo&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与拷贝控制成员不同，<code>swap</code>函数并不是必要的。但是对于分配了资源的类，定义<code>swap</code>可能是一种重要的优化手段。</p><p>由于<code>swap</code>函数的存在就是为了优化代码，所以一般将其声明为内联函数。</p><p>定义了<code>swap</code>的类通常用<code>swap</code>来实现赋值运算符。在这种版本的赋值运算符中，右侧运算对象以值方式传递，然后将左侧运算对象与右侧运算对象的副本进行交换（拷贝并交换，copy and swap）。这种方式可以正确处理自赋值情况。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; note rhs is passed by value, which means the HasPtr copy constructor&#x2F;&#x2F; copies the string in the right-hand operand into rhsHasPtr&amp; HasPtr::operator&#x3D;(HasPtr rhs)&#123;    &#x2F;&#x2F; swap the contents of the left-hand operand with the local variable rhs    swap(*this, rhs);   &#x2F;&#x2F; rhs now points to the memory this object had used    return *this;       &#x2F;&#x2F; rhs is destroyed, which deletes the pointer in rhs&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拷贝控制示例（A-Copy-Control-Example）"><a href="#拷贝控制示例（A-Copy-Control-Example）" class="headerlink" title="拷贝控制示例（A Copy-Control Example）"></a>拷贝控制示例（A Copy-Control Example）</h2><p>拷贝赋值运算符通常结合了拷贝构造函数和析构函数的工作。在这种情况下，公共部分应该放在<code>private</code>的工具函数中完成。</p><h2 id="动态内存管理类（Classes-That-Manage-Dynamic-Memory）"><a href="#动态内存管理类（Classes-That-Manage-Dynamic-Memory）" class="headerlink" title="动态内存管理类（Classes That Manage Dynamic Memory）"></a>动态内存管理类（Classes That Manage Dynamic Memory）</h2><p>移动构造函数通常是将资源从给定对象“移动”而不是拷贝到正在创建的对象中。</p><h2 id="对象移动（Moving-Objects）"><a href="#对象移动（Moving-Objects）" class="headerlink" title="对象移动（Moving Objects）"></a>对象移动（Moving Objects）</h2><p>某些情况下，一个对象拷贝后就立即被销毁了，此时移动而非拷贝对象会大幅度提高性能。</p><p>在旧版本的标准库中，容器所能保存的类型必须是可拷贝的。但在新标准中，可以用容器保存不可拷贝，但可移动的类型。</p><p>标准库容器、<code>string</code>和<code>shared_ptr</code>类既支持移动也支持拷贝。IO类和<code>unique_ptr</code>类可以移动但不能拷贝。</p><h3 id="右值引用（Rvalue-Reference）"><a href="#右值引用（Rvalue-Reference）" class="headerlink" title="右值引用（Rvalue Reference）"></a>右值引用（Rvalue Reference）</h3><p>为了支持移动操作，C++11引入了右值引用类型。右值引用就是必须绑定到右值的引用。可以通过<code>&amp;&amp;</code>来获得右值引用。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 42;int &amp;r &#x3D; i;         &#x2F;&#x2F; ok: r refers to iint &amp;&amp;rr &#x3D; i;       &#x2F;&#x2F; error: cannot bind an rvalue reference to anint &amp;r2 &#x3D; i * 42;   &#x2F;&#x2F; error: i * 42 is an rvalueconst int &amp;r3 &#x3D; i * 42;    &#x2F;&#x2F; ok: we can bind a reference to const to an rvalueint &amp;&amp;rr2 &#x3D; i * 42;        &#x2F;&#x2F; ok: bind rr2 to the result of the multiplication<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右值引用只能绑定到即将被销毁，并且没有其他用户的临时对象上。使用右值引用的代码可以自由地接管所引用对象的资源。</p><p>变量表达式都是左值，所以不能将一个右值引用直接绑定到一个变量上，即使这个变量的类型是右值引用也不行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int &amp;&amp;rr1 &#x3D; 42;     &#x2F;&#x2F; ok: literals are rvaluesint &amp;&amp;rr2 &#x3D; rr1;    &#x2F;&#x2F; error: the expression rr1 is an lvalue!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用<code>move</code>函数可以获得绑定在左值上的右值引用，此函数定义在头文件<em>utility</em>中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int &amp;&amp;rr3 &#x3D; std::move(rr1);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用<code>move</code>函数的代码应该使用<code>std::move</code>而非<code>move</code>，这样做可以避免潜在的名字冲突。</p><h3 id="移动构造函数和移动赋值运算符（Move-Constructor-and-Move-Assignment）"><a href="#移动构造函数和移动赋值运算符（Move-Constructor-and-Move-Assignment）" class="headerlink" title="移动构造函数和移动赋值运算符（Move Constructor and Move Assignment）"></a>移动构造函数和移动赋值运算符（Move Constructor and Move Assignment）</h3><p>移动构造函数的第一个参数是该类类型的右值引用，其他任何额外参数都必须有默认值。</p><p>除了完成资源移动，移动构造函数还必须确保移后源对象是可以安全销毁的。</p><p>在函数的形参列表后面添加关键字<code>noexcept</code>可以指明该函数不会抛出任何异常。</p><p>对于构造函数，<code>noexcept</code>位于形参列表和初始化列表开头的冒号之间。在类的头文件声明和定义中（如果定义在类外）都应该指定<code>noexcept</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class StrVec&#123;public:    StrVec(StrVec&amp;&amp;) noexcept;  &#x2F;&#x2F; move constructor    &#x2F;&#x2F; other members as before&#125;;StrVec::StrVec(StrVec &amp;&amp;s) noexcept : &#x2F;* member initializers *&#x2F;&#123; &#x2F;* constructor body *&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准库容器能对异常发生时其自身的行为提供保障。虽然移动操作通常不抛出异常，但抛出异常也是允许的。为了安全起见，除非容器确定元素类型的移动操作不会抛出异常，否则在重新分配内存的过程中，它就必须使用拷贝而非移动操作。</p><p>不抛出异常的移动构造函数和移动赋值运算符必须标记为<code>noexcept</code>。</p><p>在移动操作之后，移后源对象必须保持有效的、可销毁的状态，但是用户不能使用它的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StrVec &amp;StrVec::operator&#x3D;(StrVec &amp;&amp;rhs) noexcept&#123;    &#x2F;&#x2F; direct test for self-assignment    if (this !&#x3D; &amp;rhs)    &#123;        free();     &#x2F;&#x2F; free existing elements        elements &#x3D; rhs.elements;    &#x2F;&#x2F; take over resources from rhs        first_free &#x3D; rhs.first_free;        cap &#x3D; rhs.cap;        &#x2F;&#x2F; leave rhs in a destructible state        rhs.elements &#x3D; rhs.first_free &#x3D; rhs.cap &#x3D; nullptr;    &#125;    return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当一个类没有定义任何拷贝控制成员，且类的每个非<code>static</code>数据成员都可以移动时，编译器才会为类合成移动构造函数和移动赋值运算符。编译器可以移动内置类型的成员。如果一个成员是类类型，且该类有对应的移动操作，则编译器也能移动该成员。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; the compiler will synthesize the move operations for X and hasXstruct X&#123;    int i;   &#x2F;&#x2F; built-in types can be moved    std::string s;   &#x2F;&#x2F; string defines its own move operations&#125;;struct hasX&#123;    X mem; &#x2F;&#x2F; X has synthesized move operations&#125;;X x, x2 &#x3D; std::move(x);         &#x2F;&#x2F; uses the synthesized move constructorhasX hx, hx2 &#x3D; std::move(hx);   &#x2F;&#x2F; uses the synthesized move constructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与拷贝操作不同，移动操作永远不会被隐式定义为删除的函数。但如果显式地要求编译器生成<code>=default</code>的移动操作，且编译器不能移动全部成员，则移动操作会被定义为删除的函数。</p><p>定义了移动构造函数或移动赋值运算符的类必须也定义自己的拷贝操作，否则这些成员会被默认地定义为删除的函数。</p><p>如果一个类有可用的拷贝构造函数而没有移动构造函数，则其对象是通过拷贝构造函数来“移动”的，即使调用<code>move</code>函数时也是如此。拷贝赋值运算符和移动赋值运算符的情况类似。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo() &#x3D; default;    Foo(const Foo&amp;);    &#x2F;&#x2F; copy constructor    &#x2F;&#x2F; other members, but Foo does not define a move constructor&#125;;Foo x;Foo y(x);   &#x2F;&#x2F; copy constructor; x is an lvalueFoo z(std::move(x));    &#x2F;&#x2F; copy constructor, because there is no move constructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用非引用参数的单一赋值运算符可以实现拷贝赋值和移动赋值两种功能。依赖于实参的类型，左值被拷贝，右值被移动。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; assignment operator is both the move- and copy-assignment operatorHasPtr&amp; operator&#x3D;(HasPtr rhs)&#123;    swap(*this, rhs);    return *this;&#125;hp &#x3D; hp2;   &#x2F;&#x2F; hp2 is an lvalue; copy constructor used to copy hp2hp &#x3D; std::move(hp2);    &#x2F;&#x2F; move constructor moves hp2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议将五个拷贝控制成员当成一个整体来对待。如果一个类需要任何一个拷贝操作，它就应该定义所有五个操作。</p><p>移动赋值运算符可以直接检查自赋值情况。</p><p>C++11标准库定义了移动迭代器（move iterator）适配器。一个移动迭代器通过改变给定迭代器的解引用运算符的行为来适配此迭代器。移动迭代器的解引用运算符返回一个右值引用。</p><p>调用<code>make_move_iterator</code>函数能将一个普通迭代器转换成移动迭代器。原迭代器的所有其他操作在移动迭代器中都照常工作。</p><p>最好不要在移动构造函数和移动赋值运算符这些类实现代码之外的地方随意使用<code>move</code>操作。</p><h3 id="右值引用和成员函数（Rvalue-References-and-Member-Functions）"><a href="#右值引用和成员函数（Rvalue-References-and-Member-Functions）" class="headerlink" title="右值引用和成员函数（Rvalue References and Member Functions）"></a>右值引用和成员函数（Rvalue References and Member Functions）</h3><p>区分移动和拷贝的重载函数通常有一个版本接受一个<code>const T&amp;</code>参数，另一个版本接受一个<code>T&amp;&amp;</code>参数（<em>T</em>为类型）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void push_back(const X&amp;);   &#x2F;&#x2F; copy: binds to any kind of Xvoid push_back(X&amp;&amp;);        &#x2F;&#x2F; move: binds only to modifiable rvalues of type X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有时可以对右值赋值：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1, s2;s1 + s2 &#x3D; &quot;wow!&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在旧标准中，没有办法阻止这种使用方式。为了维持向下兼容性，新标准库仍然允许向右值赋值。但是可以在自己的类中阻止这种行为，规定左侧运算对象（即<code>this</code>指向的对象）必须是一个左值。</p><p>在非<code>static</code>成员函数的形参列表后面添加引用限定符（reference qualifier）可以指定<code>this</code>的左值/右值属性。引用限定符可以是<code>&amp;</code>或者<code>&amp;&amp;</code>，分别表示<code>this</code>可以指向一个左值或右值对象。引用限定符必须同时出现在函数的声明和定义中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo &amp;operator&#x3D;(const Foo&amp;) &amp;; &#x2F;&#x2F; may assign only to modifiable lvalues    &#x2F;&#x2F; other members of Foo&#125;;Foo &amp;Foo::operator&#x3D;(const Foo &amp;rhs) &amp;&#123;    &#x2F;&#x2F; do whatever is needed to assign rhs to this object    return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个非<code>static</code>成员函数可以同时使用<code>const</code>和引用限定符，此时引用限定符跟在<code>const</code>限定符之后。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo someMem() &amp; const;      &#x2F;&#x2F; error: const qualifier must come first    Foo anotherMem() const &amp;;   &#x2F;&#x2F; ok: const qualifier comes first&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用限定符也可以区分成员函数的重载版本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo sorted() &amp;&amp;;        &#x2F;&#x2F; may run on modifiable rvalues    Foo sorted() const &amp;;   &#x2F;&#x2F; may run on any kind of Foo&#125;;retVal().sorted();   &#x2F;&#x2F; retVal() is an rvalue, calls Foo::sorted() &amp;&amp;retFoo().sorted();   &#x2F;&#x2F; retFoo() is an lvalue, calls Foo::sorted() const &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个成员函数有引用限定符，则具有相同参数列表的所有重载版本都必须有引用限定符。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:    Foo sorted() &amp;&amp;;    Foo sorted() const;    &#x2F;&#x2F; error: must have reference qualifier    &#x2F;&#x2F; Comp is type alias for the function type    &#x2F;&#x2F; that can be used to compare int values    using Comp &#x3D; bool(const int&amp;, const int&amp;);    Foo sorted(Comp*);  &#x2F;&#x2F; ok: different parameter list&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-12-dynamic-memory/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-12-dynamic-memory/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第12章-动态内存"><a href="#第12章-动态内存" class="headerlink" title="第12章 动态内存"></a>第12章 动态内存</h1><p>程序用堆（heap）来存储动态分配（dynamically allocate）的对象。动态对象的生存期由程序控制。</p><h2 id="动态内存与智能指针（Dynamic-Memory-and-Smart-Pointers）"><a href="#动态内存与智能指针（Dynamic-Memory-and-Smart-Pointers）" class="headerlink" title="动态内存与智能指针（Dynamic Memory and Smart Pointers）"></a>动态内存与智能指针（Dynamic Memory and Smart Pointers）</h2><p>C++中的动态内存管理通过一对运算符完成：<code>new</code>在动态内存中为对象分配空间并返回指向该对象的指针，可以选择对对象进行初始化；<code>delete</code>接受一个动态对象的指针，销毁该对象并释放与之关联的内存。</p><p>新标准库提供了两种智能指针（smart pointer）类型来管理动态对象。智能指针的行为类似常规指针，但它自动释放所指向的对象。这两种智能指针的区别在于管理底层指针的方式：<code>shared_ptr</code>允许多个指针指向同一个对象；<code>unique_ptr</code>独占所指向的对象。标准库还定义了一个名为<code>weak_ptr</code>的伴随类，它是一种弱引用，指向<code>shared_ptr</code>所管理的对象。这三种类型都定义在头文件<em>memory</em>中。</p><h3 id="shared-ptr类（The-shared-ptr-Class）"><a href="#shared-ptr类（The-shared-ptr-Class）" class="headerlink" title="shared_ptr类（The shared_ptr Class）"></a>shared_ptr类（The shared_ptr Class）</h3><p>智能指针是模板，创建时需要指明指针可以指向的类型。默认初始化的智能指针中保存着一个空指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">shared_ptr&lt;string&gt; p1;      &#x2F;&#x2F; shared_ptr that can point at a stringshared_ptr&lt;list&lt;int&gt;&gt; p2;   &#x2F;&#x2F; shared_ptr that can point at a list of ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>shared_ptr</code>和<code>unique_ptr</code>都支持的操作：</p><p><img src="Images/12-1.png" alt="12-1"></p><p><code>shared_ptr</code>独有的操作：</p><p><img src="Images/12-2.png" alt="12-2"></p><p><code>make_shared</code>函数（定义在头文件<em>memory</em>中）在动态内存中分配一个对象并初始化它，返回指向此对象的<code>shared_ptr</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; shared_ptr that points to an int with value 42shared_ptr&lt;int&gt; p3 &#x3D; make_shared&lt;int&gt;(42);&#x2F;&#x2F; p4 points to a string with value 9999999999shared_ptr&lt;string&gt; p4 &#x3D; make_shared&lt;string&gt;(10, &#39;9&#39;);&#x2F;&#x2F; p5 points to an int that is value initializedshared_ptr&lt;int&gt; p5 &#x3D; make_shared&lt;int&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行拷贝或赋值操作时，每个<code>shared_ptr</code>会记录有多少个其他<code>shared_ptr</code>与其指向相同的对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto p &#x3D; make_shared&lt;int&gt;(42);  &#x2F;&#x2F; object to which p points has one userauto q(p);  &#x2F;&#x2F; p and q point to the same object            &#x2F;&#x2F; object to which p and q point has two users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每个<code>shared_ptr</code>都有一个与之关联的计数器，通常称为引用计数（reference count）。拷贝<code>shared_ptr</code>时引用计数会递增。例如使用一个<code>shared_ptr</code>初始化另一个<code>shared_ptr</code>，或将它作为参数传递给函数以及作为函数的返回值返回。给<code>shared_ptr</code>赋予新值或<code>shared_ptr</code>被销毁时引用计数会递减。例如一个局部<code>shared_ptr</code>离开其作用域。一旦一个<code>shared_ptr</code>的引用计数变为0，它就会自动释放其所管理的对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto r &#x3D; make_shared&lt;int&gt;(42);  &#x2F;&#x2F; int to which r points has one userr &#x3D; q;  &#x2F;&#x2F; assign to r, making it point to a different address        &#x2F;&#x2F; increase the use count for the object to which q points        &#x2F;&#x2F; reduce the use count of the object to which r had pointed        &#x2F;&#x2F; the object r had pointed to has no users; that object is automatically freed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>shared_ptr</code>的析构函数会递减它所指向对象的引用计数。如果引用计数变为0，<code>shared_ptr</code>的析构函数会销毁对象并释放空间。</p><p>如果将<code>shared_ptr</code>存放于容器中，而后不再需要全部元素，而只使用其中一部分，应该用<code>erase</code>删除不再需要的元素。</p><p>程序使用动态内存通常出于以下三种原因之一：</p><ul><li>不确定需要使用多少对象。</li><li>不确定所需对象的准确类型。</li><li>需要在多个对象间共享数据。</li></ul><h3 id="直接管理内存（Managing-Memory-Directly）"><a href="#直接管理内存（Managing-Memory-Directly）" class="headerlink" title="直接管理内存（Managing Memory Directly）"></a>直接管理内存（Managing Memory Directly）</h3><p>相对于智能指针，使用<code>new</code>和<code>delete</code>管理内存很容易出错。</p><p>默认情况下，动态分配的对象是默认初始化的。所以内置类型或组合类型的对象的值将是未定义的，而类类型对象将用默认构造函数进行初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string *ps &#x3D; new string;    &#x2F;&#x2F; initialized to empty stringint *pi &#x3D; new int;     &#x2F;&#x2F; pi points to an uninitialized int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用值初始化方式、直接初始化方式、传统构造方式（圆括号<code>()</code>）或新标准下的列表初始化方式（花括号<code>&#123;&#125;</code>）初始化动态分配的对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *pi &#x3D; new int(1024);            &#x2F;&#x2F; object to which pi points has value 1024string *ps &#x3D; new string(10, &#39;9&#39;);   &#x2F;&#x2F; *ps is &quot;9999999999&quot;&#x2F;&#x2F; vector with ten elements with values from 0 to 9vector&lt;int&gt; *pv &#x3D; new vector&lt;int&gt;&#123;0,1,2,3,4,5,6,7,8,9&#125;;string *ps1 &#x3D; new string;     &#x2F;&#x2F; default initialized to the empty stringstring *ps &#x3D; new string();    &#x2F;&#x2F; value initialized to the empty stringint *pi1 &#x3D; new int;      &#x2F;&#x2F; default initialized; *pi1 is undefinedint *pi2 &#x3D; new int();    &#x2F;&#x2F; value initialized to 0; *pi2 is 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当初始化的括号中仅有单一初始化器时才可以使用<code>auto</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto p1 &#x3D; new auto(obj);    &#x2F;&#x2F; p points to an object of the type of obj                            &#x2F;&#x2F; that object is initialized from objauto p2 &#x3D; new auto&#123;a,b,c&#125;;  &#x2F;&#x2F; error: must use parentheses for the initializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以用<code>new</code>分配<code>const</code>对象，返回指向<code>const</code>类型的指针。动态分配的<code>const</code>对象必须初始化。</p><p>默认情况下，如果<code>new</code>不能分配所要求的内存空间，会抛出<code>bad_alloc</code>异常。使用定位<code>new</code>（placement new）可以阻止其抛出异常。定位<code>new</code>表达式允许程序向<code>new</code>传递额外参数。如果将<code>nothrow</code>传递给<code>new</code>，则<code>new</code>在分配失败后会返回空指针。<code>bad_alloc</code>和<code>nothrow</code>都定义在头文件<em>new</em>中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; if allocation fails, new returns a null pointerint *p1 &#x3D; new int;            &#x2F;&#x2F; if allocation fails, new throws std::bad_allocint *p2 &#x3D; new (nothrow) int;  &#x2F;&#x2F; if allocation fails, new returns a null pointer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>delete</code>释放一块并非<code>new</code>分配的内存，或者将相同的指针值释放多次的行为是未定义的。</p><p>由内置指针管理的动态对象在被显式释放前一直存在。</p><p><code>delete</code>一个指针后，指针值就无效了（空悬指针，dangling pointer）。为了防止后续的错误访问，应该在<code>delete</code>之后将指针值置空。</p><h3 id="shared-ptr和new结合使用（Using-shared-ptrs-with-new）"><a href="#shared-ptr和new结合使用（Using-shared-ptrs-with-new）" class="headerlink" title="shared_ptr和new结合使用（Using shared_ptrs with new）"></a>shared_ptr和new结合使用（Using shared_ptrs with new）</h3><p>可以用<code>new</code>返回的指针初始化智能指针。该构造函数是<code>explicit</code>的，因此必须使用直接初始化形式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">shared_ptr&lt;int&gt; p1 &#x3D; new int(1024);    &#x2F;&#x2F; error: must use direct initializationshared_ptr&lt;int&gt; p2(new int(1024));     &#x2F;&#x2F; ok: uses direct initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，用来初始化智能指针的内置指针必须指向动态内存，因为智能指针默认使用<code>delete</code>释放它所管理的对象。如果要将智能指针绑定到一个指向其他类型资源的指针上，就必须提供自定义操作来代替<code>delete</code>。</p><p><img src="Images/12-3.png" alt="12-3"></p><p>不要混合使用内置指针和智能指针。当将<code>shared_ptr</code>绑定到内置指针后，资源管理就应该交由<code>shared_ptr</code>负责。不应该再使用内置指针访问<code>shared_ptr</code>指向的内存。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ptr is created and initialized when process is calledvoid process(shared_ptr&lt;int&gt; ptr)&#123;    &#x2F;&#x2F; use ptr&#125;   &#x2F;&#x2F; ptr goes out of scope and is destroyedint *x(new int(1024));   &#x2F;&#x2F; dangerous: x is a plain pointer, not a smart pointerprocess(x);     &#x2F;&#x2F; error: cannot convert int* to shared_ptr&lt;int&gt;process(shared_ptr&lt;int&gt;(x));    &#x2F;&#x2F; legal, but the memory will be deleted!int j &#x3D; *x;     &#x2F;&#x2F; undefined: x is a dangling pointer!shared_ptr&lt;int&gt; p(new int(42));   &#x2F;&#x2F; reference count is 1process(p);     &#x2F;&#x2F; copying p increments its count; in process the reference count is 2int i &#x3D; *p;     &#x2F;&#x2F; ok: reference count is 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>智能指针的<code>get</code>函数返回一个内置指针，指向智能指针管理的对象。主要用于向不能使用智能指针的代码传递内置指针。使用<code>get</code>返回指针的代码不能<code>delete</code>此指针。</p><p>不要使用<code>get</code>初始化另一个智能指针或为智能指针赋值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">shared_ptr&lt;int&gt; p(new int(42));    &#x2F;&#x2F; reference count is 1int *q &#x3D; p.get();   &#x2F;&#x2F; ok: but don&#39;t use q in any way that might delete its pointer&#123;   &#x2F;&#x2F; new block    &#x2F;&#x2F; undefined: two independent shared_ptrs point to the same memory    shared_ptr&lt;int&gt;(q);&#125; &#x2F;&#x2F; block ends, q is destroyed, and the memory to which q points is freedint foo &#x3D; *p;   &#x2F;&#x2F; undefined; the memory to which p points was freed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用<code>reset</code>函数将新的指针赋予<code>shared_ptr</code>。与赋值类似，<code>reset</code>会更新引用计数，如果需要的话，还会释放内存空间。<code>reset</code>经常与<code>unique</code>一起使用，来控制多个<code>shared_ptr</code>共享的对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (!p.unique())    p.reset(new string(*p));   &#x2F;&#x2F; we aren&#39;t alone; allocate a new copy*p +&#x3D; newVal;   &#x2F;&#x2F; now that we know we&#39;re the only pointer, okay to change this object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="智能指针和异常（Smart-Pointers-and-Exceptions）"><a href="#智能指针和异常（Smart-Pointers-and-Exceptions）" class="headerlink" title="智能指针和异常（Smart Pointers and Exceptions）"></a>智能指针和异常（Smart Pointers and Exceptions）</h3><p>如果使用智能指针，即使程序块过早结束，智能指针类也能确保在内存不再需要时将其释放。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void f()&#123;    int *ip &#x3D; new int(42);    &#x2F;&#x2F; dynamically allocate a new object    &#x2F;&#x2F; code that throws an exception that is not caught inside f    delete ip;     &#x2F;&#x2F; free the memory before exiting&#125;void f()&#123;    shared_ptr&lt;int&gt; sp(new int(42));    &#x2F;&#x2F; allocate a new object    &#x2F;&#x2F; code that throws an exception that is not caught inside f&#125; &#x2F;&#x2F; shared_ptr freed automatically when the function ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下<code>shared_ptr</code>假定其指向动态内存，使用<code>delete</code>释放对象。创建<code>shared_ptr</code>时可以传递一个（可选）指向删除函数的指针参数，用来代替<code>delete</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct destination;    &#x2F;&#x2F; represents what we are connecting tostruct connection;     &#x2F;&#x2F; information needed to use the connectionconnection connect(destination*);   &#x2F;&#x2F; open the connectionvoid disconnect(connection);    &#x2F;&#x2F; close the given connectionvoid end_connection(connection *p)&#123;    disconnect(*p);&#125;void f(destination &amp;d &#x2F;* other parameters *&#x2F;)&#123;    connection c &#x3D; connect(&amp;d);    shared_ptr&lt;connection&gt; p(&amp;c, end_connection);    &#x2F;&#x2F; use the connection    &#x2F;&#x2F; when f exits, even if by an exception, the connection will be properly closed&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>智能指针规范：</p><ul><li>不使用相同的内置指针值初始化或<code>reset</code>多个智能指针。</li><li>不释放<code>get</code>返回的指针。</li><li>不使用<code>get</code>初始化或<code>reset</code>另一个智能指针。</li><li>使用<code>get</code>返回的指针时，如果最后一个对应的智能指针被销毁，指针就无效了。</li><li>使用<code>shared_ptr</code>管理并非<code>new</code>分配的资源时，应该传递删除函数。</li></ul><h3 id="unique-ptr（unique-ptr）"><a href="#unique-ptr（unique-ptr）" class="headerlink" title="unique_ptr（unique_ptr）"></a>unique_ptr（unique_ptr）</h3><p>与<code>shared_ptr</code>不同，同一时刻只能有一个<code>unique_ptr</code>指向给定的对象。当<code>unique_ptr</code>被销毁时，它指向的对象也会被销毁。</p><p><code>make_unique</code>函数（C++14新增，定义在头文件<em>memory</em>中）在动态内存中分配一个对象并初始化它，返回指向此对象的<code>unique_ptr</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unique_ptr&lt;int&gt; p1(new int(42));&#x2F;&#x2F; C++14unique_ptr&lt;int&gt; p2 &#x3D; make_unique&lt;int&gt;(42);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于<code>unique_ptr</code>独占其指向的对象，因此<code>unique_ptr</code>不支持普通的拷贝或赋值操作。</p><p><code>unique_ptr</code>操作：</p><p><img src="Images/12-4.png" alt="12-4"></p><p><code>release</code>函数返回<code>unique_ptr</code>当前保存的指针并将其置为空。</p><p><code>reset</code>函数成员接受一个可选的指针参数，重新设置<code>unique_ptr</code>保存的指针。如果<code>unique_ptr</code>不为空，则它原来指向的对象会被释放。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; transfers ownership from p1 (which points to the string Stegosaurus) to p2unique_ptr&lt;string&gt; p2(p1.release());    &#x2F;&#x2F; release makes p1 nullunique_ptr&lt;string&gt; p3(new string(&quot;Trex&quot;));&#x2F;&#x2F; transfers ownership from p3 to p2p2.reset(p3.release()); &#x2F;&#x2F; reset deletes the memory to which p2 had pointed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>release</code>会切断<code>unique_ptr</code>和它原来管理的对象之间的联系。<code>release</code>返回的指针通常被用来初始化另一个智能指针或给智能指针赋值。如果没有用另一个智能指针保存<code>release</code>返回的指针，程序就要负责资源的释放。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">p2.release();   &#x2F;&#x2F; WRONG: p2 won&#39;t free the memory and we&#39;ve lost the pointerauto p &#x3D; p2.release();   &#x2F;&#x2F; ok, but we must remember to delete(p)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能拷贝<code>unique_ptr</code>的规则有一个例外：可以拷贝或赋值一个即将被销毁的<code>unique_ptr</code>（移动构造、移动赋值）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unique_ptr&lt;int&gt; clone(int p)&#123;    unique_ptr&lt;int&gt; ret(new int (p));    &#x2F;&#x2F; . . .    return ret;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>老版本的标准库包含了一个名为<code>auto_ptr</code>的类，</p><p>类似<code>shared_ptr</code>，默认情况下<code>unique_ptr</code>用<code>delete</code>释放其指向的对象。<code>unique_ptr</code>的删除器同样可以重载，但<code>unique_ptr</code>管理删除器的方式与<code>shared_ptr</code>不同。定义<code>unique_ptr</code>时必须在尖括号中提供删除器类型。创建或<code>reset</code>这种<code>unique_ptr</code>类型的对象时，必须提供一个指定类型的可调用对象（删除器）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; p points to an object of type objT and uses an object of type delT to free that object&#x2F;&#x2F; it will call an object named fcn of type delTunique_ptr&lt;objT, delT&gt; p (new objT, fcn);void f(destination &amp;d &#x2F;* other needed parameters *&#x2F;)&#123;    connection c &#x3D; connect(&amp;d);  &#x2F;&#x2F; open the connection    &#x2F;&#x2F; when p is destroyed, the connection will be closed    unique_ptr&lt;connection, decltype(end_connection)*&gt; p(&amp;c, end_connection);    &#x2F;&#x2F; use the connection    &#x2F;&#x2F; when f exits, even if by an exception, the connection will be properly closed&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="weak-ptr（weak-ptr）"><a href="#weak-ptr（weak-ptr）" class="headerlink" title="weak_ptr（weak_ptr）"></a>weak_ptr（weak_ptr）</h3><p><code>weak_ptr</code>是一种不控制所指向对象生存期的智能指针，它指向一个由<code>shared_ptr</code>管理的对象。将<code>weak_ptr</code>绑定到<code>shared_ptr</code>不会改变<code>shared_ptr</code>的引用计数。如果<code>shared_ptr</code>被销毁，即使有<code>weak_ptr</code>指向对象，对象仍然有可能被释放。</p><p><img src="Images/12-5.png" alt="12-5"></p><p>创建一个<code>weak_ptr</code>时，需要使用<code>shared_ptr</code>来初始化它。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto p &#x3D; make_shared&lt;int&gt;(42);weak_ptr&lt;int&gt; wp(p);    &#x2F;&#x2F; wp weakly shares with p; use count in p is unchanged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>weak_ptr</code>访问对象时，必须先调用<code>lock</code>函数。该函数检查<code>weak_ptr</code>指向的对象是否仍然存在。如果存在，则返回指向共享对象的<code>shared_ptr</code>，否则返回空指针。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (shared_ptr&lt;int&gt; np &#x3D; wp.lock())&#123;    &#x2F;&#x2F; true if np is not null    &#x2F;&#x2F; inside the if, np shares its object with p&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态数组（Dynamic-Arrays）"><a href="#动态数组（Dynamic-Arrays）" class="headerlink" title="动态数组（Dynamic Arrays）"></a>动态数组（Dynamic Arrays）</h2><p>使用<code>allocator</code>类可以将内存分配和初始化过程分离，这通常会提供更好的性能和更灵活的内存管理能力。</p><h3 id="new和数组（new-and-Arrays）"><a href="#new和数组（new-and-Arrays）" class="headerlink" title="new和数组（new and Arrays）"></a>new和数组（new and Arrays）</h3><p>使用<code>new</code>分配对象数组时需要在类型名之后跟一对方括号，在其中指明要分配的对象数量（必须是整型，但不必是常量）。<code>new</code>返回指向第一个对象的指针（元素类型）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; call get_size to determine how many ints to allocateint *pia &#x3D; new int[get_size()];   &#x2F;&#x2F; pia points to the first of these ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于<code>new</code>分配的内存并不是数组类型，因此不能对动态数组调用<code>begin</code>和<code>end</code>，也不能用范围<code>for</code>语句处理其中的元素。</p><p>默认情况下，<code>new</code>分配的对象是默认初始化的。可以对数组中的元素进行值初始化，方法是在大小后面跟一对空括号<code>()</code>。在新标准中，还可以提供一个元素初始化器的花括号列表。如果初始化器数量大于元素数量，则<code>new</code>表达式失败，不会分配任何内存，并抛出<code>bad_array_new_length</code>异常。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int *pia &#x3D; new int[10];     &#x2F;&#x2F; block of ten uninitialized intsint *pia2 &#x3D; new int[10]();    &#x2F;&#x2F; block of ten ints value initialized to 0string *psa &#x3D; new string[10];    &#x2F;&#x2F; block of ten empty stringsstring *psa2 &#x3D; new string[10]();    &#x2F;&#x2F; block of ten empty strings&#x2F;&#x2F; block of ten ints each initialized from the corresponding initializerint *pia3 &#x3D; new int[10] &#123; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;&#x2F;&#x2F; block of ten strings; the first four are initialized from the given initializers&#x2F;&#x2F; remaining elements are value initializedstring *psa3 &#x3D; new string[10] &#123; &quot;a&quot;, &quot;an&quot;, &quot;the&quot;, string(3,&#39;x&#39;) &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然可以使用空括号对<code>new</code>分配的数组元素进行值初始化，但不能在括号中指定初始化器。这意味着不能用<code>auto</code>分配数组。</p><p>动态分配一个空数组是合法的，此时<code>new</code>会返回一个合法的非空指针。对于零长度的数组来说，该指针类似尾后指针，不能解引用。</p><p>使用<code>delete[]</code>释放动态数组。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">delete p;       &#x2F;&#x2F; p must point to a dynamically allocated object or be nulldelete [] pa;   &#x2F;&#x2F; pa must point to a dynamically allocated array or be null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在<code>delete</code>数组指针时忘记添加方括号，或者在<code>delete</code>单一对象时使用了方括号，编译器很可能不会给出任何警告，程序可能会在执行过程中行为异常。</p><p><code>unique_ptr</code>可以直接管理动态数组，定义时需要在对象类型后添加一对空方括号<code>[]</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; up points to an array of ten uninitialized intsunique_ptr&lt;int[]&gt; up(new int[10]);up.release();   &#x2F;&#x2F; automatically uses delete[] to destroy its pointer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指向数组的<code>unique_ptr</code>：</p><p><img src="Images/12-6.png" alt="12-6"></p><p>与<code>unique_ptr</code>不同，<code>shared_ptr</code>不直接支持动态数组管理。如果想用<code>shared_ptr</code>管理动态数组，必须提供自定义的删除器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; to use a shared_ptr we must supply a deletershared_ptr&lt;int&gt; sp(new int[10], [](int *p) &#123; delete[] p; &#125;);sp.reset();    &#x2F;&#x2F; uses the lambda we supplied that uses delete[] to free the array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>shared_ptr</code>未定义下标运算符，智能指针类型也不支持指针算术运算。因此如果想访问<code>shared_ptr</code>管理的数组元素，必须先用<code>get</code>获取内置指针，再用内置指针进行访问。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; shared_ptrs don&#39;t have subscript operator and don&#39;t support pointer arithmeticfor (size_t i &#x3D; 0; i !&#x3D; 10; ++i)    *(sp.get() + i) &#x3D; i;    &#x2F;&#x2F; use get to get a built-in pointer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="allocator类（The-allocator-Class）"><a href="#allocator类（The-allocator-Class）" class="headerlink" title="allocator类（The allocator Class）"></a>allocator类（The allocator Class）</h3><p><code>allocator</code>类是一个模板，定义时必须指定其可以分配的对象类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">allocator&lt;string&gt; alloc;    &#x2F;&#x2F; object that can allocate stringsauto const p &#x3D; alloc.allocate(n);   &#x2F;&#x2F; allocate n unconstructed strings<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>标准库<code>allocator</code>类及其算法：</p><p><img src="Images/12-7.png" alt="12-7"></p><p><code>allocator</code>分配的内存是未构造的，程序需要在此内存中构造对象。新标准库的<code>construct</code>函数接受一个指针和零或多个额外参数，在给定位置构造一个元素。额外参数用来初始化构造的对象，必须与对象类型相匹配。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto q &#x3D; p;     &#x2F;&#x2F; q will point to one past the last constructed elementalloc.construct(q++);    &#x2F;&#x2F; *q is the empty stringalloc.construct(q++, 10, &#39;c&#39;);  &#x2F;&#x2F; *q is ccccccccccalloc.construct(q++, &quot;hi&quot;);     &#x2F;&#x2F; *q is hi!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接使用<code>allocator</code>返回的未构造内存是错误行为，其结果是未定义的。</p><p>对象使用完后，必须对每个构造的元素调用<code>destroy</code>进行销毁。<code>destroy</code>函数接受一个指针，对指向的对象执行析构函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (q !&#x3D; p)    alloc.destroy(--q);  &#x2F;&#x2F; free the strings we actually allocated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>deallocate</code>函数用于释放<code>allocator</code>分配的内存空间。传递给<code>deallocate</code>的指针不能为空，它必须指向由<code>allocator</code>分配的内存。而且传递给<code>deallocate</code>的大小参数必须与调用<code>allocator</code>分配内存时提供的大小参数相一致。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">alloc.deallocate(p, n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>allocator</code>算法：</p><p><img src="Images/12-8.png" alt="12-8"></p><p>传递给<code>uninitialized_copy</code>的目的位置迭代器必须指向未构造的内存，它直接在给定位置构造元素。返回（递增后的）目的位置迭代器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-11-associative-containers/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-11-associative-containers/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第11章-关联容器"><a href="#第11章-关联容器" class="headerlink" title="第11章 关联容器"></a>第11章 关联容器</h1><p>关联容器支持高效的关键字查找和访问操作。2个主要的关联容器（associative-container）类型是<code>map</code>和<code>set</code>。</p><ul><li><code>map</code>中的元素是一些键值对（key-value）：关键字起索引作用，值表示与索引相关联的数据。</li><li><code>set</code>中每个元素只包含一个关键字，支持高效的关键字查询操作：检查一个给定关键字是否在<code>set</code>中。</li></ul><p>标准库提供了8个关联容器，它们之间的不同体现在三个方面：</p><ul><li>是<code>map</code>还是<code>set</code>类型。</li><li>是否允许保存重复的关键字。</li><li>是否按顺序保存元素。</li></ul><p>允许重复保存关键字的容器名字都包含单词<code>multi</code>；无序保存元素的容器名字都以单词<code>unordered</code>开头。</p><p><img src="Images/11-1.png" alt="11-1"></p><p><code>map</code>和<code>multimap</code>类型定义在头文件<em>map</em>中；<code>set</code>和<code>multiset</code>类型定义在头文件<em>set</em>中；无序容器定义在头文件<em>unordered_map</em>和<em>unordered_set</em>中。</p><h2 id="使用关联容器（Using-an-Associative-Container）"><a href="#使用关联容器（Using-an-Associative-Container）" class="headerlink" title="使用关联容器（Using an Associative Container）"></a>使用关联容器（Using an Associative Container）</h2><p><code>map</code>类型通常被称为关联数组（associative array）。</p><p>从<code>map</code>中提取一个元素时，会得到一个<code>pair</code>类型的对象。<code>pair</code>是一个模板类型，保存两个名为<code>first</code>和<code>second</code>的公有数据成员。<code>map</code>所使用的<code>pair</code>用<code>first</code>成员保存关键字，用<code>second</code>成员保存对应的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; count the number of times each word occurs in the inputmap&lt;string, size_t&gt; word_count;     &#x2F;&#x2F; empty map from string to size_tstring word;while (cin &gt;&gt; word)    ++word_count[word];     &#x2F;&#x2F; fetch and increment the counter for wordfor (const auto &amp;w : word_count)    &#x2F;&#x2F; for each element in the map    &#x2F;&#x2F; print the results    cout &lt;&lt; w.first &lt;&lt; &quot; occurs &quot; &lt;&lt; w.second        &lt;&lt; ((w.second &gt; 1) ? &quot; times&quot; : &quot; time&quot;) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>set</code>类型的<code>find</code>成员返回一个迭代器。如果给定关键字在<code>set</code>中，则迭代器指向该关键字，否则返回的是尾后迭代器。</p><h2 id="关联容器概述（Overview-of-the-Associative-Containers）"><a href="#关联容器概述（Overview-of-the-Associative-Containers）" class="headerlink" title="关联容器概述（Overview of the Associative Containers）"></a>关联容器概述（Overview of the Associative Containers）</h2><h3 id="定义关联容器（Defining-an-Associative-Container）"><a href="#定义关联容器（Defining-an-Associative-Container）" class="headerlink" title="定义关联容器（Defining an Associative Container）"></a>定义关联容器（Defining an Associative Container）</h3><p>定义<code>map</code>时，必须指定关键字类型和值类型；定义<code>set</code>时，只需指定关键字类型。</p><p>初始化<code>map</code>时，提供的每个键值对用花括号<code>&#123;&#125;</code>包围。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">map&lt;string, size_t&gt; word_count;   &#x2F;&#x2F; empty&#x2F;&#x2F; list initializationset&lt;string&gt; exclude &#x3D; &#123; &quot;the&quot;, &quot;but&quot;, &quot;and&quot; &#125;;&#x2F;&#x2F; three elements; authors maps last name to firstmap&lt;string, string&gt; authors &#x3D;&#123;    &#123;&quot;Joyce&quot;, &quot;James&quot;&#125;,    &#123;&quot;Austen&quot;, &quot;Jane&quot;&#125;,    &#123;&quot;Dickens&quot;, &quot;Charles&quot;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>map</code>和<code>set</code>中的关键字必须唯一，<code>multimap</code>和<code>multiset</code>没有此限制。</p><h3 id="关键字类型的要求（Requirements-on-Key-Type）"><a href="#关键字类型的要求（Requirements-on-Key-Type）" class="headerlink" title="关键字类型的要求（Requirements on Key Type）"></a>关键字类型的要求（Requirements on Key Type）</h3><p>对于有序容器——<code>map</code>、<code>multimap</code>、<code>set</code>和<code>multiset</code>，关键字类型必须定义元素比较的方法。默认情况下，标准库使用关键字类型的<code>&lt;</code>运算符来进行比较操作。</p><p>用来组织容器元素的操作的类型也是该容器类型的一部分。如果需要使用自定义的比较操作，则必须在定义关联容器类型时提供此操作的类型。操作类型在尖括号中紧跟着元素类型给出。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool compareIsbn(const Sales_data &amp;lhs, const Sales_data &amp;rhs)&#123;    return lhs.isbn() &lt; rhs.isbn();&#125;&#x2F;&#x2F; bookstore can have several transactions with the same ISBN&#x2F;&#x2F; elements in bookstore will be in ISBN ordermultiset&lt;Sales_data, decltype(compareIsbn)*&gt; bookstore(compareIsbn);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pair类型（The-pair-Type）"><a href="#pair类型（The-pair-Type）" class="headerlink" title="pair类型（The pair Type）"></a>pair类型（The pair Type）</h3><p><code>pair</code>定义在头文件<em>utility</em>中。一个<code>pair</code>可以保存两个数据成员，分别命名为<code>first</code>和<code>second</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pair&lt;string, string&gt; anon;        &#x2F;&#x2F; holds two stringspair&lt;string, size_t&gt; word_count;  &#x2F;&#x2F; holds a string and an size_tpair&lt;string, vector&lt;int&gt;&gt; line;   &#x2F;&#x2F; holds string and vector&lt;int&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>pair</code>的默认构造函数对数据成员进行值初始化。</p><p><code>pair</code>支持的操作：</p><p><img src="Images/11-2.png" alt="11-2"></p><p>在C++11中，如果函数需要返回<code>pair</code>，可以对返回值进行列表初始化。早期C++版本中必须显式构造返回值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pair&lt;string, int&gt; process(vector&lt;string&gt; &amp;v)&#123;    &#x2F;&#x2F; process v    if (!v.empty())        &#x2F;&#x2F; list initialize        return &#123; v.back(), v.back().size() &#125;;    else        &#x2F;&#x2F; explicitly constructed return value        return pair&lt;string, int&gt;();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关联容器操作（Operations-on-Associative-Containers）"><a href="#关联容器操作（Operations-on-Associative-Containers）" class="headerlink" title="关联容器操作（Operations on Associative Containers）"></a>关联容器操作（Operations on Associative Containers）</h2><p>关联容器定义了类型别名来表示容器关键字和值的类型：</p><p><img src="Images/11-3.png" alt="11-3"></p><p>对于<code>set</code>类型，<code>key_type</code>和<code>value_type</code>是一样的。<code>set</code>中保存的值就是关键字。对于<code>map</code>类型，元素是关键字-值对。即每个元素是一个<code>pair</code>对象，包含一个关键字和一个关联的值。由于元素关键字不能改变，因此<code>pair</code>的关键字部分是<code>const</code>的。另外，只有<code>map</code>类型（<code>unordered_map</code>、<code>unordered_multimap</code>、<code>multimap</code>、<code>map</code>）才定义了<code>mapped_type</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">set&lt;string&gt;::value_type v1;        &#x2F;&#x2F; v1 is a stringset&lt;string&gt;::key_type v2;          &#x2F;&#x2F; v2 is a stringmap&lt;string, int&gt;::value_type v3;   &#x2F;&#x2F; v3 is a pair&lt;const string, int&gt;map&lt;string, int&gt;::key_type v4;     &#x2F;&#x2F; v4 is a stringmap&lt;string, int&gt;::mapped_type v5;  &#x2F;&#x2F; v5 is an int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关联容器迭代器（Associative-Container-Iterators）"><a href="#关联容器迭代器（Associative-Container-Iterators）" class="headerlink" title="关联容器迭代器（Associative Container Iterators）"></a>关联容器迭代器（Associative Container Iterators）</h3><p>解引用关联容器迭代器时，会得到一个类型为容器的<code>value_type</code>的引用。对<code>map</code>而言，<code>value_type</code>是<code>pair</code>类型，其<code>first</code>成员保存<code>const</code>的关键字，<code>second</code>成员保存值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; get an iterator to an element in word_countauto map_it &#x3D; word_count.begin();&#x2F;&#x2F; *map_it is a reference to a pair&lt;const string, size_t&gt; objectcout &lt;&lt; map_it-&gt;first;          &#x2F;&#x2F; prints the key for this elementcout &lt;&lt; &quot; &quot; &lt;&lt; map_it-&gt;second;  &#x2F;&#x2F; prints the value of the elementmap_it-&gt;first &#x3D; &quot;new key&quot;;      &#x2F;&#x2F; error: key is const++map_it-&gt;second;               &#x2F;&#x2F; ok: we can change the value through an iterator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然<code>set</code>同时定义了<code>iterator</code>和<code>const_iterator</code>类型，但两种迭代器都只允许只读访问<code>set</code>中的元素。类似<code>map</code>，<code>set</code>中的关键字也是<code>const</code>的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">set&lt;int&gt; iset &#x3D; &#123;0,1,2,3,4,5,6,7,8,9&#125;;set&lt;int&gt;::iterator set_it &#x3D; iset.begin();if (set_it !&#x3D; iset.end())&#123;    *set_it &#x3D; 42;       &#x2F;&#x2F; error: keys in a set are read-only    cout &lt;&lt; *set_it &lt;&lt; endl;    &#x2F;&#x2F; ok: can read the key&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>map</code>和<code>set</code>都支持<code>begin</code>和<code>end</code>操作。使用迭代器遍历<code>map</code>、<code>multimap</code>、<code>set</code>或<code>multiset</code>时，迭代器按关键字升序遍历元素。</p><p>通常不对关联容器使用泛型算法。</p><h3 id="添加元素（Adding-Elements）"><a href="#添加元素（Adding-Elements）" class="headerlink" title="添加元素（Adding Elements）"></a>添加元素（Adding Elements）</h3><p>使用<code>insert</code>成员可以向关联容器中添加元素。向<code>map</code>和<code>set</code>中添加已存在的元素对容器没有影响。</p><p>通常情况下，对于想要添加到<code>map</code>中的数据，并没有现成的<code>pair</code>对象。可以直接在<code>insert</code>的参数列表中创建<code>pair</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; four ways to add word to word_countword_count.insert(&#123;word, 1&#125;);word_count.insert(make_pair(word, 1));word_count.insert(pair&lt;string, size_t&gt;(word, 1));word_count.insert(map&lt;string, size_t&gt;::value_type(word, 1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关联容器的<code>insert</code>操作：</p><p><img src="Images/11-4.png" alt="11-4"></p><p><code>insert</code>或<code>emplace</code>的返回值依赖于容器类型和参数：</p><ul><li>对于不包含重复关键字的容器，添加单一元素的<code>insert</code>和<code>emplace</code>版本返回一个<code>pair</code>，表示操作是否成功。<code>pair</code>的<code>first</code>成员是一个迭代器，指向具有给定关键字的元素；<code>second</code>成员是一个<code>bool</code>值。如果关键字已在容器中，则<code>insert</code>直接返回，<code>bool</code>值为<code>false</code>。如果关键字不存在，元素会被添加至容器中，<code>bool</code>值为<code>true</code>。</li><li>对于允许包含重复关键字的容器，添加单一元素的<code>insert</code>和<code>emplace</code>版本返回指向新元素的迭代器。</li></ul><h3 id="删除元素（Erasing-Elements）"><a href="#删除元素（Erasing-Elements）" class="headerlink" title="删除元素（Erasing Elements）"></a>删除元素（Erasing Elements）</h3><p>关联容器的删除操作：</p><p><img src="Images/11-5.png" alt="11-5"></p><p>与顺序容器不同，关联容器提供了一个额外的<code>erase</code>操作。它接受一个<code>key_type</code>参数，删除所有匹配给定关键字的元素（如果存在），返回实际删除的元素数量。对于不包含重复关键字的容器，<code>erase</code>的返回值总是1或0。若返回值为0，则表示想要删除的元素并不在容器中。</p><h3 id="map的下标操作（Subscripting-a-map）"><a href="#map的下标操作（Subscripting-a-map）" class="headerlink" title="map的下标操作（Subscripting a map）"></a>map的下标操作（Subscripting a map）</h3><p><code>map</code>下标运算符接受一个关键字，获取与此关键字相关联的值。如果关键字不在容器中，下标运算符会向容器中添加该关键字，并值初始化关联值。</p><p>由于下标运算符可能向容器中添加元素，所以只能对非<code>const</code>的<code>map</code>使用下标操作。</p><p><code>map</code>和<code>unordered_map</code>的下标操作：</p><p><img src="Images/11-6.png" alt="11-6"></p><p>对<code>map</code>进行下标操作时，返回的是<code>mapped_type</code>类型的对象；解引用<code>map</code>迭代器时，返回的是<code>value_type</code>类型的对象。</p><h3 id="访问元素（Accessing-Elements）"><a href="#访问元素（Accessing-Elements）" class="headerlink" title="访问元素（Accessing Elements）"></a>访问元素（Accessing Elements）</h3><p>关联容器的查找操作：</p><p><img src="Images/11-7.png" alt="11-7"></p><p>如果<code>multimap</code>或<code>multiset</code>中有多个元素具有相同关键字，则这些元素在容器中会相邻存储。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">multimap&lt;string, string&gt; authors;&#x2F;&#x2F; adds the first element with the key Barth, Johnauthors.insert(&#123;&quot;Barth, John&quot;, &quot;Sot-Weed Factor&quot;&#125;);&#x2F;&#x2F; ok: adds the second element with the key Barth, Johnauthors.insert(&#123;&quot;Barth, John&quot;, &quot;Lost in the Funhouse&quot;&#125;);string search_item(&quot;Alain de Botton&quot;);      &#x2F;&#x2F; author we&#39;ll look forauto entries &#x3D; authors.count(search_item);  &#x2F;&#x2F; number of elementsauto iter &#x3D; authors.find(search_item);      &#x2F;&#x2F; first entry for this author&#x2F;&#x2F; loop through the number of entries there are for this authorwhile(entries)&#123;    cout &lt;&lt; iter-&gt;second &lt;&lt; endl;   &#x2F;&#x2F; print each title    ++iter;      &#x2F;&#x2F; advance to the next title    --entries;   &#x2F;&#x2F; keep track of how many we&#39;ve printed&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lower_bound</code>和<code>upper_bound</code>操作都接受一个关键字，返回一个迭代器。如果关键字在容器中，<code>lower_bound</code>返回的迭代器会指向第一个匹配给定关键字的元素，而<code>upper_bound</code>返回的迭代器则指向最后一个匹配元素之后的位置。如果关键字不在<code>multimap</code>中，则<code>lower_bound</code>和<code>upper_bound</code>会返回相等的迭代器，指向一个不影响排序的关键字插入位置。因此用相同的关键字调用<code>lower_bound</code>和<code>upper_bound</code>会得到一个迭代器范围，表示所有具有该关键字的元素范围。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; definitions of authors and search_item as above&#x2F;&#x2F; beg and end denote the range of elements for this authorfor (auto beg &#x3D; authors.lower_bound(search_item),        end &#x3D; authors.upper_bound(search_item);    beg !&#x3D; end; ++beg)    cout &lt;&lt; beg-&gt;second &lt;&lt; endl;    &#x2F;&#x2F; print each title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lower_bound</code>和<code>upper_bound</code>有可能返回尾后迭代器。如果查找的元素具有容器中最大的关键字，则<code>upper_bound</code>返回尾后迭代器。如果关键字不存在，且大于容器中任何关键字，则<code>lower_bound</code>也返回尾后迭代器。</p><p><code>equal_range</code>操作接受一个关键字，返回一个迭代器<code>pair</code>。若关键字存在，则第一个迭代器指向第一个匹配关键字的元素，第二个迭代器指向最后一个匹配元素之后的位置。若关键字不存在，则两个迭代器都指向一个不影响排序的关键字插入位置。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; definitions of authors and search_item as above&#x2F;&#x2F; pos holds iterators that denote the range of elements for this keyfor (auto pos &#x3D; authors.equal_range(search_item);        pos.first !&#x3D; pos.second; ++pos.first)    cout &lt;&lt; pos.first-&gt;second &lt;&lt; endl;  &#x2F;&#x2F; print each title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无序容器（The-Unordered-Containers）"><a href="#无序容器（The-Unordered-Containers）" class="headerlink" title="无序容器（The Unordered Containers）"></a>无序容器（The Unordered Containers）</h2><p>新标准库定义了4个无序关联容器（unordered associative container），这些容器使用哈希函数（hash function）和关键字类型的<code>==</code>运算符组织元素。</p><p>无序容器和对应的有序容器通常可以相互替换。但是由于元素未按顺序存储，使用无序容器的程序输出一般会与有序容器的版本不同。</p><p>无序容器在存储上组织为一组桶，每个桶保存零或多个元素。无序容器使用一个哈希函数将元素映射到桶。为了访问一个元素，容器首先计算元素的哈希值，它指出应该搜索哪个桶。容器将具有一个特定哈希值的所有元素都保存在相同的桶中。因此无序容器的性能依赖于哈希函数的质量和桶的数量及大小。</p><p>无序容器管理操作：</p><p><img src="Images/11-8.png" alt="11-8"></p><p>默认情况下，无序容器使用关键字类型的<code>==</code>运算符比较元素，还使用一个<code>hash&lt;key_type&gt;</code>类型的对象来生成每个元素的哈希值。标准库为内置类型和一些标准库类型提供了hash模板。因此可以直接定义关键字是这些类型的无序容器，而不能直接定义关键字类型为自定义类类型的无序容器，必须先提供对应的hash模板版本。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-10-generic-algorithms/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-10-generic-algorithms/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第10章-泛型算法"><a href="#第10章-泛型算法" class="headerlink" title="第10章 泛型算法"></a>第10章 泛型算法</h1><h2 id="概述（Overview）"><a href="#概述（Overview）" class="headerlink" title="概述（Overview）"></a>概述（Overview）</h2><p>大多数算法都定义在头文件<em>algorithm</em>中，此外标准库还在头文件<em>numeric</em>中定义了一组数值泛型算法。一般情况下，这些算法并不直接操作容器，而是遍历由两个迭代器指定的元素范围进行操作。</p><p><code>find</code>函数将范围中的每个元素与给定值进行比较，返回指向第一个等于给定值的元素的迭代器。如果无匹配元素，则返回其第二个参数来表示搜索失败。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int val &#x3D; 42;   &#x2F;&#x2F; value we&#39;ll look for&#x2F;&#x2F; result will denote the element we want if it&#39;s in vec, or vec.cend() if notauto result &#x3D; find(vec.cbegin(), vec.cend(), val);&#x2F;&#x2F; report the resultcout &lt;&lt; &quot;The value &quot; &lt;&lt; val    &lt;&lt; (result &#x3D;&#x3D; vec.cend() ? &quot; is not present&quot; : &quot; is present&quot;) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器参数令算法不依赖于特定容器，但依赖于元素类型操作。</p><p>泛型算法本身不会执行容器操作，它们只会运行于迭代器之上，执行迭代器操作。算法可能改变容器中元素的值，或者在容器内移动元素，但不会改变底层容器的大小（当算法操作插入迭代器时，迭代器可以向容器中添加元素，但算法自身不会进行这种操作）。</p><h2 id="初识泛型算法（A-First-Look-at-the-Algorithms）"><a href="#初识泛型算法（A-First-Look-at-the-Algorithms）" class="headerlink" title="初识泛型算法（A First Look at the Algorithms）"></a>初识泛型算法（A First Look at the Algorithms）</h2><h3 id="只读算法（Read-Only-Algorithms）"><a href="#只读算法（Read-Only-Algorithms）" class="headerlink" title="只读算法（Read-Only Algorithms）"></a>只读算法（Read-Only Algorithms）</h3><p><code>accumulate</code>函数（定义在头文件<em>numeric</em>中）用于计算一个序列的和。它接受三个参数，前两个参数指定需要求和的元素范围，第三个参数是和的初值（决定加法运算类型和返回值类型）。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; sum the elements in vec starting the summation with the value 0int sum &#x3D; accumulate(vec.cbegin(), vec.cend(), 0);string sum &#x3D; accumulate(v.cbegin(), v.cend(), string(&quot;&quot;));&#x2F;&#x2F; error: no + on const char*string sum &#x3D; accumulate(v.cbegin(), v.cend(), &quot;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议在只读算法中使用<code>cbegin</code>和<code>cend</code>函数。</p><p><code>equal</code>函数用于确定两个序列是否保存相同的值。它接受三个迭代器参数，前两个参数指定第一个序列范围，第三个参数指定第二个序列的首元素。<code>equal</code>函数假定第二个序列至少与第一个序列一样长。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; roster2 should have at least as many elements as roster1equal(roster1.cbegin(), roster1.cend(), roster2.cbegin());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只接受单一迭代器表示第二个操作序列的算法都假定第二个序列至少与第一个序列一样长。</p><h3 id="写容器元素的算法（Algorithms-That-Write-Container-Elements）"><a href="#写容器元素的算法（Algorithms-That-Write-Container-Elements）" class="headerlink" title="写容器元素的算法（Algorithms That Write Container Elements）"></a>写容器元素的算法（Algorithms That Write Container Elements）</h3><p><code>fill</code>函数接受两个迭代器参数表示序列范围，还接受一个值作为第三个参数，它将给定值赋予范围内的每个元素。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; reset each element to 0fill(vec.begin(), vec.end(), 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>fill_n</code>函数接受单个迭代器参数、一个计数值和一个值，它将给定值赋予迭代器指向位置开始的指定个元素。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; reset all the elements of vec to 0fill_n(vec.begin(), vec.size(), 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向目的位置迭代器写入数据的算法都假定目的位置足够大，能容纳要写入的元素。</p><p>插入迭代器（insert iterator）是一种向容器内添加元素的迭代器。通过插入迭代器赋值时，一个与赋值号右侧值相等的元素会被添加到容器中。</p><p><code>back_inserter</code>函数（定义在头文件<em>iterator</em>中）接受一个指向容器的引用，返回与该容器绑定的插入迭代器。通过此迭代器赋值时，赋值运算符会调用<code>push_back</code>将一个具有给定值的元素添加到容器中。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; vec;    &#x2F;&#x2F; empty vectorauto it &#x3D; back_inserter(vec);   &#x2F;&#x2F; assigning through it adds elements to vec*it &#x3D; 42;   &#x2F;&#x2F; vec now has one element with value 42&#x2F;&#x2F; ok: back_inserter creates an insert iterator that adds elements to vecfill_n(back_inserter(vec), 10, 0);  &#x2F;&#x2F; appends ten elements to vec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>copy</code>函数接受三个迭代器参数，前两个参数指定输入序列，第三个参数指定目的序列的起始位置。它将输入序列中的元素拷贝到目的序列中，返回目的位置迭代器（递增后）的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a1[] &#x3D; &#123; 0,1,2,3,4,5,6,7,8,9 &#125;;int a2[sizeof(a1) &#x2F; sizeof(*a1)];     &#x2F;&#x2F; a2 has the same size as a1&#x2F;&#x2F; ret points just past the last element copied into a2auto ret &#x3D; copy(begin(a1), end(a1), a2);    &#x2F;&#x2F; copy a1 into a2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>replace</code>函数接受四个参数，前两个迭代器参数指定输入序列，后两个参数指定要搜索的值和替换值。它将序列中所有等于第一个值的元素都替换为第二个值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; replace any element with the value 0 with 42replace(ilst.begin(), ilst.end(), 0, 42);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相对于<code>replace</code>，<code>replace_copy</code>函数可以保留原序列不变。它接受第三个迭代器参数，指定调整后序列的保存位置。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; use back_inserter to grow destination as neededreplace_copy(ilst.cbegin(), ilst.cend(), back_inserter(ivec), 0, 42);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>很多算法都提供“copy”版本，这些版本不会将新元素放回输入序列，而是创建一个新序列保存结果。</p><h3 id="重排容器元素的算法（Algorithms-That-Reorder-Container-Elements）"><a href="#重排容器元素的算法（Algorithms-That-Reorder-Container-Elements）" class="headerlink" title="重排容器元素的算法（Algorithms That Reorder Container Elements）"></a>重排容器元素的算法（Algorithms That Reorder Container Elements）</h3><p><code>sort</code>函数接受两个迭代器参数，指定排序范围。它利用元素类型的<code>&lt;</code>运算符重新排列元素。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void elimDups(vector&lt;string&gt; &amp;words)&#123;    &#x2F;&#x2F; sort words alphabetically so we can find the duplicates    sort(words.begin(), words.end());    &#x2F;&#x2F; unique reorders the input range so that each word appears once in the    &#x2F;&#x2F; front portion of the range and returns an iterator one past the unique range    auto end_unique &#x3D; unique(words.begin(), words.end());    &#x2F;&#x2F; erase uses a vector operation to remove the nonunique elements    words.erase(end_unique, words.end());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unique</code>函数重排输入序列，消除相邻的重复项，返回指向不重复值范围末尾的迭代器。</p><p><img src="Images/10-1.png" alt="10-1"></p><h2 id="定制操作（Customizing-Operations）"><a href="#定制操作（Customizing-Operations）" class="headerlink" title="定制操作（Customizing Operations）"></a>定制操作（Customizing Operations）</h2><p>默认情况下，很多比较算法使用元素类型的<code>&lt;</code>或<code>==</code>运算符完成操作。可以为这些算法提供自定义操作来代替默认运算符。</p><h3 id="向算法传递函数（Passing-a-Function-to-an-Algorithm）"><a href="#向算法传递函数（Passing-a-Function-to-an-Algorithm）" class="headerlink" title="向算法传递函数（Passing a Function to an Algorithm）"></a>向算法传递函数（Passing a Function to an Algorithm）</h3><p>谓词（predicate）是一个可调用的表达式，其返回结果是一个能用作条件的值。标准库算法使用的谓词分为一元谓词（unary predicate，接受一个参数）和二元谓词（binary predicate，接受两个参数）。接受谓词参数的算法会对输入序列中的元素调用谓词，因此元素类型必须能转换为谓词的参数类型。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; comparison function to be used to sort by word lengthbool isShorter(const string &amp;s1, const string &amp;s2)&#123;    return s1.size() &lt; s2.size();&#125;&#x2F;&#x2F; sort on word length, shortest to longestsort(words.begin(), words.end(), isShorter);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稳定排序函数<code>stable_sort</code>可以维持输入序列中相等元素的原有顺序。</p><h3 id="lambda表达式（Lambda-Expressions）"><a href="#lambda表达式（Lambda-Expressions）" class="headerlink" title="lambda表达式（Lambda Expressions）"></a>lambda表达式（Lambda Expressions）</h3><p><code>find_if</code>函数接受两个迭代器参数和一个谓词参数。迭代器参数用于指定序列范围，之后对序列中的每个元素调用给定谓词，并返回第一个使谓词返回非0值的元素。如果不存在，则返回尾迭代器。</p><p>对于一个对象或表达式，如果可以对其使用调用运算符<code>()</code>，则称它为可调用对象（callable object）。可以向算法传递任何类别的可调用对象。</p><p>一个<code>lambda</code>表达式表示一个可调用的代码单元，类似未命名的内联函数，但可以定义在函数内部。其形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">[capture list] (parameter list) -&gt; return type &#123; function body &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<em>capture list</em>（捕获列表）是一个由<code>lambda</code>所在函数定义的局部变量的列表（通常为空）。<em>return type</em>、<em>parameter list</em>和<em>function body</em>与普通函数一样，分别表示返回类型、参数列表和函数体。但与普通函数不同，<code>lambda</code>必须使用尾置返回类型，且不能有默认实参。</p><p>定义<code>lambda</code>时可以省略参数列表和返回类型，但必须包含捕获列表和函数体。省略参数列表等价于指定空参数列表。省略返回类型时，若函数体只是一个<code>return</code>语句，则返回类型由返回表达式的类型推断而来。否则返回类型为<code>void</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto f &#x3D; [] &#123; return 42; &#125;;cout &lt;&lt; f() &lt;&lt; endl;    &#x2F;&#x2F; prints 42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>lambda</code>可以使用其所在函数的局部变量，但必须先将其包含在捕获列表中。捕获列表只能用于局部非<code>static</code>变量，<code>lambda</code>可以直接使用局部<code>static</code>变量和其所在函数之外声明的名字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; get an iterator to the first element whose size() is &gt;&#x3D; szauto wc &#x3D; find_if(words.begin(), words.end(),                    [sz](const string &amp;a) &#123; return a.size() &gt;&#x3D; sz; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>for_each</code>函数接受一个输入序列和一个可调用对象，它对输入序列中的每个元素调用此对象。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; print words of the given size or longer, each one followed by a spacefor_each(wc, words.end(),            [] (const string &amp;s) &#123; cout &lt;&lt; s &lt;&lt; &quot; &quot;; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="lambda捕获和返回（Lambda-Captures-and-Returns）"><a href="#lambda捕获和返回（Lambda-Captures-and-Returns）" class="headerlink" title="lambda捕获和返回（Lambda Captures and Returns）"></a>lambda捕获和返回（Lambda Captures and Returns）</h3><p>被<code>lambda</code>捕获的变量的值是在<code>lambda</code>创建时拷贝，而不是调用时拷贝。在<code>lambda</code>创建后修改局部变量不会影响<code>lambda</code>内对应的值。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size_t v1 &#x3D; 42; &#x2F;&#x2F; local variable&#x2F;&#x2F; copies v1 into the callable object named fauto f &#x3D; [v1] &#123; return v1; &#125;;v1 &#x3D; 0;auto j &#x3D; f();   &#x2F;&#x2F; j is 42; f stored a copy of v1 when we created it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lambda</code>可以以引用方式捕获变量，但必须保证<code>lambda</code>执行时变量存在。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size_t v1 &#x3D; 42; &#x2F;&#x2F; local variable&#x2F;&#x2F; the object f2 contains a reference to v1auto f2 &#x3D; [&amp;v1] &#123; return v1; &#125;;v1 &#x3D; 0;auto j &#x3D; f2();  &#x2F;&#x2F; j is 0; f2 refers to v1; it doesn&#39;t store it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以让编译器根据<code>lambda</code>代码隐式捕获函数变量，方法是在捕获列表中写一个<code>&amp;</code>或<code>=</code>符号。<code>&amp;</code>为引用捕获，<code>=</code>为值捕获。</p><p>可以混合使用显式捕获和隐式捕获。混合使用时，捕获列表中的第一个元素必须是<code>&amp;</code>或<code>=</code>符号，用于指定默认捕获方式。显式捕获的变量必须使用与隐式捕获不同的方式。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; os implicitly captured by reference; c explicitly captured by valuefor_each(words.begin(), words.end(),            [&amp;, c] (const string &amp;s) &#123; os &lt;&lt; s &lt;&lt; c; &#125;);&#x2F;&#x2F; os explicitly captured by reference; c implicitly captured by valuefor_each(words.begin(), words.end(),            [&#x3D;, &amp;os] (const string &amp;s) &#123; os &lt;&lt; s &lt;&lt; c; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lambda</code>捕获列表形式：</p><p><img src="Images/10-2.png" alt="10-2"></p><p>默认情况下，对于值方式捕获的变量，<code>lambda</code>不能修改其值。如果希望修改，就必须在参数列表后添加关键字<code>mutable</code>。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size_t v1 &#x3D; 42; &#x2F;&#x2F; local variable&#x2F;&#x2F; f can change the value of the variables it capturesauto f &#x3D; [v1] () mutable &#123; return ++v1; &#125;;v1 &#x3D; 0;auto j &#x3D; f();   &#x2F;&#x2F; j is 43<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于引用方式捕获的变量，<code>lambda</code>是否可以修改依赖于此引用指向的是否是<code>const</code>类型。</p><p><code>transform</code>函数接受三个迭代器参数和一个可调用对象。前两个迭代器参数指定输入序列，第三个迭代器参数表示目的位置。它对输入序列中的每个元素调用可调用对象，并将结果写入目的位置。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">transform(vi.begin(), vi.end(), vi.begin(),            [](int i) -&gt; int &#123; if (i &lt; 0) return -i; else return i; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为<code>lambda</code>定义返回类型时，必须使用尾置返回类型。</p><h3 id="参数绑定（Binding-Arguments）"><a href="#参数绑定（Binding-Arguments）" class="headerlink" title="参数绑定（Binding Arguments）"></a>参数绑定（Binding Arguments）</h3><p><code>bind</code>函数定义在头文件<em>functional</em>中，相当于一个函数适配器，它接受一个可调用对象，生成一个新的可调用对象来适配原对象的参数列表。一般形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto newCallable &#x3D; bind(callable, arg_list);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<em>newCallable</em>本身是一个可调用对象，<em>arg_list</em>是一个以逗号分隔的参数列表，对应给定的<em>callable</em>的参数。之后调用<em>newCallable</em>时，<em>newCallable</em>会再调用<em>callable</em>，并传递给它<em>arg_list</em>中的参数。<em>arg_list</em>中可能包含形如<code>_n</code>的名字，其中<em>n</em>是一个整数。这些参数是占位符，表示<em>newCallable</em>的参数，它们占据了传递给<em>newCallable</em>的参数的位置。数值<em>n</em>表示生成的可调用对象中参数的位置：<code>_1</code>为<em>newCallable</em>的第一个参数，<code>_2</code>为<em>newCallable</em>的第二个参数，依次类推。这些名字都定义在命名空间<em>placeholders</em>中，它又定义在命名空间<em>std</em>中，因此使用时应该进行双重限定。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using std::placeholders::_1;using namespace std::placeholders;bool check_size(const string &amp;s, string::size_type sz);&#x2F;&#x2F; check6 is a callable object that takes one argument of type string&#x2F;&#x2F; and calls check_size on its given string and the value 6auto check6 &#x3D; bind(check_size, _1, 6);string s &#x3D; &quot;hello&quot;;bool b1 &#x3D; check6(s);    &#x2F;&#x2F; check6(s) calls check_size(s, 6)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>bind</code>函数可以调整给定可调用对象中的参数顺序。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; sort on word length, shortest to longestsort(words.begin(), words.end(), isShorter);&#x2F;&#x2F; sort on word length, longest to shortestsort(words.begin(), words.end(), bind(isShorter, _2, _1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，<code>bind</code>函数的非占位符参数被拷贝到<code>bind</code>返回的可调用对象中。但有些类型不支持拷贝操作。</p><p>如果希望传递给<code>bind</code>一个对象而又不拷贝它，则必须使用标准库的<code>ref</code>函数。<code>ref</code>函数返回一个对象，包含给定的引用，此对象是可以拷贝的。<code>cref</code>函数生成保存<code>const</code>引用的类。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ostream &amp;print(ostream &amp;os, const string &amp;s, char c);for_each(words.begin(), words.end(), bind(print, ref(os), _1, &#39; &#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="再探迭代器（Revisiting-Iterators）"><a href="#再探迭代器（Revisiting-Iterators）" class="headerlink" title="再探迭代器（Revisiting Iterators）"></a>再探迭代器（Revisiting Iterators）</h2><p>除了为每种容器定义的迭代器之外，标准库还在头文件<em>iterator</em>中定义了另外几种迭代器。</p><ul><li>插入迭代器（insert iterator）：该类型迭代器被绑定到容器对象上，可用来向容器中插入元素。</li><li>流迭代器（stream iterator）：该类型迭代器被绑定到输入或输出流上，可用来遍历所关联的IO流。</li><li>反向迭代器（reverse iterator）：该类型迭代器向后而不是向前移动。除了<code>forward_list</code>之外的标准库容器都有反向迭代器。</li><li>移动迭代器（move iterator）：该类型迭代器用来移动容器元素。</li></ul><h3 id="插入迭代器（Insert-Iterators）"><a href="#插入迭代器（Insert-Iterators）" class="headerlink" title="插入迭代器（Insert Iterators）"></a>插入迭代器（Insert Iterators）</h3><p>插入器是一种迭代器适配器，它接受一个容器参数，生成一个插入迭代器。通过插入迭代器赋值时，该迭代器调用容器操作向给定容器的指定位置插入一个元素。</p><p>插入迭代器操作：</p><p><img src="Images/10-3.png" alt="10-3"></p><p>插入器有三种类型，区别在于元素插入的位置：</p><ul><li><code>back_inserter</code>：创建一个调用<code>push_back</code>操作的迭代器。</li><li><code>front_inserter</code>：创建一个调用<code>push_front</code>操作的迭代器。</li><li><code>inserter</code>：创建一个调用<code>insert</code>操作的迭代器。此函数接受第二个参数，该参数必须是一个指向给定容器的迭代器，元素会被插入到该参数指向的元素之前。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">list&lt;int&gt; lst &#x3D; &#123; 1,2,3,4 &#125;;list&lt;int&gt; lst2, lst3;   &#x2F;&#x2F; empty lists&#x2F;&#x2F; after copy completes, lst2 contains 4 3 2 1copy(lst.cbegin(), lst.cend(), front_inserter(lst2));&#x2F;&#x2F; after copy completes, lst3 contains 1 2 3 4copy(lst.cbegin(), lst.cend(), inserter(lst3, lst3.begin()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iostream迭代器（iostream-Iterators）"><a href="#iostream迭代器（iostream-Iterators）" class="headerlink" title="iostream迭代器（iostream Iterators）"></a>iostream迭代器（iostream Iterators）</h3><p><code>istream_iterator</code>从输入流读取数据，<code>ostream_iterator</code>向输出流写入数据。这些迭代器将流当作特定类型的元素序列处理。</p><p>创建流迭代器时，必须指定迭代器读写的对象类型。<code>istream_iterator</code>使用<code>&gt;&gt;</code>来读取流，因此<code>istream_iterator</code>要读取的类型必须定义了<code>&gt;&gt;</code>运算符。创建<code>istream_iterator</code>时，可以将其绑定到一个流。如果默认初始化，则创建的是尾后迭代器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">istream_iterator&lt;int&gt; int_it(cin);  &#x2F;&#x2F; reads ints from cinistream_iterator&lt;int&gt; int_eof;      &#x2F;&#x2F; end iterator valueifstream in(&quot;afile&quot;);istream_iterator&lt;string&gt; str_it(in);   &#x2F;&#x2F; reads strings from &quot;afile&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于一个绑定到流的迭代器，一旦其关联的流遇到文件尾或IO错误，迭代器的值就与尾后迭代器相等。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">istream_iterator&lt;int&gt; in_iter(cin);     &#x2F;&#x2F; read ints from cinistream_iterator&lt;int&gt; eof;      &#x2F;&#x2F; istream &#39;&#39;end&#39;&#39; iteratorwhile (in_iter !&#x3D; eof)      &#x2F;&#x2F; while there&#39;s valid input to read    &#x2F;&#x2F; postfix increment reads the stream and returns the old value of the iterator    &#x2F;&#x2F; we dereference that iterator to get the previous value read from the stream    vec.push_back(*in_iter++);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接使用流迭代器构造容器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">istream_iterator&lt;int&gt; in_iter(cin), eof;    &#x2F;&#x2F; read ints from cinvector&lt;int&gt; vec(in_iter, eof);      &#x2F;&#x2F; construct vec from an iterator range<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>istream_iterator</code>操作：</p><p><img src="Images/10-4.png" alt="10-4"></p><p>将<code>istream_iterator</code>绑定到一个流时，标准库并不保证迭代器立即从流读取数据。但可以保证在第一次解引用迭代器之前，从流中读取数据的操作已经完成了。</p><p>定义<code>ostream_iterator</code>对象时，必须将其绑定到一个指定的流。不允许定义空的或者表示尾后位置的<code>ostream_iterator</code>。</p><p><code>ostream_iterator</code>操作：</p><p><img src="Images/10-5.png" alt="10-5"></p><p><code>*</code>和<code>++</code>运算符实际上不会对<code>ostream_iterator</code>对象做任何操作。但是建议代码写法与其他迭代器保持一致。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ostream_iterator&lt;int&gt; out_iter(cout, &quot; &quot;);for (auto e : vec)    *out_iter++ &#x3D; e;    &#x2F;&#x2F; the assignment writes this element to coutcout &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以为任何定义了<code>&lt;&lt;</code>运算符的类型创建<code>istream_iterator</code>对象，为定义了<code>&gt;&gt;</code>运算符的类型创建<code>ostream_iterator</code>对象。</p><h3 id="反向迭代器（Reverse-Iterators）"><a href="#反向迭代器（Reverse-Iterators）" class="headerlink" title="反向迭代器（Reverse Iterators）"></a>反向迭代器（Reverse Iterators）</h3><p>递增反向迭代器会移动到前一个元素，递减会移动到后一个元素。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sort(vec.begin(), vec.end());   &#x2F;&#x2F; sorts vec in &quot;normal&quot; order&#x2F;&#x2F; sorts in reverse: puts the smallest element at the end of vecsort(vec.rbegin(), vec.rend());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="Images/10-6.png" alt="10-6"></p><p>不能从<code>forward_list</code>或流迭代器创建反向迭代器。</p><p>调用反向迭代器的<code>base</code>函数可以获得其对应的普通迭代器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; find the last element in a comma-separated listauto rcomma &#x3D; find(line.crbegin(), line.crend(), &#39;,&#39;);&#x2F;&#x2F; WRONG: will generate the word in reverse ordercout &lt;&lt; string(line.crbegin(), rcomma) &lt;&lt; endl;&#x2F;&#x2F; ok: get a forward iterator and read to the end of linecout &lt;&lt; string(rcomma.base(), line.cend()) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Images/10-7.png" alt="10-7"></p><p>反向迭代器的目的是表示元素范围，而这些范围是不对称的。用普通迭代器初始化反向迭代器，或者给反向迭代器赋值时，结果迭代器与原迭代器指向的并不是相同元素。</p><h2 id="泛型算法结构（Structure-of-Generic-Algorithms）"><a href="#泛型算法结构（Structure-of-Generic-Algorithms）" class="headerlink" title="泛型算法结构（Structure of Generic Algorithms）"></a>泛型算法结构（Structure of Generic Algorithms）</h2><p>算法要求的迭代器操作可以分为5个迭代器类别（iterator category）：</p><p><img src="Images/10-8.png" alt="10-8"></p><h3 id="5类迭代器（The-Five-Iterator-Categories）"><a href="#5类迭代器（The-Five-Iterator-Categories）" class="headerlink" title="5类迭代器（The Five Iterator Categories）"></a>5类迭代器（The Five Iterator Categories）</h3><p>C++标准指定了泛型和数值算法的每个迭代器参数的最小类别。对于迭代器实参来说，其能力必须大于或等于规定的最小类别。向算法传递更低级的迭代器参数会产生错误（大部分编译器不会提示错误）。</p><p>迭代器类别：</p><ul><li><p>输入迭代器（input iterator）：可以读取序列中的元素，只能用于单遍扫描算法。必须支持以下操作：</p></li><li><ul><li>用于比较两个迭代器相等性的相等<code>==</code>和不等运算符<code>!=</code>。</li><li>用于推进迭代器位置的前置和后置递增运算符<code>++</code>。</li><li>用于读取元素的解引用运算符<code>*</code>；解引用只能出现在赋值运算符右侧。</li><li>用于读取元素的箭头运算符<code>-&gt;</code>。</li></ul></li><li><p>输出迭代器（output iterator）：可以读写序列中的元素，只能用于单遍扫描算法，通常指向目的位置。必须支持以下操作：</p></li><li><ul><li>用于推进迭代器位置的前置和后置递增运算符<code>++</code>。</li><li>用于读取元素的解引用运算符<code>*</code>；解引用只能出现在赋值运算符左侧（向已经解引用的输出迭代器赋值，等价于将值写入其指向的元素）。</li></ul></li><li><p>前向迭代器（forward iterator）：可以读写序列中的元素。只能在序列中沿一个方向移动。支持所有输入和输出迭代器的操作，而且可以多次读写同一个元素。因此可以使用前向迭代器对序列进行多遍扫描。</p></li><li><p>双向迭代器（bidirectional iterator）：可以正向/反向读写序列中的元素。除了支持所有前向迭代器的操作之外，还支持前置和后置递减运算符<code>--</code>。除<code>forward_list</code>之外的其他标准库容器都提供符合双向迭代器要求的迭代器。</p></li><li><p>随机访问迭代器（random-access iterator）：可以在常量时间内访问序列中的任何元素。除了支持所有双向迭代器的操作之外，还必须支持以下操作：</p></li><li><ul><li>用于比较两个迭代器相对位置的关系运算符<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>。</li><li>迭代器和一个整数值的加减法运算<code>+</code>、<code>+=</code>、<code>-</code>、<code>-=</code>，计算结果是迭代器在序列中前进或后退给定整数个元素后的位置。</li><li>用于两个迭代器上的减法运算符<code>-</code>，计算得到两个迭代器的距离。</li><li>下标运算符<code>[]</code>。</li></ul></li></ul><h3 id="算法形参模式（Algorithm-Parameter-Patterns）"><a href="#算法形参模式（Algorithm-Parameter-Patterns）" class="headerlink" title="算法形参模式（Algorithm Parameter Patterns）"></a>算法形参模式（Algorithm Parameter Patterns）</h3><p>大多数算法的形参模式是以下四种形式之一：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">alg(beg, end, other args);alg(beg, end, dest, other args);alg(beg, end, beg2, other args);alg(beg, end, beg2, end2, other args);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<em>alg</em>是算法名称，<em>beg</em>和<em>end</em>表示算法所操作的输入范围。几乎所有算法都接受一个输入范围，是否有其他参数依赖于算法操作。<em>dest</em>表示输出范围，<em>beg2</em>和<em>end2</em>表示第二个输入范围。</p><p>向输出迭代器写入数据的算法都假定目标空间足够容纳要写入的数据。</p><p>接受单独一个迭代器参数表示第二个输入范围的算法都假定从迭代器参数开始的序列至少与第一个输入范围一样大。</p><h3 id="算法命名规范（Algorithm-Naming-Conventions）"><a href="#算法命名规范（Algorithm-Naming-Conventions）" class="headerlink" title="算法命名规范（Algorithm Naming Conventions）"></a>算法命名规范（Algorithm Naming Conventions）</h3><p>接受谓词参数的算法都有附加的<code>_if</code>后缀。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">find(beg, end, val);       &#x2F;&#x2F; find the first instance of val in the input rangefind_if(beg, end, pred);   &#x2F;&#x2F; find the first instance for which pred is true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将执行结果写入额外目的空间的算法都有<code>_copy</code>后缀。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">reverse(beg, end);              &#x2F;&#x2F; reverse the elements in the input rangereverse_copy(beg, end, dest);   &#x2F;&#x2F; copy elements in reverse order into dest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一些算法同时提供<code>_copy</code>和<code>_if</code>版本。</p><h2 id="特定容器算法（Container-Specific-Algorithms）"><a href="#特定容器算法（Container-Specific-Algorithms）" class="headerlink" title="特定容器算法（Container-Specific Algorithms）"></a>特定容器算法（Container-Specific Algorithms）</h2><p>对于<code>list</code>和<code>forward_list</code>类型，应该优先使用成员函数版本的算法，而非通用算法。</p><p><code>list</code>和<code>forward_list</code>成员函数版本的算法：</p><p><img src="Images/10-9.png" alt="10-9"></p><p><code>list</code>和<code>forward_list</code>的<code>splice</code>函数可以进行容器合并，其参数如下：</p><p><img src="Images/10-10.png" alt="10-10"></p><p>链表特有版本的算法操作会改变底层容器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/02/cpp-primer-5th-notes-cn-master/chapter-1-getting-started/readme/"/>
      <url>2021/05/02/cpp-primer-5th-notes-cn-master/chapter-1-getting-started/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-开始"><a href="#第1章-开始" class="headerlink" title="第1章 开始"></a>第1章 开始</h1><p>最简单的<code>main</code>函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>C++包含两种注释，注释界定符<code>/**/</code>通常用于多行注释，而双斜杠<code>//</code>通常用于单行或半行注释。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;&#x2F;** Simple main function:* Read two numbers and write their sum*&#x2F;int main()&#123;    int sum &#x3D; 0, val &#x3D; 1;    &#x2F;&#x2F; keep executing the while as long as val is less than or equal to 10    while (val &lt;&#x3D; 10)    &#123;        sum +&#x3D; val;  &#x2F;&#x2F; assigns sum + val to sum        ++val;       &#x2F;&#x2F; add 1 to val    &#125;    std::cout &lt;&lt; &quot;Sum of 1 to 10 inclusive is &quot;&lt;&lt; sum &lt;&lt; std::endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="2021/04/27/hello-world/"/>
      <url>2021/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>.<br>as</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
